/*
 * Copyrights (c) 2017 youkaoshi.cn. All rights reserved.
 * Author: Neugls
 * The source code is protected by laws. You cannot modify, distribute.
 */
(function ($) {
    Date.prototype.Format = function (fmt) { //author: meizz
        var o = {
            "M+": this.getMonth() + 1, //月份
            "d+": this.getDate(), //日
            "h+": this.getHours(), //小时
            "m+": this.getMinutes(), //分
            "s+": this.getSeconds(), //秒
            "q+": Math.floor((this.getMonth() + 3) / 3), //季度
            "S": this.getMilliseconds() //毫秒
        };
        if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var k in o)
            if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        return fmt;
    }

    if (!Array.prototype.reduce) {
        Array.prototype.reduce = function reduce(accumulator){
            if (this===null || this===undefined) throw new TypeError("Object is null or undefined");
            var i = 0, l = this.length >> 0, curr;
            if(typeof accumulator !== "function") // ES5 : "If IsCallable(callbackfn) is false, throw a TypeError exception."
                throw new TypeError("First argument is not callable");
            if(arguments.length < 2) {
                if (l === 0) throw new TypeError("Array length is 0 and no second argument");
                curr = this[0];
                i = 1; // start accumulating at the second element
            }
            else
                curr = arguments[1];
            while (i < l) {
                if(i in this) curr = accumulator.call(undefined, curr, this[i], i, this);
                ++i;
            }
            return curr;
        };
    }
    if (!Array.prototype.map) {
        Array.prototype.map = function(callback, thisArg) {
            var T, A, k;

            if (this == null) {
                throw new TypeError(" this is null or not defined");
            }

            // 1. Let O be the result of calling ToObject passing the |this| value as the argument.
            var O = Object(this);

            // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
            // 3. Let len be ToUint32(lenValue).
            var len = O.length >>> 0;

            // 4. If IsCallable(callback) is false, throw a TypeError exception.
            // See: http://es5.github.com/#x9.11
            if (typeof callback !== "function") {
                throw new TypeError(callback + " is not a function");
            }

            // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
            if (thisArg) {
                T = thisArg;
            }

            // 6. Let A be a new array created as if by the expression new Array(len) where Array is
            // the standard built-in constructor with that name and len is the value of len.
            A = new Array(len);

            // 7. Let k be 0
            k = 0;

            // 8. Repeat, while k < len
            while(k < len) {

                var kValue, mappedValue;

                // a. Let Pk be ToString(k).
                //   This is implicit for LHS operands of the in operator
                // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
                //   This step can be combined with c
                // c. If kPresent is true, then
                if (k in O) {

                    // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
                    kValue = O[ k ];

                    // ii. Let mappedValue be the result of calling the Call internal method of callback
                    // with T as the this value and argument list containing kValue, k, and O.
                    mappedValue = callback.call(T, kValue, k, O);

                    // iii. Call the DefineOwnProperty internal method of A with arguments
                    // Pk, Property Descriptor {Value: mappedValue, : true, Enumerable: true, Configurable: true},
                    // and false.

                    // In browsers that support Object.defineProperty, use the following:
                    // Object.defineProperty(A, Pk, { value: mappedValue, writable: true, enumerable: true, configurable: true });

                    // For best browser support, use the following:
                    A[ k ] = mappedValue;
                }
                // d. Increase k by 1.
                k++;
            }

            // 9. return A
            return A;
        };
    }
    String.prototype.trim = function () {
        return this.replace(/(^\s*)|(\s*$)/g, '');
    };

    String.prototype.format = function () {
        if (arguments.length == 0)
            return this;
        var str = this;
        str += "";
        for (var i = 0; i < arguments.length; i++) {
            var reg = new RegExp('\\{' + i + '\\}', 'gm');
            str = str.replace(reg, arguments[i]);
        }
        return str;
    };

    Number.prototype.isInteger = function () {
        return this % 1 === 0;
    }

    function ispc() {
        var userAgentInfo = navigator.userAgent;
        var Agents = ["Android", "iPhone",
            "SymbianOS", "Windows Phone",
            "iPad", "iPod"];
        var flag = true;
        for (var v = 0; v < Agents.length; v++) {
            if (userAgentInfo.indexOf(Agents[v]) > 0) {
                flag = false;
                break;
            }
        }
        return flag;
    }
    function isWechat(){
        var ua = navigator.userAgent.toLowerCase();
        if(ua.match(/MicroMessenger/i)=="micromessenger") {
            return true;
        } else {
            return false;
        }
    }
    function isPhone(phone){
        var myreg = /^(13[0-9]|14[5679]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\d{8}$/;
        if (!myreg.test(phone)) {
            return false;
        } else {
            return true;
        }
    }
    function flySearch(event,offset,flyer,target) {
        var pageX = event.pageX,pageY = event.pageY;
        if(!pageX){
            pageX = $(target).offset().left;
            pageY = $(target).offset().top;
        }
        flyer.fly({
            start:{
                left: pageX,
                top: pageY
            },
            end:{
                left: offset.left+10,
                top: offset.top+10,
                width: 0,
                height: 0
            },
            onEnd:function(){

            }
        })
    }

    function getBrowserHeight(){
        // 获取窗口宽度
        if (window.innerWidth)
            winWidth = window.innerWidth;
        else if ((document.body) && (document.body.clientWidth))
            winWidth = document.body.clientWidth;
        // 获取窗口高度
        if (window.innerHeight)
            winHeight = window.innerHeight;
        else if ((document.body) && (document.body.clientHeight))
            winHeight = document.body.clientHeight;
        // 通过深入 Document 内部对 body 进行检测，获取窗口大小
        if (document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth)
        {
            winHeight = document.documentElement.clientHeight;
            winWidth = document.documentElement.clientWidth;
        }
        return winHeight;
    }


    function formatTime(time){
        var g = function (nn) {
            var n = nn;
            n = Math.floor(n);
            if (n >= 10)
                return n;
            return '0' + n;
        }
        var f = function (tt) {
            var t = tt;
            var r = '';
            if (t > 3600) {
                r += g(t / 3600) + ":";
                t = t % 3600;
            }
            ;
            if (t > 60) {
                r += g(t / 60);
                t = t % 60;
            } else {
                r += g(0);
            }
            r += ":" + g(t);
            return r;
        }
        return f(time);
    }

    var escapeJSON = function (str) {
        return str.replace(/\\n/g, "\\n")
            .replace(/\\'/g, "\\'")
            .replace(/\\"/g, "\\\"")
            .replace(/\\&/g, "\\&")
            .replace(/\\r/g, "\\r")
            .replace(/\\t/g, "\\t")
            .replace(/\\b/g, "\\b")
            .replace(/\\f/g, "\\f");
    }

    $.CE = {
        escapeJSON: escapeJSON,
        addNewQuestionCategory: function (callback) {
            var dialog = $.dialog({
                initialize: function () {
                    $(".d-close").hide();
                },
                title: OELang.loading,
                lock: true,
                fixed: true,
                zIndex: 8001
            });
            $.ajax({
                url: YKS.addQuestionCatURL
            }).done(function (data) {
                dialog.content(data);
                $(".d-close").show();
                dialog.title(OELang.addCategory);
                $($("#cateTitle")[0]).focus();

                $("#btnAddCate").bind("click", function () {
                    $.ajax({
                        type: "POST",
                        url: YKS.saveCategoryURL,
                        data: $("#formAddCategory").serialize()
                    }).done(function (data) {
                        $("#catid").html(data);
                        window.QuestionCatids = data;
                        dialog.close();
                        if (callback)
                            callback();
                    });
                    $("#btnAddCate").hide();
                    $("#btnCancelCate").hide();
                    $("#cateTitle").attr("disabled", "disabled");
                    $('<div class="d-loading"><span>loading..</span></div>').appendTo("#formAddCategory");
                    return false;
                });

                $("#btnCancelCate").bind("click", function () {
                    dialog.close();
                    if (callback)
                        callback();
                    return false;
                })
            })
        },
        addNewExamCategory: function (callback) {
            var dialog = $.dialog({
                initialize: function () {
                    $(".d-close").hide();
                },
                title: OELang.loading,
                lock: true,
                fixed: true,
                zIndex: 8001
            });
            $.ajax({
                url: YKS.addExamCatURL
            }).done(function (data) {
                dialog.content(data);
                $(".d-close").show();
                dialog.title(OELang.addCategory);
                $($("#cateTitle")[0]).focus();

                $("#btnAddCate").bind("click", function () {
                    $.ajax({
                        type: "POST",
                        url: YKS.saveCategoryURL,
                        data: $("#formAddCategory").serialize()
                    }).done(function (data) {
                        $("#catid").html(data);
                        //$("#catid").chosen();
                        window.ExamCatids = data;
                        dialog.close();
                        if (callback)
                            callback();
                    });
                    $("#btnAddCate").hide();
                    $("#btnCancelCate").hide();
                    $("#cateTitle").attr("disabled", "disabled");
                    $('<div class="d-loading"><span>loading..</span></div>').appendTo("#formAddCategory");
                    return false;
                });

                $("#btnCancelCate").bind("click", function () {
                    dialog.close();
                    if (callback)
                        callback();
                    return false;
                })
            })
        },
        /*
         *loading questions list.
         *eid 指定不显示已经存在于试卷eid的试题
         */
        loadQuestionList: function (url, display, search_text, filter_question_type, filter_question_cateid, eid, callback) {
            $.ajax({
                url: url ? url : YKS.ListQuestionsURL,
                data: {
                    display: display,
                    search: search_text,
                    fqt: filter_question_type,
                    catid: filter_question_cateid,
                    eid: eid,
                    format: "raw",
                    limit: 6
                }
            }).done(function (data) {
                var dataO = $.parseJSON(data);
                if (callback) {
                    callback(dataO);
                }
            });
        },

        formatTime: formatTime,

        showNeedUpgrade: function () {
            var box = new jBox('Modal', {
                ajax: {
                    url: YKS.needUpgradeURL
                }
            });
            box.open();
        },
        showPrompt: function (title, prompt, link, btn) {
            var content = '<div class="row"><div class="col-md-12"><div class="portlet"><div class="portlet-title"> <div class="caption">{0}</div></div><div class="portlet-body"><div class="row"><div class="col-md-12"><p>{1}</p></div></div><div class="row"><div class="col-md-12" style="margin-top:10px"><a href="{2}" target="_blank" id="btnAddCate" class="btn blue">{3}</a></div></div></div></div></div></div>';
            var jbox = new jBox('Modal', {
                content: content.format(title, prompt, link, btn)
            });
            jbox.open();
        },
        needUpgrade: function(title){
            $.CE.showPrompt(window.OELang.needToBuy, title ,window.YKS.needBuyURL,window.OELang.buyNow);
        },
        needUpgradeAccount:function(title) {
            $.CE.showPrompt(window.OELang.needToUpgrade, title ,window.YKS.needBuyURL,window.OELang.upgradeNow);
        },
        needContact:function(content,iscn,qq) {
            //联系客服
            if(typeof qq == "undefined") qq = 206253083;
            var url = "http://wpa.qq.com/msgrd?v=3&uin={0}&site=qq&menu=yes".format(qq)
            if(!iscn){
                url = "mailto:support@smlme.com"
            }
            $.CE.showPrompt(window.OELang.needToUpgrade, content ,url,window.OELang.contact);
        }
    }


    $(function () {
        var oKeep, oTxt;
        $(".overlay-box").hover(function () {
            oKeep = $(this).find('.keep');
            oTxt = $(this).find('.txt');
            oKeep.stop().animate({
                opacity: 0.8
            }, 300);
            oTxt.stop().animate({
                left: 0,
                opacity: 1
            }, 200);
        }, function () {
            oKeep.stop().animate({
                opacity: 0
            }, 300);
            oTxt.stop().animate({
                left: -170,
                opacity: 0
            }, 200);
        });

        //处理分享
        $("span[class^='st_']").click(function(e){
            var dest = $(this).attr("data-dest"),
                title = $(this).attr("data-title"),
                url = $(this).attr("data-url");

            var endpoint = "http://rest.sharethis.com/v1/share/share?destination={0}&url={1}&title={2}&api_key=c33162ec-9a64-4eaf-ad6b-0243900ab6de";
            if(dest=="email"){
                endpoint = url;
            }else{
                endpoint = endpoint.format(dest, escape(url), escape(title));
            }
            window.open(endpoint);
        })
    });

    (function () {
        var pluginName = "aSubmit",
            defaults = {
                beforeSubmit: function () {
                    return true;
                },
                success: function () {
                },
                error: function () {
                },
                complete: function () {
                }
            };

        // The actual plugin constructor
        function Plugin(element, options)
        {
            this.element = element;
            this.$form = $(element);
            this.settings = $.extend({}, defaults, options);
            this._defaults = defaults;
            this._name = pluginName;
            this.init();
        }

        Plugin.prototype =
            {
                /**
                 * Initialize the plugin
                 *
                 * @return void
                 */
                init: function ()
                {
                    this.$form.on('submit', {context: this}, this.uploadFiles);
                },
                /**
                 * Handles the file uploads
                 *
                 * @param  jQuery event
                 * @return void
                 */
                uploadFiles: function (event)
                {
                    event.stopPropagation(); // Stop stuff happening
                    event.preventDefault(); // Totally stop stuff happening

                    var self = event.data.context;

                    // Run the before callback
                    self.settings.beforeSubmit();

                    // Declare a form data object
                    var data = new FormData(this);

                    // Perform Ajax call
                    $.ajax($.extend({}, {
                        url: self.$form.attr('action'),
                        type: 'POST',
                        data: data,
                        cache: false,
                        dataType: 'json',
                        processData: false, // Don't process the files, we're using FormData
                        contentType: false, // Set content type to false as jQuery will tell the server its a query string request
                        success: function (data, textStatus, jqXHR) {
                            self.settings.success(data, textStatus, jqXHR);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            self.settings.error(jqXHR, textStatus, errorThrown);
                        },
                        complete: function (jqXHR, textStatus) {
                            self.settings.complete(jqXHR, textStatus);
                        }
                    }, self.settings.uploadOptions));
                }
            };

        // Make uploader usable with jQuery selectors
        $.fn[pluginName] = function (options) {
            options || (options = {});
            return new Plugin($(this),options);
        };

    })($, window, document)


    var NW = {
        buildCheck: function(target){
            target = target?target:document;
            target = $(target);
            target.off("mouseenter", ".checker").on("mouseenter", ".checker", function(ein){
                $(this).addClass("hover");
            }).off("mouseleave", ".checker").on("mouseleave", ".checker", function(ein){
                $(this).removeClass("hover");
            }).off("click", ".checker").on("click", ".checker", function(e){
                var checked = false;
                if ($(this).children("span").hasClass("checked")) {
                    $(this).children("span").removeClass("checked");
                    checked = false;
                } else {
                    $(this).children("span").addClass("checked");
                    checked = true;
                }


                if ($(this).find(".group-checkable").length > 0) {
                    if (checked) {
                        target.find(".checker").children("span").addClass("checked");
                    } else {
                        target.find(".checker").children("span").removeClass("checked");
                    }
                }
                return false;
            })
        },
        getCheckValues: function(target){
            target = target?target:document;
            target = $(target);

            var checkers = target.find(".checked");
            var vals = $.makeArray(checkers).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function(value){
                return value > 0;
            });
            return vals;
        },
        //执行tick
        tick: function(url, t){
            setInterval(function(){
                var data = {};
                data[t] = 1;
                $.post(url, data, function(data){

                });
            }, 3*60*1000)
        },
        makeLoading: function (target) {
            $(target).addClass("disabled").append($('<i class="fa fa-spin fa-spinner"></i>'));
        },
        makeUnLoading: function (target) {
            $(target).find("i.fa-spinner").remove();
            $(target).removeClass("disabled");
        },
        ispc:ispc,
        isWechat:isWechat

    }
    window.NW = NW;


    $.nAjaxTable = function (src, dataUrl, ajaxParams, options) {
        var grid = new Datatable();
        options = options? options: {};
        var opts = $.extend(true, {
            src: src,
            onSuccess: function (grid) {
            },
            onError: function (grid) {
                // execute some code on network or other general error
            },
            onDataLoad: function(grid) {
                // execute some code on ajax data load
            },
            ajaxParams:ajaxParams,
            loadingMessage: window.OELang.ajaxTable.loading,
            dataTable: {
                //"dom": "<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'<'table-group-actions pull-right'>>r>t<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>>",
                "bStateSave": true, // save datatable state(pagination, sort, etc) in cookie.
                "lengthMenu": [
                    [10, 30, 50, 100, 150, 300, 500],
                    [10, 30, 50, 100, 150, 300, 500] // change per page values here
                ],
                "pageLength": 30, // default record count per page
                "ajax": {
                    "url": dataUrl, // ajax source
                },
                "order": [
                    [1, "desc"]
                ],
                language: {
                    "metronicGroupActions": "_TOTAL_ records selected:  ",
                    "metronicAjaxRequestGeneralError": window.OELang.ajaxTable.requestError,
                    // data tables spesific
                    "lengthMenu": window.OELang.ajaxTable.pageSizeSelect,
                    "info": window.OELang.ajaxTable.totalRecords,
                    "infoEmpty": window.OELang.ajaxTable.noRecords,
                    "emptyTable": window.OELang.ajaxTable.noData,
                    "zeroRecords": window.OELang.ajaxTable.noMatchRecord,
                    "paginate": {
                        "previous": window.OELang.ajaxTable.prev,
                        "next": window.OELang.ajaxTable.next,
                        "last": window.OELang.ajaxTable.last,
                        "first": window.OELang.ajaxTable.first,
                        "page": window.OELang.ajaxTable.page,
                        "pageOf": "/"
                    }
                }
            }
        }, options );

        grid.init(opts);
        return grid;
    }


    function lowerIe8() {
        var browser = navigator.appName;
        var b_version = navigator.appVersion;
        var version = b_version.split(";");
        if (version.length > 1) {
            var trim_Version = parseInt(version[1].replace(/[ ]/g, "").replace(/MSIE/g, ""));
            if (trim_Version < 9) {
                return true;
            }
        }
        return false;
    }

    /**
     * 显示自定义确认对话框
     * @param title 对话框标题
     * @param yesText
     * @param noText 取消按钮文本
     * @param content
     * @param callback
     */
    function showCustomConfirmDialog(title,yesText,noText,content, callback){
        callback = callback === undefined? function(){} : callback;

        var clicked = false;
        var dialog = NW.showDialog( content, [
            {
                label: yesText,
                onClick: function(){
                    clicked = true;
                    dialog.close();
                    callback.call(this, 'yes');
                }
            },
            {
                label: noText,
                primary: true,
                onClick: function(){
                    clicked = true;
                    dialog.close();
                    callback.call(this, 'no');
                }
            }
        ], title)
        dialog.onFinish = function () {
            if(!clicked){
                callback.call(dialog, 'no');
            }
        }
        return dialog;
    }
    NW.showCustomConfirmDialog = showCustomConfirmDialog;


    /**
     * 显示确认对话框
     * @param content
     * @param callback
     */
    function showConfirmDialog(content, callback){
        callback = callback === undefined? function(){} : callback;

        var clicked = false;
        var dialog = NW.showDialog( content, [
            {
                label: window.OELang.yes,
                onClick: function(){
                    clicked = true;
                    dialog.close();
                    callback.call(this, 'yes');
                }
            },
            {
                label: window.OELang.no,
                primary: true,
                onClick: function(){
                    clicked = true;
                    dialog.close();
                    callback.call(this, 'no');
                }
            }
        ], window.OELang.notice)
        dialog.onFinish = function () {
            if(!clicked){
                callback.call(dialog, 'no');
            }
        }
        return dialog;
    }
    NW.showConfirmDialog = showConfirmDialog;


    function showDialog(content, btns, title, dialogOptions, tips) {
        var options = dialogOptions?dialogOptions:{};
        var maxSize = options.hasOwnProperty("maxSize") && options.maxSize == 1;
        var result = {
            onFinish: function () {

            },
            close: function () {
                this.dialog.close();
                if(lowerIe8() || window.jBox == undefined){
                    this.dialog.remove();
                }
            },
            dialog: null,
            disableBtns: function(disable){

            },
            onShow: function(){

            }
        }
        if(lowerIe8() || window.jBox == undefined ){
            var local_btns = [];
            for(var i=0; i<btns.length; i++){
                var b = btns[i];
                b.value = b.label;
                b.callback = b.onClick;
                if(b.primary) b.focus = b.primary;
                local_btns.push(b);
            }

            var dialog = $.dialog($.extend(options,{
                title: title,
                lock: true,
                fixed: true,
                zIndex: 8001,
                content: content,
                button: local_btns,
                onremove: function () {
                    if(result.onFinish){
                        result.onFinish();
                    }
                }
            }));
            result.dialog = dialog;
            return result;
        }else{
            var contents = '<div class="row"><div class="col-md-12 dialog-content"><div class="dialog-tips">{0}</div>{2}</div><div class="col-md-12 uaqbtns text-right uaqbtns-new">{1}</div></div>';
            var buttons = '';

            btns = btns?btns:[];
            for( i=0; i<btns.length; i++ ){
                var cls = ["btn"];
                if( btns[i].primary ){
                    cls.push("yks-blue");
                } else{
                    cls.push("yks-default");
                }
                if(btns[i].cls){
                    cls = cls.concat(btns[i].cls);
                }

                var id = 'uaqbtn_'+i;
                if( btns[i].id){
                    id = btns[i].id;
                }
                buttons += '<button id="{0}" idx="{3}" class="{1}">{2}</button>'.format( id, cls.join(' '), btns[i].label, i );
            }

            var winWidth, winHeight;
            if (window.innerWidth){
                winWidth = window.innerWidth;
                winHeight = window.innerHeight;
            }else if ((document.body) && (document.body.clientWidth)){
                winWidth = document.body.clientWidth;
                winHeight = document.body.clientHeight;
            }

            tips = tips?tips:'';
            if( tips != '' ){
                tips = '<div class="note note-success">{0}</div>'.format(tips);
            }

            var opt = $.extend({}, options, {
                title: title?title:window.OELang.needAnswerAll,
                maxWidth: maxSize?winWidth*0.9:Math.min(winWidth*0.9, 800),
                maxHeight: maxSize?winHeight*0.9:Math.min(winHeight*0.9, 700),
                minWidth:316,
                minHeight:197,
                content: contents.format(tips?tips:'', buttons, content),
                onCreated: function () {
                    var self = this;
                    $(".uaqbtns").on("click", "button", function (e) {
                        e.preventDefault();
                        var index = Number( $(this).attr("idx") );
                        if( btns[index].onClick ){
                            btns[index].onClick.call(this, []);
                        }
                    })
                    if( options && options.hasOwnProperty('onCreated')){
                        options.onCreated.call( this, []);
                    }
                },
                onCloseComplete: function () {
                    this.destroy();
                    if(result.onFinish){
                        result.onFinish();
                    }
                }
            });

            var jbox = new jBox("Modal", opt);
            jbox.open();
            result.dialog = jbox;
            result.disableBtns = function(disable){
                $(".uaqbtns button").prop("disabled", disable?"disabled":"");
            }
            result.maxSize = function(){
                jbox.setWidth(winWidth*0.9);
                jbox.setHeight(winHeight*0.9);
            }
            return result;
        }
    }
    NW.showDialog = showDialog;

    function messageBox(title, content, callback, okText){
        callback = callback?callback:function(){}
        var clicked = false;
        var dialog = showDialog(content, [
            {
                label: okText?okText:window.OELang.ok,
                onClick:function () {
                    callback();
                    clicked = true;
                    dialog.dialog.close();
                },
                primary: true
            }
        ], title, {
            onClose: function () {
                if(!clicked){}
            },
            closeOnEsc: false,
            closeOnClick:false,
        })
        return dialog;
    }

    NW.messageBox = messageBox;

    ///////////////////////阿拉伯数字转中文/////////////////////////////
    var chnNumChar = ["零","一","二","三","四","五","六","七","八","九"];
    var chnUnitSection = ["","万","亿","万亿","亿亿"];
    var chnUnitChar = ["","十","百","千"];
    function SectionToChinese(section){
        var strIns = '', chnStr = '';
        var unitPos = 0;
        var zero = true;
        while(section > 0){
            var v = section % 10;
            if(v === 0){
                if(!zero){
                    zero = true;
                    chnStr = chnNumChar[v] + chnStr;
                }
            }else{
                zero = false;
                strIns = chnNumChar[v];
                strIns += chnUnitChar[unitPos];
                chnStr = strIns + chnStr;
            }
            unitPos++;
            section = Math.floor(section / 10);
        }
        return chnStr;
    }
    function NumberToChinese(num){
        var unitPos = 0;
        var strIns = '', chnStr = '';
        var needZero = false;

        if(num === 0){
            return chnNumChar[0];
        }

        while(num > 0){
            var section = num % 10000;
            if(needZero){
                chnStr = chnNumChar[0] + chnStr;
            }
            strIns = SectionToChinese(section);
            strIns += (section !== 0) ? chnUnitSection[unitPos] : chnUnitSection[0];
            chnStr = strIns + chnStr;
            needZero = (section < 1000) && (section > 0);
            num = Math.floor(num / 10000);
            unitPos++;
        }

        return chnStr;
    }
    ///////////////////////阿拉伯数字转中文 下/////////////////////////////


    /**
     * when click a question title, dynamic load the question brief information
     * @param e the event data
     */
    function onBriefViewQuestion(e){
        e.preventDefault();

        var self = $(this),
            pTr = self.parents("tr"),
            pTabContent = self.parents(".statistic-tabs-content"),
            qid = self.attr("clickViewQuestionDetails"),
            cTr = $("tr[briefid='" + qid + "']");
        if (cTr.length > 0) {
            cTr.find('td > div').slideUp("normal", function () {
                cTr.remove();
            })
            return false;
        }

        var cols = pTr.find("td").length;
        var url = self.attr("href");
        if( url == "" || url=="/"){
            url = window.YKS.briefQuestionURL+"&qid="+qid;
        }
        if(self.data("from")){
            url += "&from="+self.data("from");
        }
        if(self.parents('.statistic-tabs-content').length > 0) {
            url += "&isstatisticexam=1";
        }

        $("<tr briefid='" + qid + "'><td colspan='"+cols+"'><div class='center spinner'></div></td></tr>").insertAfter(pTr);
        cTr = $("tr[briefid='" + qid + "']");
        $.get(url,
            {
                qid: qid
            },
            function (data) {
                cTr.find("td").html(data);
                cTr.find("a[href='#close']").click(function () {
                    cTr.find('td > div').slideUp("normal", function () {
                        cTr.remove();
                    })
                    return false;
                })

                if(MathJax) MathJax.Hub.Queue(["Typeset", MathJax.Hub])

                var wrongrights = $("#wrongrights" + qid);
                wrongrights.highcharts({
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: null,
                        plotShadow: false
                    }, credits: {
                        enabled: false
                    },
                    colors: ['#009999', '#CC0066'],
                    title: {
                        text: window.OELang.charts.wrongRightsDistribute
                    }, plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            cursor: 'pointer',
                            dataLabels: {
                                enabled: true,
                                color: '#000000',
                                connectorColor: '#000000',
                                format: '<b>{point.name}</b>: {point.percentage:.1f} %'
                            }
                        }
                    },
                    tooltip: {
                        pointFormat: '{point.name}: <b>{point.percentage:.1f}%</b>'
                    },
                    series: [
                        {
                            type: 'pie',
                            //name: 'Browser share',
                            data: [
                                [ window.OELang.charts.didRights, Number(wrongrights.attr('r'))],
                                [ window.OELang.charts.didWrongs, Number(wrongrights.attr('w'))]
                            ]
                        }
                    ]
                });

                //加载统计分析的答题记录
                if($("#taken-table").length>0){
                    var url = $("#taken-table").data("url");
                    $.nAjaxTable($("#taken-table"), url, {})

                    $("#taken-table").on('click', 'a.viewdetails', function(e){
                        viewTakenDetails($(this).attr('href'));
                        return false;
                    })
                }

            }
        );
    }


    //编辑
    function EditQuestion(qid, callback, data){
        var url = window.YKS.editQuestion;
        var tmp = '<div>' +
            '<iframe src="{0}" nomargin frameborder="0" style="width:100%; height:{1}px; overflow: hidden"></iframe>'+
            '</div>';

        data = data? data : {};
        data['qid'] = qid;
        var datas = [];
        for( var p in data ){
            datas.push('{0}={1}'.format(p, data[p]));
        }

        url += "&tmpl=component&savedcallback=onupdatedquestion&"+datas.join('&');

        var winWidth, winHeight;
        if (window.innerWidth){
            winWidth = window.innerWidth;
            winHeight = window.innerHeight;
        }else if ((document.body) && (document.body.clientWidth)){
            winWidth = document.body.clientWidth;
            winHeight = document.body.clientHeight;
        }


        var h = Math.min( winHeight*0.9, 900 );
        tmp = tmp.format( url, h-30 );

        var jbox = new jBox("Modal", {
            content: tmp,
            width: Math.min(winWidth*0.9, 800),
            height: h,
            preventDefault: true,
            onCloseComplete: function(){
                window.onupdatedquestion = null;
                jbox.destroy();
            },
            onCreated: function () {
                var dialog = this;
                window.onupdatedquestion = function(qtitle, qcate, qid, point){
                    callback( qid, qtitle, qcate, point );
                    dialog.close();
                }
                window.closeDialog = function(){
                    dialog.close();
                }
            }
        }).open();
    }



    /**
     * pre-select questions for the exam
     * @param eid
     */
    function setupPreselectFromQuestionBank(eid, token) {
        //---试题排序---
        function getQuestionsOrderNumber(){
            var qids = [];
            $("#questions-list tr").each(function (index, el) {
                qids.push($(this).attr("qid"));
                $(this).find("span.index").html(index + 1);
            });
            return qids;
        }
        function toUpdateQuestionsOrder(questionsOrder) {
            $("#questionOrders").val(questionsOrder.join(','));
            $("a[href='#save']").removeAttr("disabled").removeClass("disabled");
        }
        function updateQuestionsOrder(){
            var qids = getQuestionsOrderNumber();
            toUpdateQuestionsOrder(qids);
        }
        function onSortUpdated(){
            updateQuestionsOrder();
        }
        Sortable.create(document.getElementById("questions-list"), {
            handle: '.question-move',
            animation: 150,
            onUpdate:onSortUpdated
        });
        function ajaxSaveQuestionsOrder(){
            var questionsListForm = $("#questionsListForm");
            $.post(questionsListForm.attr("action"), questionsListForm.serialize()).done(function (data) {
                $("a[href='#save']").attr("disabled", "disabled").addClass("disabled");
            }).fail(function (error) {
                $("a[href='#save']").removeAttr("disabled").removeClass("disabled");
            });
        }
        /**
         * sort the question order
         * order can be cate, type
         * @param order order by, value can be cate, type
         * @param desc, can be desc, or asc
         */
        function sortQuestionsOn(order, desc) {
            var tbody = $("#questions-list");
            var trList = tbody.find("tr");

            if( !desc ) desc = "desc";

            if( trList.length <= 0 ) return;

            trList.sort(function (a, b) {
                var prop = "qtid";
                if (order == "cate") { //#orderbycate
                    prop = "catid";
                }

                var na = Number($(a).attr(prop)),
                    nb = Number($(b).attr(prop));
                return desc == "desc" ? (nb - na) : ( na - nb );
            });
            var orders = [];
            trList.each(function () {
                var tr = $(this);
                orders.push(tr.attr("qid"));
                tbody.append(tr);
            });

            toUpdateQuestionsOrder(orders);
            getQuestionsOrderNumber();
        }
        function onSortQuestions(e) {
            e.preventDefault();
            var href = $(this).attr("href"),
                desc = $(this).attr("desc");
            if(!desc) desc = "desc";
            sortQuestionsOn(href=="#orderbycate"?"cate":"type", desc);
            if( desc == "desc" ){
                $(this).attr("desc", "asc");
            }else{
                $(this).attr("desc", "desc");
            }
        }
        //---试题排序end---

        //---手动添加试题---
        var loadingInnerHtml = $("#loading").html(),
            display = "all",
            questionType = -1,
            questionCate = -1,
            addingNewQuestion = true;
        var box;
        function removeQuestionFromTable(qids, onSuccess, deleteFromBank) {
            if( !(qids instanceof Array)) {
                qids = [qids];
            }

            deleteFromBank = !deleteFromBank?false:true;

            var data = {
                qid: qids.join(","),
                eid: eid,
                deletefrombank: deleteFromBank ? 1 : 0
            };
            data[token] = 1;
            $.post(window.YKS.removeExamQuestion, data).done(function (data) {
                if ($.trim(data) == "ok") {
                    for(var i = 0; i<qids.length; i++){
                        var s = "#questionList tr[qid='{0}']".format(qids[i]);
                        var qidtr = $(s);
                        qidtr.eq(0).remove();//删除重复试题删除一个就好了
                    }
                    updateQuestionsOrder();
                    onSuccess = onSuccess || function (qids) {};
                    onSuccess(qids.length==1?qids[0]:qids);
                } else {
                    NW.messageBox(window.OELang.notice, window.OELang.examQuestions.removeQuestionFailed);
                }
            })
        }
        function updateQuestionsCount() {
            $("#questionscount > b").html($("#questionList tr").length-1)
            updateSocre();
        }
        function onRemove(e) {
            if(e) e.preventDefault();
            var self = $(this);
            var origin = $(this).html();
            $(this).html('<i class="fa fa-spin fa-spinner"></i>');
            DeleteQuestions([$(this).attr("qid")], function(success){
                if(!success) self.html(origin);
            });
            return false;
        };
        function addQuestionToTable(title, category, qid, qtid, catid, questionType, score,setScore,isadvance) {

            setScore = typeof setScore !== 'undefined' ? setScore : -1;

            var qscore = '<td class="score" data-score="{8}" data-qscore="{7}">{7}</td>'
            if(isadvance==1){
                qscore = ''
            }
            var html = '<tr qid="{2}" qtid="{4}" catid="{5}">' +
                ' <td><div class="checker"><span class=""><input type="checkbox" name="qid[]" class="checkboxes" value="{2}"></span></div></td> '+
                ' <td>{3}</td>' +
                ' <td><a clickViewQuestionDetails="{2}" href="" data-from="eq">{0}</a></td>' +
                ' <td>{1}</td>' +
                ' <td>{6}</td>' +
                qscore +
                ' <td>' +
                '    <span><a href="#" class="active" data-action="edit-question" qid="{2}">'+ window.OELang.edit +'</a></span> ';
            if(!isadvance){
                html = html + '    <span>|</span> ' + '    <span><a href="#addition" action="addition">'+window.OELang.examQuestions.setAddition+'</a></span> ' +
                    '    <span class="edit-score-span">|</span> ';
            }
            html = html + '    <span class="edit-score"><a href="#chscore">'+window.OELang.examQuestions.changeScore+'</a></span> ' +
                ' </td>' +
                '</tr>';

            var index = '<i class="question-move fa fa-bars" aria-hidden="true" title="'+ window.OELang.examQuestions.dragToReorder +'"></i> <span class="index">'+$("#questionList tr").length+'</span>'

            html = html.format(title, category, qid, index, qtid, catid, questionType, score,setScore);

            $("#questionList").append(html);
            $(".qs-actions a").removeClass("disabled");
            updateQuestionsCount();
        };
        /*
         *loading questions list.
         *eid 指定不显示已经存在于试卷eid的试题
         */
        function toLoadQuestionList(url, display, search_text, filter_question_type, filter_question_cateid, eid, callback) {
            $.ajax({
                url: url ? url : YKS.ListQuestionsURL,
                data: {
                    display: display,
                    search: search_text,
                    fqt: filter_question_type,
                    catid: filter_question_cateid,
                    eid: eid,
                    format: "raw",
                    limit: 6
                }
            }).done(function (data) {
                var dataO = $.parseJSON(data);
                if (callback) {
                    callback(dataO);
                }
            });
        }
        function loadQuestionList(url) {
            $(".question-list").html(loadingInnerHtml);
            var isAdvance = $(".question-list").data("isadvance");
            if(isAdvance == 1){
                questionType = 1;
            }
            toLoadQuestionList(url, display, $("#searchtxt").val(), questionType, questionCate, eid, function (data) {
                var tmpl = $("#question_item_tmpl").text();
                var questiontypes = window.YKS.questiontypes;

                if (data.questions.length < 1) {
                    $(".question-list").html(window.OELang.noRecordMatched);
                    $(".paginations").html('');
                    return;
                }

                var qhtml = data.questions.map(function (q) {
                    var author = q.hasOwnProperty("author")?q.author:"";
                    for (var i = 0; i < questiontypes.length; i++) {
                        var cls = "multi-choice";
                        if (questiontypes[i].qtid == Number(q.qtid)) {
                            switch (Number(q.qtid)) {
                                case 1:
                                    cls = "multi-choice";
                                    break;
                                case 2:
                                    cls = "multi-response";
                                    break;
                                case 3:
                                    cls = "truefalse";
                                    break;
                            }
                            return tmpl.format(q.qid, q.title, questiontypes[i].label, q.category?q.category:window.OELang.examQuestions.uncategoried, cls, q.qtid, q.catid, q.points, author);
                        }
                    }
                    return tmpl.format(q.qid, q.title, 'qt', q.category?q.category:window.OELang.examQuestions.uncategoried, "", 0, 0, 0, author);
                }).join("");

                $(".question-list").html(qhtml);
                $(".paginations").html(data.pages);
            });

            $("#addQuestionContent").removeClass("hidden");
        }
        function onAddQuestionsToExam(e){
            e.preventDefault();
            var w = window.innerWidth*0.9,
                h = window.innerHeight*0.9;

            box = box || new jBox('Modal', {
                content: $("#addQuestionContent")/*.html()*/,
                maxWidth: 1300,
                maxHeight: 900,
                width: w,
                height: h,
                fixed: true,
                onCloseComplete: function () {
                    // box.destroy();
                },
                onCreated: function () {
                    loadQuestionList(null);
                    $("#newQuestionFrame").attr("width", Math.min(w, 1300)-60).attr("height", h - 124);
                    $("#importQuestionFrame").attr("width", Math.min(w, 1300)-60).attr("height", h-124);
                    $('#select_random_submit').css('display','none').addClass("disabled");
                }
            });
            box.toggle();
        }
        function closeBox() {
            if(box){
                box.close();
            }
        }
        function onPaginationItemClick(e) {
            e.preventDefault();
            var _url = $(this).attr("href");
            if (_url.indexOf("javascript") > -1)
                return false;
            loadQuestionList(_url);
        }
        function onQuestionItemClick(e) {
            var isadvance = $(this).parents().first().data("isadvance");
            var setScore = 1;
            if(!isadvance){
                isadvance = 0;
                var setScore = undefined;
            }
            var self = $(this);
            var target = $(this).find("span.check-mark");
            var offset = target.offset();
            var operatingI = $('<i class="fa fa-spinner fa-spin fa-2x"></i>');
            self.find("span.check-mark").append(operatingI);
            if( self.hasClass("active") ) {
                var checkmark = self.find("span.check-mark");
                checkmark.removeClass("checked");
                removeQuestionFromTable( self.attr("qid"), function (qid) {
                    self.removeClass("active");
                    operatingI.remove();
                    updateQuestionsCount();
                    new jBox('Notice', {
                        content: window.OELang.examQuestions.removedQuestionFromExam,
                        attributes: {
                            x: 'left',
                            y: 'top'
                        },position: {
                            x: offset.left-100,
                            y: offset.top + 64
                        },
                        autoClose: 1500,
                        color: 'green',
                        target: target
                    });
                });
            } else {
                self.addClass("pending");
                var data = {
                    eid: eid,
                    qid: self.attr("qid")
                };
                data[token] = 1;
                $.ajax({
                    url: window.YKS.addQuestionToExam,
                    data: data
                }).done(function (resp) {
                    self.removeClass("pending");
                    operatingI.remove();
                    resp = $.parseJSON(resp);

                    if ( resp.status == "ok" ) {
                        self.addClass("active");
                        var checkmark = self.find("span.check-mark");
                        checkmark.addClass("checked");
                        var t = self.find(".title").text(),
                            cate = self.find(".qcate").text(),
                            qtype = self.find(".qt").text(),
                            score = self.find(".meta").attr("data-score");

                        addQuestionToTable(t, cate, self.attr("qid"), self.attr("qtid"), self.attr("catid"), qtype, score,setScore,isadvance);

                        new jBox('Notice', {
                            content: window.OELang.examQuestions.questionAddedToExam,
                            attributes: {
                                x: 'left',
                                y: 'top'
                            },
                            position: {
                                x: offset.left-100,
                                y: offset.top + 64
                            },
                            autoClose: 1500,
                            color: 'green',
                            target: target
                        });
                    } else {
                        alert(resp.error);
                    }
                }).fail(function(e){
                    alert( window.OELang.rePloginlease );
                })
            }
        }
        //---手动选题end---

        //---随机选择试题---
        //随机选择试题调整分类试题数事件

        $(".preslect-random-from-bank").on("change", "span.qts-count input", function () {
            var max = $(this).attr("max"),
                value = parseInt($(this).val());
            if(value > max) $(this).val(max);
            if(value < 0) $(this).val(0);

            var currentList = $(this).parents(".qt-counts-list");
            if(currentList.length > 0){
                var count = currentList.find("span.qts-count input").map(function(){
                    return $(this).val();
                }).get().reduce(function(acc,v){
                    return Number(acc) + Number(v);
                });

                var catid = currentList.attr("id").replace("catid_", "");
                var pLi = $("#at-sel-qs-cs-ls").find("li[data-catid='" + catid + "']");
                pLi.find("span.qts-count.first").find("strong").html(count);
                updateCategroyItemFromQuestionType(currentList);
            }else{
                var ci = $(this),
                    pLi = ci.parents("li"),
                    si = pLi.find('span.qts-score.first input'),
                    catid = pLi.data("catid"),
                    counts = ci.val(),
                    score = si.val(),
                    qtCounts = [];
                saveCategoryItemData(catid, counts, score, qtCounts);
            }
        }).on('change', 'span.qts-score input', function (e) {
            var si = $(this);
            if(si.val() < 1){
                si.val(1);
            }
            var currentList = si.parents(".qt-counts-list");
            if (currentList.length > 0) {
                updateCategroyItemFromQuestionType(currentList);
            } else {
                var pLi = si.parents('li'),
                    catid = pLi.data('catid'),
                    ci = pLi.find('span.qts-count.first input'),
                    count = Number(ci.val()) > 0 ? Number(ci.val()) : 0,
                    score = Number(si.val()) > 1 ? Number(si.val()) : 1,
                    qtCounts = [];
                saveCategoryItemData(catid, count, score, qtCounts);
            }
        }).on("click", "i.fa-trash", function (e) {
            var pLi = $(this).parents("li"),
                catid = pLi.data("catid");
            // $(".available-categories").find("li[data-catid='"+catid+"']").removeClass("selected");
            pLi.fadeOut(800, function() {
                pLi.remove();
                if($("#at-sel-qs-cs-ls li").length<=0){
                    $(".questions-select-tip").removeClass("got");
                }
                updateScore();
            });
        });
        function updateCategroyItemFromQuestionType(qtCountsList){
            var qtCountsList = $(qtCountsList);
            var qtCounts = [], counts = 0;
            qtCountsList.find("div.question-type-item").map(function () {
                var item = $(this),
                    ci = item.find('span.qts-count input'),
                    si = item.find('span.qts-score input'),
                    qtid = ci.data('qtid'),
                    qtc = Number(ci.val()),
                    qts = Number(si.val());
                counts += qtc;
                qtCounts.push({
                    qtid: qtid,
                    count: qtc,
                    score: qts
                })
            });

            var catid = qtCountsList.attr("id").replace("catid_", "");
            saveCategoryItemData(catid, counts, 1, qtCounts);
        }
        function saveCategoryItemData(catid, itemTotal, itemScore, qtCounts) {
            var pLi = $("#at-sel-qs-cs-ls").find("li[data-catid='"+catid+"']");
            var data = {
                count: itemTotal,
                score: itemScore,
                qtCounts: qtCounts
            }
            pLi.data("selected-data", JSON.stringify(data));
            pLi.data("counts", itemTotal);
            pLi.data('score', itemScore);
            updateTotal(calculateTotal());
            updateScore();
            showQuestionTypeCounts(pLi, qtCounts);
        }
        function showQuestionTypeCounts(pLi, qtCounts) {
            if(qtCounts&&qtCounts.length>0){
                var qtLists = pLi.find("span.qt-lists");
                var qtKeyValue = {};
                window.YKS.questiontypes.map(function(qt){
                    qtKeyValue[qt.qtid] = qt;
                })


                if(qtLists.length==0){
                    qtLists = $("<span class='qt-lists'></span>").insertBefore(pLi.children("span:last"));
                }
                var content = qtCounts.map(function(v){
                    var qtid = v.qtid,
                        counts = v.count;
                    if(counts<=0) return "";
                    var colors = [
                        'badge-default',
                        'badge-primary',
                        'badge-info',
                        'badge-success',
                        'badge-danger',
                        'badge-warning'
                    ]
                    return "<b class='badge {2}'>{0} {1}</b>".format(qtKeyValue[qtid].label, counts, colors[qtid%colors.length]);
                }).join(" ");
                qtLists.html(content);
            }else{
                pLi.find("span.qt-lists").remove();
            }
        }
        //更新固定试卷随机抽题总分
        function updateScore() {
            var totalScore = 0;
            var categories = $('#at-sel-qs-cs-ls li');
            for (var i = 0; i < categories.length; i++) {
                var obj = $(categories[i]);
                // var str = obj.data('selected-data');
                if (obj.data('selected-data') == undefined) {
                    continue;
                }
                var seledData = typeof obj.data('selected-data') == 'string' ? JSON.parse(obj.data('selected-data')) : obj.data('selected-data');
                var categoryScore = 0;
                if (seledData.qtCounts.length > 0) {
                    for (var j = 0; j < seledData.qtCounts.length; j++) {
                        var obj1 = seledData.qtCounts[j];
                        categoryScore += Number(obj1.count) * Number(obj1.score);
                    }
                } else {
                    categoryScore = Number(seledData.count) * Number(seledData.score);
                }
                obj.find('span.category-total-score').html(window.OELang.totalNScore.format('<b>' + (categoryScore.isInteger() ? categoryScore : categoryScore.toFixed(1)) + '</b>'));
                totalScore += categoryScore;
            }
            updateTotal(calculateTotal());
            $(".qts-counts-tip").find('span.exam-total-score').html(window.OELang.totalNScore.format('<b>' + (totalScore.isInteger() ? totalScore : totalScore.toFixed(1)) + '</b>'));
        }
        function updateTotal(total){
            var categories = $("#at-sel-qs-cs-ls li").length;
            $(".preslect-random-from-bank .qts-counts-tip").find('span.question-count').html(window.OELang.selectedncategory.format(categories, total));

            if(total>0){
                $(".qs-actions a").removeClass("disabled");
                $("#select_random_submit").css('display','inline-block').removeClass("disabled").html(window.OELang.examQuestions.preSelectQuestionFromCategories.format(total));
            }else{
                $(".qs-actions a").addClass("disabled");
                $("#select_random_submit").css('display','none').addClass("disabled");
            }
        }
        function calculateTotal(){

            var sellics = $('#at-sel-qs-cs-ls li');
            var count = 0;
            if(sellics.length > 0){
                count = sellics.map(function () {
                    var count = $(this).data("counts");
                    return count ? Number(count) : 0;
                }).get().reduce(function (acc, v) {
                    return Number(acc) + Number(v);
                });
            }

            return count.isInteger() ? count : count.toFixed(1);
        }

        function getRandomSelectData(){

            var qcats = [], cateOrders={}, index = 0;
            $(".preslect-random-from-bank li").map(function(){
                var pLi = $(this);
                var selectedData = pLi.data("selected-data");
                if(selectedData){
                    if( typeof selectedData == "string"){
                        selectedData = $.parseJSON(selectedData);
                    }
                    qcats.push({
                        orders: index++,
                        catid: pLi.data("catid"),
                        counts: selectedData.count,
                        score: selectedData.score ? selectedData.score : 1,
                        qtCounts: selectedData.qtCounts
                    })
                }
                cateOrders[pLi.data("catid")] = index++;
            })

            var postData = {
                eid: eid,
                "qcats": JSON.stringify(qcats)
            }
            postData[token] = 1;
            return postData;
        }
        function onSubmitRandomSelectQuestions(e) {
            e.preventDefault();
            var isadvance = 0;
            if($(this).hasClass("advance")){
                isadvance = 1;
            }

            var count = calculateTotal();

            if (count <= 0) {
                NW.messageBox(window.OELang.notice, window.OELang.examQuestions.specifyQuestionCount);
                return;
            }
            var originHTML = $(this).html();
            $(this).html(window.OELang.examQuestions.selectingQuestionsNow);
            var self = $(this);
            self.addClass("pending");
            self.attr("disabled", "disabled");
            var postData = getRandomSelectData()
            postData['isAdvance'] = isadvance
            $.ajax({
                url: window.YKS.addRandomSelectedQuestions,
                type:"post",
                data: postData
            }).done(function (resp) {
                resp = $.parseJSON(resp);
                self.removeClass("pending");
                self.removeAttr("disabled");
                if (resp.status == "ok") {
                    if(resp.questions.length < 1){
                        NW.messageBox(window.OELang.notice, window.OELang.examQuestions.selectedNoQuestions);
                        self.html(originHTML);
                        return;
                    }

                    var questiontypes = window.YKS.questiontypes,
                        qtidKeys={};

                    for (var i = 0; i < questiontypes.length; i++) {
                        var qtid = questiontypes[i].qtid+'';
                        qtidKeys[qtid] = questiontypes[i].label;
                    }

                    for (var i = 0; i < resp.questions.length; i++) {
                        var q = resp.questions[i],
                            label= qtidKeys[q.qtid];
                        addQuestionToTable( q.title, q.cate, q.qid, q.qtid, q.catid, label, q.points,q.points,isadvance );
                    }
                    box.close();

                    $(".qs-actions a").removeClass("disabled");
                } else {
                    NW.messageBox( window.OELang.notice, resp.error);
                }
                $(".qts-counts-tip").find('span.question-count').html(window.OELang.selectedncategory.format(0, 0));
                $(".qts-counts-tip").find('span.exam-total-score').html(window.OELang.totalNScore.format('<b>' + (0) + '</b>'));
                $(".questions-select-tip").removeClass("got");
                $("#at-sel-qs-cs-ls").empty();
                // self.html(window.OELang.examQuestions.preSelectQuestionFromCategories.format(0))
                self.html(window.OELang.examQuestions.select).css('display','none').addClass("disabled");
            });
        }
        // updateTotal(calculateTotal());
        //---随机选题end---

        //---排序和设置为附加题---
        function onFilterQuestionType(e) {
            e.preventDefault();
            questionType = $(this).attr("value");
            $(".question-bank-qtype-filter-name").html($(this).text())
            $(".question-bank-qtype i").removeClass("fa-check-circle").addClass("fa-circle-o");

            $(this).parent().find("i").removeClass("fa-circle-o").addClass("fa-check-circle");
            $(".question-bank-qtype").dropdown('toggle')

            loadQuestionList(null);

            return false;
        }

        function onQuestionAdditionAction( e ){
            e.preventDefault();
            var action = $(this).attr("action");
            var self = $(this);
            var qid = $(this).parents("tr").attr("qid");
            var postData = {
                qid: qid,
                eid: eid,
                addition: action=="addition"?1:0
            }
            postData[token] = 1;

            $.post( window.YKS.changeAddition, postData).done(function(data){
                data = $.parseJSON(data);
                if( data.status == "ok" ){
                    self.attr("action", action=="addition"?"nonaddition":"addition");
                    self.html(action=="addition"?window.OELang.examQuestions.cancelAddition:window.OELang.examQuestions.setAddition)
                    if(action == "addition" ){
                        self.parents("tr").find("td:eq(1)").find("a").after("<span class='label label-success'>"+window.OELang.examQuestions.additionQuestion+"</span>")
                    }else{
                        self.parents("tr").find("td:eq(1)").find("span").remove();
                    }
                }else{
                    Metronic.alert({
                        type: 'danger',
                        icon: 'error',
                        message: window.OELang.examQuestions.changeAdditionFailed,
                        container: $(".qts-pre-select-question"),
                        place: 'prepend'
                    });
                }
            }).fail(function(data){
                Metronic.alert({
                    type: 'danger',
                    icon: 'error',
                    message: window.OELang.examQuestions.changeAdditionFailed,
                    container: $(".qts-pre-select-question"),
                    place: 'prepend'
                });
            })
        }

        function updateSocre() {
            var s = 0, qs = 0;
            $("td.score").each(function(index, element){
                var score = Number($(element).data("score")),
                    qscore = Number($(element).data("qscore"));
                qs = score < 0 ? qscore : score;
                s = new Decimal(s).add(new Decimal(qs))
            });
            $("span.totalscore b").html(s.valueOf());
        }

        //修改试题分数
        $('#questionList').on('click', 'a[href="#chscore"]', function (e) {
            e = e || window.event;
            e.preventDefault();
            e.stopPropagation();
            var $a = $(e.target);
            var $tr = $a.parents('tr');
            var $td = $tr.find('td.score');
            if ($td.find('input').length > 0) return;
            var score = Number($td.data('score')), qscore = Number($td.data('qscore'));
            var $input = $('<input type="number" step="0.1">');
            $input.css('width', $td.width());
            $input.css('height', $td.height());
            $input.val(score > 0 ? score : qscore);
            $input.on('blur', function (e) {
                var s = Number($input.val());
                $td.data('score', s);
                $td.empty();
                $td.text(s > 0 ? s : qscore);
                updateSocre();
                $('a[href="#save"]').removeAttr('disabled').removeClass('disabled');
            });
            $td.empty();
            $td.append($input);
            //修复firefox浏览器获取焦点无效问题
            setTimeout(function (e) {
                $input.focus();
            }, 100);
        });

        function DeleteQuestions(qids, callback) {
            var randl = 0;
            var randr = 0;
            var dialog = NW.showDialog( '<div id="dq-sure-click" style="min-height:80px">{0}</div>'.format(window.OELang.sureToDeleteQuestions), [
                {
                    label: window.OELang.cancel,
                    id:'d-q-cancel',
                    onClick: function () {
                        dialog.close();
                        callback(false);
                    }
                },
                {
                    label: window.OELang.deleteBothQuestionBank,
                    id:'d-q-delete-bank',
                    onClick: function () {
                        if($("input[name='vResult']") && $("input[name='vResult']").length > 0){
                            if( Number( $("input[name='vResult']").val() ) != Number( randl + randr ) ){
                                $('.verify').find('i').remove();
                                $("input[name='vResult']").after('<i class="fa fa-times" aria-hidden="true" style="color:red"></i>')
                                return;
                            }
                            $('.verify').find('i').remove();
                            var btn = $(this);
                            dialog.disable(true);
                            NW.makeLoading(btn);
                            removeQuestionFromTable(qids, function(qids){
                                NW.makeUnLoading(btn);
                                dialog.disable(false);
                                dialog.close();
                                updateQuestionsCount();
                                callback(true);
                            }, true);
                        }else{
                            randl = parseInt(Math.random() * (50 - 11 + 1) + 11);
                            randr = parseInt(Math.random() * (10 - 1 + 1) + 1);
                            var verifyContent = '<p>'+ randl +'+'+ randr + '=?</p>';
                            var tmpl = '<div class="verify" style="margin-bottom: 10px;">'+
                                verifyContent+
                                '<span>'+window.OELang.verifyQuestionDeletedTips+'</span>'+
                                '<span><input type="text" name="vResult" id="vResult" style="width: 100px;"></span>'+
                                '</div>'
                            $('#dq-sure-click').html(tmpl);
                        }

                    }
                },
                {
                    label: window.OELang._delete,
                    id:'d-q-delete',
                    primary: true,
                    cls:['yks-blue'],
                    onClick: function () {
                        var btn = $(this);
                        dialog.disable(true);
                        NW.makeLoading(btn);
                        removeQuestionFromTable(qids, function(qids){
                            NW.makeUnLoading(btn);
                            dialog.disable(false);
                            dialog.close();
                            updateQuestionsCount();
                            callback(true);
                        }, false);
                    }
                },

            ], window.OELang.notice, {
                width: 450,
            });
            dialog.disable = function(disabled){
                $("#d-q-cancel, #d-q-delete, #d-q-delete-bank").prop("disabled", disabled?"disabled":"");
            }
        }

        function deleteQuestions(e){
            e.preventDefault();
            var btn = $(this);

            if ($("#questions-list .checked").length < 1) {
                NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }

            var vals = $.makeArray($("#questions-list .checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function (value) {
                return value > 0;
            });

            DeleteQuestions(vals, function(){});
        }



        function changeScore(e){
            e.preventDefault();

            var btn = $(this);

            if ($("#questions-list .checked").length < 1) {
                NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }

            var tmpl = '<div class="changescore">' +
                '<div class="form-group">' +
                '   <label>{0}</label>' +
                '   <input class="form-control" type="number" value="1"> ' +
                '</div>' +
                '</div>';
            tmpl = tmpl.format(window.OELang.examQuestions.changeScore);

            var dialog = NW.showDialog(tmpl, [
                {
                    label: window.OELang.cancel,
                    onClick: function () {
                        dialog.close();
                    }
                },
                {
                    label: window.OELang.examQuestions.changeScore,
                    cls:['yks-blue'],
                    onClick: function () {
                        if($(".changescore input").val()==''){
                            $(".changescore input").focus();
                            return;
                        }

                        var score =  $(".changescore input").val();
                        $("#questions-list .checked").parents("tr").find("td.score").data("score", score).html(score);
                        updateSocre();
                        dialog.close();
                    }
                },
            ], window.OELang.examQuestions.changeScore)
        }

        function onEditQuestion(e){
            e.preventDefault();

            var tr = $(this).parents("tr");
            var qid = tr.attr("qid");

            EditQuestion(qid, function(qid, qtitle, qcate, points){
                var tr = $("#questionList tr[qid={0}]".format(qid));
                if(qtitle) tr.find("td:eq(2)").find("a").html(qtitle);
                if(qcate)  tr.find("td:eq(3)").html(qcate);

                var td = tr.find("td:eq(5)");
                td.data('qscore', points);
                if(Number(td.data('score')) <0){
                    if(points)  td.html(points);
                    updateSocre();
                }

            });
        }

        //---分类选择窗口---
        var onChooseCategories1 = function () {
            var isAdvance = $("input[name='isAdvance']").val();
            var treeWindow = $('#categories-tree-3');
            var confirmBtn = treeWindow.find('button[name="confirm"]');
            var treeEl = treeWindow.find('div[name="categories-tree"]');
            var searchEl = treeWindow.find('input[name="categories-search-input"]');
            var tagsInputEl = treeWindow.find('input[name="tagsinput"]');
            var jbox, treeInst, selCats, catType = 2;
            var treeOptions = {
                core: {
                    multiple: true,
                    check_callback: false,
                    data: {
                        type: 'post',
                        dataType: 'json',
                        url: window.YKS.loadCategoriesContentCount,
                        data: function (node) {
                            var data = {
                                type: catType,
                                advance:isAdvance
                            };
                            data[token] = 1;
                            if (node.id === '#') {
                                data.cats = [{id: -1, text: window.OELang.allQuestions, li_attr: {catid: -1, title: window.OELang.allQuestions}},
                                    {id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}}];
                            } else {
                                data.catid = node.id;
                            }
                            return data;
                        }
                    }
                },
                plugins: ['checkbox']
            };
            return function (e) {
                var e = e || window.event;
                e.preventDefault();
                jbox = jbox || new jBox('Modal', {
                    title: window.OELang.pleaseSelectQuestionCategory,
                    content: treeWindow,
                    closeOnEsc: false,
                    closeButton: 'title',
                    width: 620,
                    zIndex: 99999,
                    onCreated: function () {
                        treeInst = treeInst || createCategoryTree(treeEl, searchEl, null, treeOptions, catType, token);

                        tagsInputEl.tagsinput({
                            itemValue: function (item) {
                                return item.li_attr.catid;
                            },
                            itemText: function (item) {
                                return item.li_attr.title;
                            },
                            trimValue: true,
                            allowDuplicates: true
                        });
                        treeWindow.find('.bootstrap-tagsinput').off('click', treeWindow.find('.bootstrap-tagsinput'));
                        treeWindow.find('.bootstrap-tagsinput').children('input').attr('readonly', 'readonly');
                        tagsInputEl.on('itemRemoved', function(event) {
                            if (event.item != null) {
                                treeInst.deselect_node(treeInst.get_node(event.item.id));
                            }
                        });
                        treeEl.on('changed.jstree', function (e, data) {
                            var selIds = treeInst.get_selected().map(function(id){return Number(id)});
                            if (selIds.length > 1) {
                                var node = data.node;
                                if (node.id == -1) {
                                    if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                        treeInst.deselect_all();
                                        treeInst.select_node(-1);
                                    } else {
                                        treeInst.deselect_node(-1);
                                    }
                                } else {
                                    if ($.inArray(-1, selIds) >= 0) {
                                        if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                            treeInst.deselect_node(-1);
                                        } else {
                                            treeInst.deselect_node(node.id);
                                        }
                                    }
                                }
                            }
                            tagsInputEl.tagsinput('removeAll');
                            selIds = treeInst.get_selected(true);
                            if (selIds.length > 0) {
                                for (var i = 0; i < selIds.length; i++) {
                                    var obj = selIds[i];
                                    tagsInputEl.tagsinput('add', obj);
                                }
                            }
                        });

                        treeWindow.on('click', 'button[name="confirm"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            selCats = treeInst.get_selected(true);
                            var selLiCats = $("#at-sel-qs-cs-ls li");
                            var arr1 = [], arr2 = [];
                            for (var i = 0; i < selCats.length; i++) {
                                var obj = selCats[i];
                                arr1[i] = Number(obj.id);
                            }
                            for (var i = 0; i < selLiCats.length; i++) {
                                var obj = $(selLiCats[i]);
                                arr2[i] = Number(obj.data('catid'));
                            }
                            for (var i = 0; i < selLiCats.length; i++) {
                                var obj = $(selLiCats[i]);
                                if ($.inArray(obj.data('catid'), arr1) == -1) {
                                    obj.remove();
                                }
                            }
                            for (var i = 0; i < selCats.length; i++) {
                                var obj = selCats[i];
                                if (i > 0 && (obj.id == -1 || obj.id == -1)) {
                                    continue;
                                } else if ($.inArray(Number(obj.id), arr2) == -1) {
                                    addCategoryToSeledCategoriesNew(obj);
                                }
                            }

                            jbox.close();
                        });
                        treeWindow.on('click', 'button[name="cancel"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            jbox.close();
                        });
                    },
                    onOpen: function () {
                        treeInst.clear_search();
                        searchEl.val('');

                        treeInst.deselect_all();
                        if (treeInst.is_loaded('#')) {
                            tagsInputEl.tagsinput('removeAll');
                            treeInst.select_node(selCats);
                        }
                    }
                });
                jbox.toggle();
            };
        }();
        var onChooseCategories2 = function () {
            var treeWindow = $('#categories-tree-1');
            var treeEl = treeWindow.find('div[name="categories-tree"]');
            var searchEl = treeWindow.find('input[name="categories-search-input"]');
            var catType = 2;
            var treeOptions = {
                core: {
                    check_callback: false,
                    data: {
                        type: 'post',
                        dataType: 'json',
                        url: window.YKS.loadCategories,
                        data: function (node) {
                            var data = {type: catType};
                            data[token] = 1;
                            if (node.id === '#') {
                                data.cats = [{id: -1, text: window.OELang.allQuestions, li_attr: {catid: -1, title: window.OELang.allQuestions}},
                                    {id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}}];
                            } else {
                                data.catid = node.id;
                            }
                            return data;
                        }
                    }
                },
                plugins: []
            };
            var jbox, treeInst, selCat = -1;
            return function (e) {
                var e = e || window.event;
                e.preventDefault();
                jbox = jbox || new jBox('Modal', {
                    title: window.OELang.pleaseSelectQuestionCategory,
                    content: treeWindow,
                    closeOnEsc: false,
                    closeOnClick: false,
                    closeButton: 'title',
                    width: 620,
                    zIndex: 99999,
                    onCreated: function () {
                        treeInst = treeInst || createCategoryTree(treeEl, searchEl, null, treeOptions, catType, token);
                        treeWindow.on('click', 'button[name="confirm"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            if (treeInst.is_loaded('#')) {
                                selCat = treeInst.get_top_selected(true)[0];
                                questionCate = selCat.id;
                                $(".question-bank-qcate-filter-name").text(selCat.text);
                                loadQuestionList(null);
                            }
                            jbox.close();
                        });
                        treeWindow.on('click', 'button[name="cancel"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            jbox.close();
                        });
                    },
                    onOpen: function () {
                        treeInst.clear_search();
                        searchEl.val('');
                        treeInst.deselect_all();
                        if (treeInst.is_loaded('#')) {
                            treeInst.select_node(selCat);
                        }
                    }
                });
                jbox.toggle();
            };
        }();
        $('#choose-category-1').on('click', onChooseCategories1);
        $('#choose-category-2').on('click', onChooseCategories2);
        //---分类选择窗口end---

        function onClickSelectedCategory(e){
            var self = $(this),
                status = self.data('status') ? self.data('status') : 'closed',
                pLi = self.parents("li");
            var catid = pLi.data("catid");

            if(status === "closed"){
                self.data('status', 'open');
                var qcByC = pLi.data('qcbyc');
                var isAdvance = $(".question-list").data("isadvance");
                var displayQcByC = function () {
                    var template = $("#qtc-template").text().trim(),
                        qtKeyValue = {};
                    var isAdvance = $(".question-list").data("isadvance");
                    template = '<div class="question-type-item">' + template +
                        '<span class="each-question" style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;</span>' +
                        '<span class="qts-score"><input type="number" class="form-control" style="display:inline-block; width:80px;" data-qtid="{5}" value="1" min="1" /></span>' +
                        '<span class="question-score">&ensp;' + window.OELang.point + '</span>' +
                        '</div>';
                    window.YKS.questiontypes.map(function (qt) {
                        qtKeyValue[qt.qtid] = qt;
                    });
                    var content = ["<div style='padding-left: 28px;' class='qt-counts-list' id='catid_" + catid + "'>", qcByC.map(function (qc) {
                        var value = qc.hasOwnProperty('value') ? qc.value : 0;
                        return template.format(qtKeyValue[qc.qtid].label, qc.counts, value, qc.counts, qc.qtid, qc.qtid);
                    }).join(''), "</div>"].join('');
                    $(content).hide().appendTo(pLi).slideDown();
                    onShowQuestionType(pLi);
                };

                if(!qcByC){
                    self.find('i.fa-chevron-circle-down').removeClass("fa-chevron-circle-down").addClass("fa-spin fa-spinner");
                    $.get(window.YKS.getQuestionsCountByCategory, {catid: catid}).done(function(data){
                        data = $.parseJSON(data);
                        if(data.status === "ok"){
                            qcByC = data.questionsCount;
                            if(isAdvance == 1){
                                var tmp = [];
                                tmp[0] = qcByC[0];
                                qcByC = tmp;
                            }
                            pLi.data('qcbyc', JSON.stringify(qcByC));
                            displayQcByC(qcByC);
                        }else{
                            alert(data.error);
                        }
                        self.find('i.fa-spinner').addClass("fa-chevron-circle-up").removeClass("fa-spin fa-spinner");
                    }).fail(function (e) {
                        self.find('i.fa-spinner').addClass("fa-chevron-circle-up").removeClass("fa-spin fa-spinner");
                        alert(window.OELang.noNetworkTip)
                    });
                }else{
                    qcByC = $.parseJSON(qcByC);
                    if(isAdvance == 1){
                        var tmp = [];
                        tmp[0] = qcByC[0];
                        qcByC = tmp;
                    }
                    self.find('i.fa-chevron-circle-down').addClass("fa-chevron-circle-up").removeClass("fa-chevron-circle-down");
                    displayQcByC();
                }
            }else{
                var div = $("#at-sel-qs-cs-ls").find("div#catid_"+catid);
                div.slideUp(function () {
                    div.remove();
                });
                self.find('i.fa-chevron-circle-up').removeClass("fa-chevron-circle-up").addClass("fa-chevron-circle-down");
                $(this).data('status', 'closed');
                onHideQuestionType(pLi);
            }
        }
        function onShowQuestionType(pLi){
            var span1 = pLi.find("span.qts-count.first");
            span1.find("input").hide();
            var span2 = pLi.find('span.qts-score.first');
            span2.hide();
            var countsText = span1.find("strong");
            if(countsText.length<=0){
                countsText = $("<strong>0</strong>");
                span1.append(countsText);
            }

            var data = pLi.data("selected-data");
            if(data){
                if(typeof data == "string"){
                    data = $.parseJSON(data);
                }

                countsText.html(data.count);
                var qtCounts = data.qtCounts;
                if(qtCounts){
                    for(var i=0; i<qtCounts.length; i++){
                        var qt = qtCounts[i];
                        pLi.find("span.qts-count input[data-qtid='"+qt.qtid+"']").val(qt.count);
                        pLi.find('span.qts-score input[data-qtid="' + qt.qtid + '"]').val(qt.score ? qt.score : 1);
                    }
                }
            }
        }
        function onHideQuestionType(pLi){
            var span1 = pLi.find("span.qts-count.first");
            var span2 = pLi.find('span.qts-score.first');

            var data = pLi.data("selected-data");
            if(data) {
                if(typeof data == "string"){
                    data = $.parseJSON(data);
                }
                if(data.hasOwnProperty("count") && data.count > 0 && data.qtCounts.length>0){
                    return;
                }
            }

            span1.find("input").show().val(span1.find("strong").text()).css('display', 'inline-block');
            span2.show();
            span1.find("strong").remove();
        }

        function addCategoryToSeledCategories(obj) {
            var ul = $('#at-sel-qs-cs-ls');
            var li = $('<li data-catid="' + obj.id + '"></li>');
            var cnsp = $('<span class="qts-cate-name">' + obj.li_attr.title + '&ensp;</span>');
            var selsp = $('<span>' + window.OELang.select+ '&ensp;</span>');
            var ipsp = $('<span class="qts-count"></span>');
            var qssp = $('<span>&ensp;' + window.OELang.togetherQuestions + '</span>');
            var qsi = $('<i>(' + window.OELang.altogether + '&ensp;' + obj.li_attr.content_count + '&ensp;' + window.OELang.togetherQuestions + ')</i>');
            var input = $('<input class="form-control" style="display: inline-block; width: 80px;" type="number" value="0" min="0" max="' + obj.li_attr.content_count + '">');
            cnsp.append(qsi);
            ipsp.append(input);
            li.append(cnsp).append(selsp).append(ipsp).append(qssp);
            ul.append(li);
        }
        //-----------------------by lway start-----------------------
        function addCategoryToSeledCategoriesNew(item) {
            var temp = $('#qtc-template').text().trim();
            temp = ['<li data-catid = "' + item.li_attr.catid + '">', temp.format(item.li_attr.title, item.li_attr.content_count, 0, item.li_attr.content_count), '<span class="qts-score first" style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;<input type="number" class="form-control" style="display:inline-block; width:80px;" value="1" min="1">&ensp;' + window.OELang.point + '</span>', '<span class="qt-lists"></span>', '<span class="category-total-score" style="padding-left: 28px;">' + window.OELang.totalNScore.format('<b>0</b>') + '</span>', '</li>'].join('');
            content = $(temp).hide().appendTo($("#at-sel-qs-cs-ls")).fadeIn();

            content.find("span.qts-cate-name").append($('<i class="fa fa-chevron-circle-down" title="'+window.OELang.viewqtcountofcate+'"></i>'));
            content.prepend($('<span><i class="fa fa-bars"></i><i class="fa fa-trash" title="'+window.OELang._delete+'"></i></span>'));
            content.find('span.qts-count').addClass('first');
            content.find('span.qts-cate-name').addClass('main');
            updateTotal(calculateTotal());
            updateScore();
            if($('#at-sel-qs-cs-ls li').length == 1){
                onClickSelectedCategory.call($('#at-sel-qs-cs-ls li').find('span.qts-cate-name'));
            }
            if($("#at-sel-qs-cs-ls li").length>0) $(".questions-select-tip").addClass("got");
        }

        function addCategoryToSeledCategoriesNewSample(item) {
            var temp = $('#qtc-template').text().trim();
            temp = ['<li data-catid = "' + item.li_attr.catid + '">', temp.format(item.li_attr.title, item.li_attr.content_count, 0, item.li_attr.content_count), '<span class="qts-score first" style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;<input type="number" class="form-control" style="display:inline-block; width:80px;" value="1" min="1">&ensp;' + window.OELang.point + '</span>', '<span class="qt-lists"></span>', '<span class="category-total-score" style="padding-left: 28px;">' + window.OELang.totalNScore.format('<b>0</b>') + '</span>', '</li>'].join('');
            content = $(temp).hide().appendTo($(".selected-categories ul")).fadeIn();
            content.find("span.qts-cate-name").append($('<i class="fa fa-chevron-circle-down" title="'+window.OELang.viewqtcountofcate+'"></i>'));
            content.prepend($('<span><i class="fa fa-bars" title="'+window.OELang.dragToSortTip+'"></i><i class="fa fa-trash" title="'+window.OELang._delete+'"></i></span>'));
            content.find('span.qts-count').addClass('first');
            content.find('span.qts-cate-name').addClass('main');
            updateTotal(calculateTotal());
            updateScore();
            if($('.selected-categories li').length == 1){
                onClickSelectedCategory.call($('.selected-categories li').find('span.qts-cate-name'));
            }
            if($(".selected-categories li").length>0) $(".selected-categories").addClass("got");
        }



        $('#at-sel-qs-cs-ls').on('click', 'span.qts-cate-name.main', onClickSelectedCategory)
        //---------------------------by lway end-----------------------




        //-----------------------------------------------------------------------------
        $("#questionList").on("click", "a[action='remove']", onRemove);
        $("#questionList").on("click", "a[data-action='edit-question']", onEditQuestion);
        //process the questions ordrs.
        $(".order-questions").on("click", "a", onSortQuestions);
        $(".paginations").on("click", "a", onPaginationItemClick);
        $(".question-list").on("click", ".question", onQuestionItemClick);
        $("#select_random_submit").click(onSubmitRandomSelectQuestions);
        $(".question-bank-qtype").on("click", "a", onFilterQuestionType);
        // $(".question-bank-qcate").on("click", "a", onFilterQuestionCate);旧的手动选择试题分类选择点击侦听
        $("#questions-list").on("click", "a[href='#addition']", onQuestionAdditionAction);

        $(".qts-pre-select-question").on("click", "a[href='#btnAddQuestion']", onAddQuestionsToExam);
        $(".qts-pre-select-question").on("click", "a[href='#deleteQuestions']", deleteQuestions);
        $(".qts-pre-select-question").on("click", "a[href='#changescore']", changeScore);

        // categoriesWindow2(2, token);
        //Used to accept the child frame message to reload questions list after
        //close the add questions pop and added new question to the list.
        window.addQuestionToTable = addQuestionToTable;
        window.closeAddQuestionDialog = function () {
            closeBox();
            $("#importQuestionFrame").attr('src', $("#importQuestionFrame").attr("src"));
        };
        NW.buildCheck($("table#questionList"));

        $("#searchtxt").keydown(function (e) {
            if (e.keyCode == 13) {
                loadQuestionList(null);
            }
        });
    }


    /**
     * make add questions to exam available
     * @param eid the id of exam
     *
     * <span class="qts-cate-name">{0} <i>({1} <?php echo Jtext::_('COM_EXAMS_RANDOM_SELECT_QUESTION_QUESTIONS') ?>)</i></span>
     *<span><?php echo JText::_("COM_EXAMS_RANDOM_SELECT") ?></span>
     *<span class="qts-count"><input value="{2}" type="number" min="0" max="{3}" data-qtid="{4}" class="form-control" style="display:inline; width: 80px;"/></span>
     *<span><?php echo JText::_("COM_EXAMS_RANDOM_SELECT_QUESTION_QUESTIONS") ?></span>
     */
    function setupExamQuestionsPage(eid, token){
        setupPreselectFromQuestionBank(eid, token);

        function addCategoryToSeledCategories(item) {
            var temp = $('#qtc-template').text().trim();
            temp = ['<li data-catid = "' + item.li_attr.catid + '">', temp.format(item.li_attr.title, item.li_attr.content_count, 0, item.li_attr.content_count), '<span class="qts-score first" style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;<input type="number" class="form-control" style="display:inline-block; width:80px;" value="1" min="1">&ensp;' + window.OELang.point + '</span>', '<span class="qt-lists"></span>', '<span class="category-total-score" style="padding-left: 28px;">' + window.OELang.totalNScore.format('<b>0</b>') + '</span>', '</li>'].join('');
            content = $(temp).hide().appendTo($(".selected-categories ul")).fadeIn();
            content.find("span.qts-cate-name").append($('<i class="fa fa-chevron-circle-down" title="'+window.OELang.viewqtcountofcate+'"></i>'));
            content.prepend($('<span><i class="fa fa-bars" title="'+window.OELang.dragToSortTip+'"></i><i class="fa fa-trash" title="'+window.OELang._delete+'"></i></span>'));
            content.find('span.qts-count').addClass('first');
            content.find('span.qts-cate-name').addClass('main');
            updateTotal(calculateTotal());
            updateScore();
            if($('.selected-categories li').length == 1){
                onClickSelectedCategory.call($('.selected-categories li').find('span.qts-cate-name'));
            }
            if($(".selected-categories li").length>0) $(".selected-categories").addClass("got");
        }

        //---分类选择窗口---
        var onChooseCategories3 = function () {
            var treeWindow = $('#categories-tree-4');
            var confirmBtn = treeWindow.find('button[name="confirm"]');
            var treeEl = treeWindow.find('div[name="categories-tree"]');
            var searchEl = treeWindow.find('input[name="categories-search-input"]');
            var tagsInputEl = treeWindow.find('input[name="tagsinput"]');
            var jbox, treeInst, selCats, catType = 2;
            var treeOptions = {
                core: {
                    multiple: true,
                    check_callback: false,
                    data: {
                        type: 'post',
                        dataType: 'json',
                        url: window.YKS.loadCategoriesContentCount,
                        data: function (node) {
                            var data = {type: catType};
                            data[token] = 1;
                            if (node.id === '#') {
                                data.cats = [{id: -1, text: window.OELang.allQuestions, li_attr: {catid: -1, title: window.OELang.allQuestions}},
                                    {id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}}];
                            } else {
                                data.catid = node.id;
                            }
                            return data;
                        }
                    }
                },
                plugins: ['checkbox']
            };
            return function (e) {
                var e = e || window.event;
                e.preventDefault();
                jbox = jbox || new jBox('Modal', {
                    title: window.OELang.pleaseSelectQuestionCategory,
                    content: treeWindow,
                    closeOnEsc: false,
                    closeButton: 'title',
                    width: 620,
                    zIndex: 99999,
                    onCreated: function () {
                        treeInst = treeInst || createCategoryTree(treeEl, searchEl, null, treeOptions, catType, token);
                        treeEl.one('loaded.jstree', function () {
                            var selIds = treeInst.get_selected(true).length > 0 ? treeInst.get_selected(true) : $.map($.makeArray($('.selected-categories').find('ul>li')), function (obj) {return $(obj).data('catid');});
                            if (selIds && selIds.length > 0) {
                                for (var i = 0; i < selIds.length; i++) {
                                    var id = selIds[i];
                                    if (treeInst.get_node(id)) {
                                        treeInst.select_node(id);
                                    } else {
                                        treeInst.deselect_all();
                                        treeInst.load_all(null, function () {
                                            treeInst.select_node(selIds);
                                        });
                                        break;
                                    }
                                }
                            }
                        });

                        tagsInputEl.tagsinput({
                            itemValue: function (item) {
                                return item.li_attr.catid;
                            },
                            itemText: function (item) {
                                return item.li_attr.title;
                            },
                            trimValue: true,
                            allowDuplicates: true
                        });
                        treeWindow.find('.bootstrap-tagsinput').off('click', treeWindow.find('.bootstrap-tagsinput'));
                        treeWindow.find('.bootstrap-tagsinput').children('input').attr('readonly', 'readonly');
                        tagsInputEl.on('itemRemoved', function (event) {
                            if (event.item != null) {
                                treeInst.deselect_node(treeInst.get_node(event.item.id));
                            }
                        });
                        treeEl.on('changed.jstree', function (e, data) {
                            var node = data.node;
                            if (!node) return;
                            var selIds = treeInst.get_selected().map(function(id){return Number(id)});
                            if (selIds.length > 1) {
                                if (node.id == -1) {
                                    if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                        treeInst.deselect_all();
                                        treeInst.select_node(-1);
                                    } else {
                                        treeInst.deselect_node(-1);
                                    }
                                } else {
                                    if ($.inArray(-1, selIds) >= 0) {
                                        if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                            treeInst.deselect_node(-1);
                                        } else {
                                            treeInst.deselect_node(node.id);
                                        }
                                    }
                                }
                            }
                            tagsInputEl.tagsinput('removeAll');
                            selIds = treeInst.get_selected(true);
                            if (selIds.length > 0) {
                                for (var i = 0; i < selIds.length; i++) {
                                    var obj = selIds[i];
                                    tagsInputEl.tagsinput('add', obj);
                                }
                            }
                        });

                        treeWindow.on('click', 'button[name="confirm"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            selCats = treeInst.get_selected(true);
                            var selLiCats = $('.selected-categories li');
                            var arr1 = [], arr2 = [];
                            for (var i = 0; i < selCats.length; i++) {
                                var obj = selCats[i];
                                arr1[i] = Number(obj.id);
                            }
                            for (var i = 0; i < selLiCats.length; i++) {
                                var obj = $(selLiCats[i]);
                                arr2[i] = Number(obj.data('catid'));
                            }
                            for (var i = 0; i < selCats.length; i++) {
                                var obj = selCats[i];
                                if (i > 0 && (obj.id == -1 || obj.id == -1)) {
                                    continue;
                                } else if ($.inArray(Number(obj.id), arr2) == -1) {
                                    addCategoryToSeledCategories(obj);
                                }
                            }
                            for (var i = 0; i < selLiCats.length; i++) {
                                var obj = $(selLiCats[i]);
                                if ($.inArray(obj.data('catid'), arr1) == -1) {
                                    obj.remove();
                                }
                            }
                            jbox.close();
                        });
                        treeWindow.on('click', 'button[name="cancel"]', function (e) {
                                var e = e || window.event;
                                e.preventDefault();
                                jbox.close();
                            });
                    },
                    onOpen: function () {
                        treeInst.clear_search();
                        searchEl.val('');

                        treeInst.deselect_all();
                        if (treeInst.is_loaded('#')) {
                            tagsInputEl.tagsinput('removeAll');
                            treeInst.select_node(selCats);
                        }
                    }
                });
                jbox.toggle();
            };
        }();

        $('#choose-category-3').on('click', onChooseCategories3);
        //---分类选择窗口end---

        function onShowQuestionType(pLi){
            var span1 = pLi.find("span.qts-count.first");
            span1.find("input").hide();
            var span2 = pLi.find('span.qts-score.first');
            span2.hide();
            var countsText = span1.find("strong");
            if(countsText.length<=0){
                countsText = $("<strong>0</strong>");
                span1.append(countsText);
            }

            var data = pLi.data("selected-data");
            if(data){
                if(typeof data == "string"){
                    data = $.parseJSON(data);
                }

                countsText.html(data.count);
                var qtCounts = data.qtCounts;
                if(qtCounts){
                    for(var i=0; i<qtCounts.length; i++){
                        var qt = qtCounts[i];
                        pLi.find("span.qts-count input[data-qtid='"+qt.qtid+"']").val(qt.count);
                        pLi.find('span.qts-score input[data-qtid="' + qt.qtid + '"]').val(qt.score ? qt.score : 1);
                    }
                }
            }
        }

        function onHideQuestionType(pLi){
            var span1 = pLi.find("span.qts-count.first");
            var span2 = pLi.find('span.qts-score.first');

            var data = pLi.data("selected-data");
            if(data) {
                if(typeof data == "string"){
                    data = $.parseJSON(data);
                }
                if(data.hasOwnProperty("count") && data.count > 0 && data.qtCounts.length>0){
                    return;
                }
            }

            span1.find("input").show().val(span1.find("strong").text()).css('display', 'inline-block');
            span2.show();
            span1.find("strong").remove();
        }

        function updateTotal(total){
            var categories = $(".selected-categories li").length;
            $(".qts-counts-tip").find('span.question-count').html(window.OELang.selectedncategory.format(categories, total));

            if(total>0){
                $(".qs-actions a").removeClass("disabled");
            }else{
                $(".qs-actions a").addClass("disabled");
            }
        }

        function calculateTotal(){
            var count = $(".selected-categories li").map(function () {
                var count = $(this).data("counts");
                return count ? Number(count) : 0;
            }).get().reduce(function (acc, v) {
                return Number(acc) + Number(v);
            });
            return count.isInteger() ? count : count.toFixed(2);
        }

        function updateScore() {
            var totalScore = 0;
            var categories = $('.selected-categories li');
            for (var i = 0; i < categories.length; i++) {
                var obj = $(categories[i]);
                // var str = obj.data('selected-data');
                if (obj.data('selected-data') == undefined) {
                    continue;
                }
                var seledData = typeof obj.data('selected-data') == 'string' ? JSON.parse(obj.data('selected-data')) : obj.data('selected-data');
                var categoryScore = 0;
                if (seledData.qtCounts.length > 0) {
                    for (var j = 0; j < seledData.qtCounts.length; j++) {
                        var obj1 = seledData.qtCounts[j];
                        categoryScore += Number(obj1.count) * Number(obj1.score);
                    }
                } else {
                    categoryScore = Number(seledData.count) * Number(seledData.score);
                }
                obj.find('span.category-total-score').html(window.OELang.totalNScore.format('<b>' + (categoryScore.isInteger() ? categoryScore : parseFloat(categoryScore)) + '</b>'));
                totalScore += categoryScore;
            }
            $(".qts-counts-tip").find('span.exam-total-score').html(window.OELang.totalNScore.format('<b>' + (totalScore.isInteger() ? totalScore : parseFloat(totalScore)) + '</b>'));
        }

        function showQuestionTypeCounts(pLi, qtCounts) {
            if(qtCounts&&qtCounts.length>0){
                var qtLists = pLi.find("span.qt-lists");
                var qtKeyValue = {};
                window.YKS.questiontypes.map(function(qt){
                    qtKeyValue[qt.qtid] = qt;
                })


                if(qtLists.length==0){
                    qtLists = $("<span class='qt-lists'></span>").insertBefore(pLi.children("span:last"));
                }
                var content = qtCounts.map(function(v){
                    var qtid = v.qtid,
                        counts = v.count;
                    if(counts<=0) return "";
                    var colors = [
                        'badge-default',
                        'badge-primary',
                        'badge-info',
                        'badge-success',
                        'badge-danger',
                        'badge-warning'
                    ]
                    return "<b class='badge {2}'>{0} {1}</b>".format(qtKeyValue[qtid].label, counts, colors[qtid%colors.length]);
                }).join(" ");
                qtLists.html(content);
            }else{
                pLi.find("span.qt-lists").remove();
            }
        }

        function saveCategoryItemData(catid, itemTotal, itemScore, qtCounts) {
            var pLi = $(".selected-categories").find("li[data-catid='"+catid+"']");
            var data = {
                count: itemTotal,
                score: itemScore,
                qtCounts: qtCounts
            }
            pLi.data("selected-data", JSON.stringify(data));
            pLi.data("counts", itemTotal);
            pLi.data('score', itemScore);
            updateTotal(calculateTotal());
            updateScore();
            showQuestionTypeCounts(pLi, qtCounts);
        }

        function updateCategroyItemFromQuestionType(qtCountsList){
            var qtCountsList = $(qtCountsList);
            var qtCounts = [], counts = 0;
            qtCountsList.find("div.question-type-item").map(function () {
                var item = $(this),
                    ci = item.find('span.qts-count input'),
                    si = item.find('span.qts-score input'),
                    qtid = ci.data('qtid'),
                    qtc = Number(ci.val()),
                    qts = Number(si.val());
                counts += qtc;
                qtCounts.push({
                    qtid: qtid,
                    count: qtc,
                    score: qts
                })
            });

            var catid = qtCountsList.attr("id").replace("catid_", "");
            saveCategoryItemData(catid, counts, 1, qtCounts);
        }

        function onClickSelectedCategory(e){
            var self = $(this),
                status = self.data('status') ? self.data('status') : 'closed',
                pLi = self.parents("li");
            var catid = pLi.data("catid");

            if(status === "closed"){
                self.data('status', 'open');
                var qcByC = pLi.data('qcbyc');
                var displayQcByC = function () {
                    var template = $("#qtc-template").text().trim(),
                        qtKeyValue = {};
                    template = '<div class="question-type-item">' + template +
                        '<span style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;</span>' +
                        '<span class="qts-score"><input type="number" class="form-control" style="display:inline-block; width:80px;" data-qtid="{5}" value="1" min="1" /></span>' +
                        '<span>&ensp;' + window.OELang.point + '</span>' +
                        '</div>';
                    window.YKS.questiontypes.map(function (qt) {
                        qtKeyValue[qt.qtid] = qt;
                    });
                    var content = ["<div style='padding-left: 28px;' class='qt-counts-list' id='catid_" + catid + "'>", qcByC.map(function (qc) {
                        var value = qc.hasOwnProperty('value') ? qc.value : 0;
                        return template.format(qtKeyValue[qc.qtid].label, qc.counts, value, qc.counts, qc.qtid, qc.qtid);
                    }).join(''), "</div>"].join('');
                    $(content).hide().appendTo(pLi).slideDown();
                    onShowQuestionType(pLi);
                };

                if(!qcByC){
                    self.find('i.fa-chevron-circle-down').removeClass("fa-chevron-circle-down").addClass("fa-spin fa-spinner");
                    $.get(window.YKS.getQuestionsCountByCategory, {catid: catid}).done(function(data){
                        data = $.parseJSON(data);
                        if(data.status === "ok"){
                            qcByC = data.questionsCount;
                            pLi.data('qcbyc', JSON.stringify(qcByC));
                            displayQcByC(qcByC);
                        }else{
                            alert(data.error);
                        }
                        self.find('i.fa-spinner').addClass("fa-chevron-circle-up").removeClass("fa-spin fa-spinner");
                    }).fail(function (e) {
                        self.find('i.fa-spinner').addClass("fa-chevron-circle-up").removeClass("fa-spin fa-spinner");
                        alert(window.OELang.noNetworkTip)
                    });
                }else{
                    qcByC = $.parseJSON(qcByC);
                    self.find('i.fa-chevron-circle-down').addClass("fa-chevron-circle-up").removeClass("fa-chevron-circle-down");
                    displayQcByC();
                }
            }else{
                var div = $(".selected-categories").find("div#catid_"+catid);
                div.slideUp(function () {
                    div.remove();
                });
                self.find('i.fa-chevron-circle-up').removeClass("fa-chevron-circle-up").addClass("fa-chevron-circle-down");
                $(this).data('status', 'closed');
                onHideQuestionType(pLi);
            }
        }

        function checkQuestionsDuplicate() {
            var data = {
                eid: eid
            };
            data[token] = 1;
            $.post({
                url: window.YKS.checkDuplicateQuestionsInExam,
                data: data,
                dataType: 'json',
                success: function (data, status, xhr) {
                    if (data.status == 'ok') {
                        var content = $($.trim($('#jBoxContentHtml').html())).find('div[name="jbct1"]');
                        var jbox = new jBox('Modal', {
                            title: window.OELang.guideline,
                            content: content,
                            width: 380,
                            height: 130,
                            closeButton: 'title',
                            onCreated: function () {
                                content.on('click', 'button', function (e) {
                                    jbox.close();
                                });
                            },
                            onCloseComplete: function () {
                                jbox.destroy();
                                NW.makeUnLoading($('#btn-check-duplicate'));
                            }
                        });

                        var duplicates = data.duplicates;
                        if (duplicates.length > 0) {
                            markRepeatQuestions(duplicates);
                            content.find('p').text(window.OELang.existQuestionsDuplicateTip.format(duplicates.length));
                        }

                        jbox.open();
                    } else {
                        alert(data.error);
                    }
                },
                error: function (xhr, status, error) {
                    alert('ajax error');
                },
                complete: function (xhr, status) {
                    // alert('complete');
                }
            });
        }

        function markRepeatQuestions(duplicates) {
            var repeat = [];
            var tbody = $('#questions-list');
            tbody.find('tr').css('background-color', '');

            for (var i = 0; i < duplicates.length; i++) {
                var d = duplicates[i];
                if (!repeat[d.title]) {
                    repeat[d.title] = [];
                }
                repeat[d.title].push(d);
            }

            for (var j in repeat) {
                var color = window.randomColor();
                var r = repeat[j];
                if (r.length > 1) {
                    //var $pel;
                    for (var k = 0; k < r.length; k++) {
                        if (k === 0) continue;
                        var q = r[k];
                        var $el = tbody.find('tr[qid="' + q.qid + '"]');
                        $el.addClass('repeat-question');
                        $el.css('background-color', color);
                    }
                }
            }
        }

        //2018.03.09 增加拖动功能
        var selectedCategoryList = document.getElementById('selected-category-list');
        if(selectedCategoryList){
            Sortable.create( selectedCategoryList, {
                handle: 'i.fa-bars',
                animation: 150
            });
        }
        $(".selected-categories").on("click", "i.fa-trash", function (e) {
            var pLi = $(this).parents("li"),
                catid = pLi.data("catid");
            $(".available-categories").find("li[data-catid='"+catid+"']").removeClass("selected");
            pLi.fadeOut(800, function() {
                pLi.remove();
                if($(".selected-categories li").length<=0){
                    $(".selected-categories").removeClass("got");
                }
                updateScore();
            });
        }).on('click', 'span.qts-cate-name.main', onClickSelectedCategory)


        $(".selected-categories").on("change", "span.qts-count input", function (e) {
            var max = $(this).attr("max"),
                value = parseInt($(this).val());
            if (value > max) $(this).val(max);
            if (value < 0) $(this).val(0);

            var currentList = $(this).parents(".qt-counts-list");
            if (currentList.length > 0) {
                var count = currentList.find("span.qts-count input").map(function () {
                    return $(this).val()
                }).get().reduce(function (acc, v) {
                    return Number(acc) + Number(v)
                });
                var catid = currentList.attr("id").replace("catid_", "");
                var pLi = $(".selected-categories").find("li[data-catid='" + catid + "']");
                pLi.find("span.qts-count.first").find("strong").html(count);
                updateCategroyItemFromQuestionType(currentList);
            } else {
                var ci = $(this),
                    pLi = ci.parents("li"),
                    si = pLi.find('span.qts-score.first input'),
                    catid = pLi.data("catid"),
                    counts = ci.val(),
                    score = si.val(),
                    qtCounts = [];
                saveCategoryItemData(catid, counts, score, qtCounts);
            }
        });
        $('.selected-categories').on('change', 'span.qts-score input', function (e) {
            var si = $(this);
            var currentList = si.parents(".qt-counts-list");
            if (currentList.length > 0) {
                updateCategroyItemFromQuestionType(currentList);
            } else {
                var pLi = si.parents('li'),
                    catid = pLi.data('catid'),
                    ci = pLi.find('span.qts-count.first input'),
                    count = Number(ci.val()) > 0 ? Number(ci.val()) : 0,
                    score = Number(si.val()) > 0 ? Number(si.val()) : 1,
                    qtCounts = [];
                saveCategoryItemData(catid, count, score, qtCounts);
            }
        });
        $(document).on('click','.change-to-new',function(e){
            e.preventDefault();
            var actionUrl = $(this).attr('href');
            var self = $(this);
            NW.showCustomConfirmDialog(window.OELang.notice,window.OELang.switch,window.OELang.cancel,window.OELang.switchTips,function(resp){
                if(resp == "yes") {
                    var data = {
                        eid:eid,
                        isStepTwoNew:1
                    }
                    data[token] = 1;
                    NW.makeLoading(self);
                    $.post(window.YKS.changeExamVersion,data).done(function(rdata){
                        rdata = $.parseJSON(rdata);
                        if(rdata.status == "ok"){
                            window.location.href = actionUrl;
                        }else{
                            alert(rdata.msg);
                            NW.makeUnLoading(self);
                        }

                    }).fail(function (e) {
                        alert(e)
                        NW.makeUnLoading(self);
                    });

                }
            })

        })

        $(".questions-sources").on("show.bs.tab", function (e) {
            $(".qs-actions a").removeClass("disabled");
        })

        $(".qs-actions").on("click", "a", function(e){
            e.preventDefault();

            function blockUI() {
                Metronic.blockUI({
                    message: window.OELang.loading,
                    target: $(".tabbable-line"),
                    overlayColor: 'none',
                    cenrerY: true,
                    boxed: true
                });
            }

            function unBlock() {
                Metronic.unblockUI($(".tabbable-line"));
            }

            function saveRandomSettings(callback){
                var qcats = [], cateOrders={}, index = 0;
                $(".selected-categories li").map(function(){
                    var pLi = $(this);
                    var selectedData = pLi.data("selected-data");
                    if(selectedData){
                        if( typeof selectedData == "string"){
                            selectedData = $.parseJSON(selectedData);
                        }
                        qcats.push({
                            orders: index++,
                            catid: pLi.data("catid"),
                            counts: selectedData.count,
                            score: selectedData.score ? selectedData.score : 1,
                            qtCounts: selectedData.qtCounts
                        })
                    }
                    cateOrders[pLi.data("catid")] = index++;
                })

                var postData = {
                    eid: eid,
                    "qcats": JSON.stringify(qcats),
                    "question-order": $("input[name='question-order']:checked").val()
                }
                postData[token] = 1;

                $.post( window.YKS.saveRandomQuestionsSetting, postData ).done(function(d){
                    d = $.parseJSON(d);
                    if(d.status == "ok"){
                        callback(true, "");
                    }else{
                        callback(false, d.msg);
                    }
                }).fail(function(d){
                    callback(false, d);
                })

            }

            function changeExamType(type, callback){
                var sandalone = $('input[name="sandalone"]').val();
                var postData = {
                    type: type,
                    eid: eid,
                    sandalone: sandalone
                }
                postData[token] = 1;

                $.post( window.YKS.changeExamTypeURL, postData).done(function(data){
                    callback( true, data );
                }).fail(function(data){
                    callback( false, data );
                })
            }

            function saveExam(success, data){
                if(success && data == "ok"){
                    if( examType == window.YKS.questionsSource.random ){
                        saveRandomSettings(function(success, data){
                            unBlock();

                            if( success ){
                                savedSuccess();
                                window.location.href = link;
                            }else{
                                self.html(originHtml);
                                self.removeClass("disabled");

                                Metronic.alert({
                                    type: 'danger',
                                    icon: 'error',
                                    message: data,
                                    container: $(".qts-random-select-question"),
                                    place: 'prepend'
                                });
                            }
                        })
                    }else{
                        $("#nextLink").val(link);
                        updateQuestionScore();
                        var data = $("#questionsListForm").serialize();
                        $.post($("#questionsListForm").attr("action"), data).done(function (data) {
                            data = $.parseJSON(data);
                            if( data.status == "ok" ){
                                savedSuccess();
                                window.location.href = data.link;
                            }else{
                                Metronic.alert({
                                    type: 'danger',
                                    icon: 'error',
                                    message: window.OELang.examQuestions.saveFailed,
                                    container: $(".qts-pre-select-question"),
                                    place: 'prepend'
                                });
                            }
                            unBlock();

                        }).fail(function () {
                            Metronic.alert({
                                type: 'danger',
                                icon: 'error',
                                message: window.OELang.examQuestions.saveFailed,
                                container: $(".qts-pre-select-question"),
                                place: 'prepend'
                            });
                            unBlock();
                        })
                    }
                }else{
                    unBlock();
                    var msg = '';
                    switch(data){
                        case 'invalid-token':
                            msg = window.OELang.examQuestions.reloginPlease;
                            break;
                        case "not-logined":
                            msg = window.OELang.examQuestions.reloginPlease;
                            break;
                        case "no-exam":
                            msg = window.OELang.examQuestions.reloginPlease;
                            break;
                        case "failed":
                            msg = window.OELang.error;
                            break;
                    }

                    Metronic.alert({
                        type: 'danger',
                        icon: 'error',
                        message: msg,
                        container: $(examType == window.YKS.questionsSource.random?".qts-random-select-question":".qts-pre-select-question"),
                        place: 'prepend'
                    });
                }
            }

            function savedSuccess() {
                new jBox('Modal', {
                    title: window.OELang.title,
                    content: window.OELang.examQuestions.saveSuccess
                }).open();
            }

            function updateQuestionScore() {
                var qs = [];
                $("#questions-list tr").each(function (index, element) {
                    var qid = $(element).attr("qid"),
                        score = $(element).find("td.score").data("score");
                    qs.push({
                        "qid":qid,
                        "score":score
                    });
                });
                $("input[name='questionsScores']").val(JSON.stringify(qs));
            }

            var self = $(this),
                href = self.attr("href"),
                link = self.attr("data-link"),
                examType = Number($(".questions-sources li.active").attr("et"));

            if (examType === window.YKS.questionsSource.predefine) {
                //先检查是否含有试题
                var addedCounts = $("#questions-list tr").length;
                if(addedCounts <=0 ){
                    NW.messageBox(window.OELang.title, window.OELang.examNoQuestionsTip)
                    return;
                }

                var saveBtn = $(this);
                NW.makeLoading(saveBtn);
                var data1 = {
                    eid: eid
                };
                data1[token] = 1;
                $.post({
                    url: window.YKS.checkDuplicateQuestionsInExam,
                    data: data1,
                    dataType: 'json',
                    success: function (data, status, xhr) {
                        if (data.status == 'ok') {
                            var duplicates = data.duplicates;
                            if (duplicates.length > 0) {
                                markRepeatQuestions(duplicates);

                                var content = $($.trim($('#jBoxContentHtml').html()).format(duplicates.length)).find('div[name="jbct2"]');
                                var jbox = new jBox('Modal', {
                                    title: window.OELang.guideline,
                                    content: content,
                                    width: 380,
                                    height: 120,
                                    closeButton: 'title',
                                    onCreated: function () {
                                        content.on('click', 'button[name="confirm"]', function (e) {
                                            jbox.close();
                                            var originHtml = self.html();
                                            self.html(originHtml+'<i class="fa fa-spinner fa-spin"></i>...');
                                            self.addClass("disabled");
                                            blockUI();
                                            changeExamType(examType, saveExam);
                                        });
                                        content.on('click', 'button[name="cancel"]', function (e) {
                                            jbox.close();
                                        })
                                    },
                                    onCloseComplete: function () {
                                        jbox.destroy();
                                        NW.makeUnLoading(saveBtn);
                                    }
                                });
                                jbox.open();
                            } else {
                                var originHtml = self.html();
                                self.html(originHtml+'<i class="fa fa-spinner fa-spin"></i>...');
                                self.addClass("disabled");
                                blockUI();
                                changeExamType(examType, saveExam);
                            }
                        } else {
                            alert(data.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('ajax error');
                    },
                    complete: function (xhr, status) {
                        // alert('complete');
                    }
                });
            } else {
                var originHtml = self.html();
                self.html(originHtml+'<i class="fa fa-spinner fa-spin"></i>...');
                self.addClass("disabled");
                blockUI();
                changeExamType(examType, saveExam);
            }

        });

        $('#btn-check-duplicate').on('click', function (e) {
            NW.makeLoading($('#btn-check-duplicate'));
            checkQuestionsDuplicate();
        });
    }
    function setupAdvanceQuestionsPage(eid, token){
        setupPreselectFromQuestionBank(eid, token);
        $('.selected-categories li').each(function(){
            onClickSelectedCategory.call($(this).find('span.qts-cate-name'));
        })

        function addCategoryToSeledCategories(item) {
            var temp = $('#qtc-template').text().trim();
            var isAdvance = $(".question-list").data("isadvance");
            if(!isAdvance){
                temp = ['<li data-catid = "' + item.li_attr.catid + '">', temp.format(item.li_attr.title, item.li_attr.content_count, 0, item.li_attr.content_count), '<span class="qts-score first" style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;<input type="number" class="form-control" style="display:inline-block; width:80px;" value="1" min="1">&ensp;' + window.OELang.point + '</span>', '<span class="qt-lists"></span>', '<span class="category-total-score" style="padding-left: 28px;">' + window.OELang.totalNScore.format('<b>0</b>') + '</span>', '</li>'].join('');
            }else{
                temp = ['<li data-catid = "' + item.li_attr.catid + '">', temp.format(item.li_attr.title, item.li_attr.content_count, 0, item.li_attr.content_count), '<span class="qts-score first" style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;<input type="number" class="form-control" style="display:inline-block; width:80px;" value="1" min="1">&ensp;' + window.OELang.point + '</span>', '<span class="qt-lists"></span>','', '</li>'].join('');
            }
            content = $(temp).hide().appendTo($(".selected-categories ul")).fadeIn();
            content.find("span.qts-cate-name").append($('<i class="fa fa-chevron-circle-down" title="'+window.OELang.viewqtcountofcate+'"></i>'));
            content.prepend($('<span><i class="fa fa-bars" title="'+window.OELang.dragToSortTip+'"></i><i class="fa fa-trash" title="'+window.OELang._delete+'"></i></span>'));
            content.find('span.qts-count').addClass('first');
            content.find('span.qts-cate-name').addClass('main');
            updateTotal(calculateTotal());
            updateScore();
            if($(".selected-categories li").length>0) $(".selected-categories").addClass("got");
            return content;
        }

        //---分类选择窗口---
        var onChooseCategories3 = function () {
            var treeWindow = $('#categories-tree-4');
            var confirmBtn = treeWindow.find('button[name="confirm"]');
            var treeEl = treeWindow.find('div[name="categories-tree"]');
            var searchEl = treeWindow.find('input[name="categories-search-input"]');
            var tagsInputEl = treeWindow.find('input[name="tagsinput"]');
            var jbox, treeInst, selCats, catType = 2;
            var treeOptions = {
                core: {
                    multiple: true,
                    check_callback: false,
                    data: {
                        type: 'post',
                        dataType: 'json',
                        url: window.YKS.loadCategoriesContentCount,
                        data: function (node) {
                            var isAdvance = $(".question-list").data("isadvance");
                            if(isAdvance == 1){
                                var data = {
                                    type:catType,
                                    advance:1,
                                }
                            }else{
                                var data = {type: catType};
                            }

                            data[token] = 1;
                            if (node.id === '#') {
                                data.cats = [{id: -1, text: window.OELang.allQuestions, li_attr: {catid: -1, title: window.OELang.allQuestions}},
                                    {id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}}];
                            } else {
                                data.catid = node.id;
                            }
                            return data;
                        }
                    }
                },
                plugins: ['checkbox']
            };
            return function (e) {
                var e = e || window.event;
                e.preventDefault();
                jbox = jbox || new jBox('Modal', {
                    title: window.OELang.pleaseSelectQuestionCategory,
                    content: treeWindow,
                    closeOnEsc: false,
                    closeButton: 'title',
                    width: 620,
                    zIndex: 99999,
                    onCreated: function () {
                        treeInst = treeInst || createCategoryTree(treeEl, searchEl, null, treeOptions, catType, token);
                        treeEl.one('loaded.jstree', function () {
                            var selIds = treeInst.get_selected(true).length > 0 ? treeInst.get_selected(true) : $.map($.makeArray($('.selected-categories').find('ul>li')), function (obj) {return $(obj).data('catid');});
                            if (selIds && selIds.length > 0) {
                                for (var i = 0; i < selIds.length; i++) {
                                    var id = selIds[i];
                                    if (treeInst.get_node(id)) {
                                        treeInst.select_node(id);
                                    } else {
                                        treeInst.deselect_all();
                                        treeInst.load_all(null, function () {
                                            treeInst.select_node(selIds);
                                        });
                                        break;
                                    }
                                }
                            }
                        });

                        tagsInputEl.tagsinput({
                            itemValue: function (item) {
                                return item.li_attr.catid;
                            },
                            itemText: function (item) {
                                return item.li_attr.title;
                            },
                            trimValue: true,
                            allowDuplicates: true
                        });
                        treeWindow.find('.bootstrap-tagsinput').off('click', treeWindow.find('.bootstrap-tagsinput'));
                        treeWindow.find('.bootstrap-tagsinput').children('input').attr('readonly', 'readonly');
                        tagsInputEl.on('itemRemoved', function (event) {
                            if (event.item != null) {
                                treeInst.deselect_node(treeInst.get_node(event.item.id));
                            }
                        });
                        treeEl.on('changed.jstree', function (e, data) {
                            var node = data.node;
                            if (!node) return;
                            var selIds = treeInst.get_selected().map(function(id){return Number(id)});
                            if (selIds.length > 1) {
                                if (node.id == -1) {
                                    if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                        treeInst.deselect_all();
                                        treeInst.select_node(-1);
                                    } else {
                                        treeInst.deselect_node(-1);
                                    }
                                } else {
                                    if ($.inArray(-1, selIds) >= 0) {
                                        if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                            treeInst.deselect_node(-1);
                                        } else {
                                            treeInst.deselect_node(node.id);
                                        }
                                    }
                                }
                            }
                            tagsInputEl.tagsinput('removeAll');
                            selIds = treeInst.get_selected(true);
                            if (selIds.length > 0) {
                                for (var i = 0; i < selIds.length; i++) {
                                    var obj = selIds[i];
                                    tagsInputEl.tagsinput('add', obj);
                                }
                            }
                        });

                        treeWindow.on('click', 'button[name="confirm"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            selCats = treeInst.get_selected(true);
                            var selLiCats = $('.selected-categories li');
                            var arr1 = [], arr2 = [];
                            for (var i = 0; i < selCats.length; i++) {
                                var obj = selCats[i];
                                arr1[i] = Number(obj.id);
                            }
                            for (var i = 0; i < selLiCats.length; i++) {
                                var obj = $(selLiCats[i]);
                                arr2[i] = Number(obj.data('catid'));
                            }
                            for (var i = 0; i < selCats.length; i++) {
                                var obj = selCats[i];
                                if (i > 0 && (obj.id == -1 || obj.id == -1)) {
                                    continue;
                                } else if ($.inArray(Number(obj.id), arr2) == -1) {
                                    var li = addCategoryToSeledCategories(obj);
                                    onClickSelectedCategory.call(li.find('span.qts-cate-name'))
                                }
                            }
                            for (var i = 0; i < selLiCats.length; i++) {
                                var obj = $(selLiCats[i]);
                                if ($.inArray(obj.data('catid'), arr1) == -1) {
                                    obj.remove();
                                }
                            }

                            jbox.close();
                        });
                        treeWindow.on('click', 'button[name="cancel"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            jbox.close();
                        });
                    },
                    onOpen: function () {
                        treeInst.clear_search();
                        searchEl.val('');

                        treeInst.deselect_all();
                        if (treeInst.is_loaded('#')) {
                            tagsInputEl.tagsinput('removeAll');
                            treeInst.select_node(selCats);
                        }
                    }
                });
                jbox.toggle();
            };
        }();

        $('#choose-category-3').on('click', onChooseCategories3);
        //---分类选择窗口end---

        function onShowQuestionType(pLi){
            var span1 = pLi.find("span.qts-count.first");
            span1.find("input").hide();
            var span2 = pLi.find('span.qts-score.first');
            span2.hide();
            var countsText = span1.find("strong");
            if(countsText.length<=0){
                countsText = $("<strong>0</strong>");
                span1.append(countsText);
            }

            var data = pLi.data("selected-data");
            if(data){
                if(typeof data == "string"){
                    data = $.parseJSON(data);
                }

                countsText.html(data.count);
                var qtCounts = data.qtCounts;
                if(qtCounts){
                    for(var i=0; i<qtCounts.length; i++){
                        var qt = qtCounts[i];
                        pLi.find("span.qts-count input[data-qtid='"+qt.qtid+"']").val(qt.count);
                        pLi.find('span.qts-score input[data-qtid="' + qt.qtid + '"]').val(qt.score ? qt.score : 1);
                    }
                }
            }
        }

        function onHideQuestionType(pLi){
            return;
            var span1 = pLi.find("span.qts-count.first");
            var span2 = pLi.find('span.qts-score.first');

            var data = pLi.data("selected-data");
            if(data) {
                if(typeof data == "string"){
                    data = $.parseJSON(data);
                }
                if(data.hasOwnProperty("count") && data.count > 0 && data.qtCounts.length>0){
                    return;
                }
            }

            span1.find("input").show().val(span1.find("strong").text()).css('display', 'inline-block');
            span2.show();
            span1.find("strong").remove();
        }

        function updateTotal(total){
            var categories = $(".selected-categories li").length;
            $(".qts-counts-tip").find('span.question-count').html(window.OELang.selectedncategory.format(categories, total));

            if(total>0){
                $(".qs-actions a").removeClass("disabled");
            }else{
                $(".qs-actions a").addClass("disabled");
            }
        }

        function calculateTotal(){
            var count = $(".selected-categories li").map(function () {
                var count = $(this).data("counts");
                return count ? Number(count) : 0;
            }).get().reduce(function (acc, v) {
                return Number(acc) + Number(v);
            });
            return count.isInteger() ? count : count.toFixed(2);
        }

        function updateScore() {
            var totalScore = 0;
            var categories = $('.selected-categories li');
            for (var i = 0; i < categories.length; i++) {
                var obj = $(categories[i]);
                // var str = obj.data('selected-data');
                if (obj.data('selected-data') == undefined) {
                    continue;
                }
                var seledData = typeof obj.data('selected-data') == 'string' ? JSON.parse(obj.data('selected-data')) : obj.data('selected-data');
                var categoryScore = 0;
                if (seledData.qtCounts.length > 0) {
                    for (var j = 0; j < seledData.qtCounts.length; j++) {
                        var obj1 = seledData.qtCounts[j];
                        categoryScore += Number(obj1.count) * Number(obj1.score);
                    }
                } else {
                    categoryScore = Number(seledData.count) * Number(seledData.score);
                }
                obj.find('span.category-total-score').html(window.OELang.totalNScore.format('<b>' + (categoryScore.isInteger() ? categoryScore : categoryScore.toFixed(1)) + '</b>'));
                totalScore += categoryScore;
            }
            $(".qts-counts-tip").find('span.exam-total-score').html(window.OELang.totalNScore.format('<b>' + (totalScore.isInteger() ? totalScore : parseFloat(totalScore)) + '</b>'));
        }

        function showQuestionTypeCounts(pLi, qtCounts) {
            if(qtCounts&&qtCounts.length>0){
                var qtLists = pLi.find("span.qt-lists");
                var qtKeyValue = {};
                window.YKS.questiontypes.map(function(qt){
                    qtKeyValue[qt.qtid] = qt;
                })


                if(qtLists.length==0){
                    qtLists = $("<span class='qt-lists'></span>").insertBefore(pLi.children("span:last"));
                }
                var content = qtCounts.map(function(v){
                    var qtid = v.qtid,
                        counts = v.count;
                    if(counts<=0) return "";
                    var colors = [
                        'badge-default',
                        'badge-primary',
                        'badge-info',
                        'badge-success',
                        'badge-danger',
                        'badge-warning'
                    ]
                    return "<b class='badge {2}'>{0} {1}</b>".format(qtKeyValue[qtid].label, counts, colors[qtid%colors.length]);
                }).join(" ");
                qtLists.html(content);
            }else{
                pLi.find("span.qt-lists").remove();
            }
        }

        function saveCategoryItemData(catid, itemTotal, itemScore, qtCounts) {
            var pLi = $(".selected-categories").find("li[data-catid='"+catid+"']");
            var data = {
                count: itemTotal,
                score: itemScore,
                qtCounts: qtCounts
            }
            pLi.data("selected-data", JSON.stringify(data));
            pLi.data("counts", itemTotal);
            pLi.data('score', itemScore);
            updateTotal(calculateTotal());
            updateScore();
            showQuestionTypeCounts(pLi, qtCounts);
        }

        function updateCategroyItemFromQuestionType(qtCountsList){
            var qtCountsList = $(qtCountsList);
            var qtCounts = [], counts = 0;
            qtCountsList.find("div.question-type-item").map(function () {
                var item = $(this),
                    ci = item.find('span.qts-count input'),
                    si = item.find('span.qts-score input'),
                    qtid = ci.data('qtid'),
                    qtc = Number(ci.val()),
                    qts = Number(si.val());
                counts += qtc;
                qtCounts.push({
                    qtid: qtid,
                    count: qtc,
                    score: qts
                })
            });

            var catid = qtCountsList.attr("id").replace("catid_", "");
            saveCategoryItemData(catid, counts, 1, qtCounts);
        }

        function onClickSelectedCategory(e){
            var self = $(this),
                status = self.data('status') ? self.data('status') : 'closed',
                pLi = self.parents("li");
            var catid = pLi.data("catid");

            if(status === "closed"){
                self.data('status', 'open');
                var qcByC = pLi.data('qcbyc');
                var isAdvance = $(".question-list").data("isadvance");
                var displayQcByC = function () {
                    var template = $("#qtc-template").text().trim(),
                        qtKeyValue = {};
                    template = '<div class="question-type-item">' + template +
                        '<span class="each-question" style="padding-left: 28px">' + window.OELang.eachQuestion + '&ensp;</span>' +
                        '<span class="qts-score"><input type="number" class="form-control" style="display:inline-block; width:80px;" data-qtid="{5}" value="1" min="1" /></span>' +
                        '<span class="question-score">&ensp;' + window.OELang.point + '</span>' +
                        '</div>';
                    window.YKS.questiontypes.map(function (qt) {
                        qtKeyValue[qt.qtid] = qt;
                    });
                    var content = ["<div style='padding-left: 28px;' class='qt-counts-list' id='catid_" + catid + "'>", qcByC.map(function (qc) {
                        var value = qc.hasOwnProperty('value') ? qc.value : 0;
                        return template.format(qtKeyValue[qc.qtid].label, qc.counts, value, qc.counts, qc.qtid, qc.qtid);
                    }).join(''), "</div>"].join('');
                    $(content).hide().appendTo(pLi).slideDown();
                    onShowQuestionType(pLi);
                };

                if(!qcByC){
                    self.find('i.fa-chevron-circle-down').removeClass("fa-chevron-circle-down").addClass("fa-spin fa-spinner");
                    $.get(window.YKS.getQuestionsCountByCategory, {catid: catid}).done(function(data){
                        data = $.parseJSON(data);
                        if(data.status === "ok"){
                            qcByC = data.questionsCount;
                            if(isAdvance == 1){
                                var tmp = [];
                                tmp[0] = qcByC[0];
                                qcByC = tmp;
                            }
                            pLi.data('qcbyc', JSON.stringify(qcByC));
                            displayQcByC(qcByC);
                        }else{
                            alert(data.error);
                        }
                        self.find('i.fa-spinner').addClass("fa-chevron-circle-up").removeClass("fa-spin fa-spinner");
                    }).fail(function (e) {
                        self.find('i.fa-spinner').addClass("fa-chevron-circle-up").removeClass("fa-spin fa-spinner");
                        alert(window.OELang.noNetworkTip)
                    });
                }else{
                    qcByC = $.parseJSON(qcByC);
                    if(isAdvance == 1){
                        var tmp = [];
                        tmp[0] = qcByC[0];
                        qcByC = tmp;
                    }
                    self.find('i.fa-chevron-circle-down').addClass("fa-chevron-circle-up").removeClass("fa-chevron-circle-down");
                    displayQcByC();
                }
            }else{
                return;
                var div = $(".selected-categories").find("div#catid_"+catid);
                div.slideUp(function () {
                    div.remove();
                });
                self.find('i.fa-chevron-circle-up').removeClass("fa-chevron-circle-up").addClass("fa-chevron-circle-down");
                $(this).data('status', 'closed');
                onHideQuestionType(pLi);
            }
        }

        function checkQuestionsDuplicate() {
            var data = {
                eid: eid
            };
            data[token] = 1;
            $.post({
                url: window.YKS.checkDuplicateQuestionsInExam,
                data: data,
                dataType: 'json',
                success: function (data, status, xhr) {
                    if (data.status == 'ok') {
                        var content = $($.trim($('#jBoxContentHtml').html())).find('div[name="jbct1"]');
                        var jbox = new jBox('Modal', {
                            title: window.OELang.guideline,
                            content: content,
                            width: 380,
                            height: 130,
                            closeButton: 'title',
                            onCreated: function () {
                                content.on('click', 'button', function (e) {
                                    jbox.close();
                                });
                            },
                            onCloseComplete: function () {
                                jbox.destroy();
                                NW.makeUnLoading($('#btn-check-duplicate'));
                            }
                        });

                        var duplicates = data.duplicates;
                        if (duplicates.length > 0) {
                            markRepeatQuestions(duplicates);
                            content.find('p').text(window.OELang.existQuestionsDuplicateTip.format(duplicates.length));
                        }

                        jbox.open();
                    } else {
                        alert(data.error);
                    }
                },
                error: function (xhr, status, error) {
                    alert('ajax error');
                },
                complete: function (xhr, status) {
                    // alert('complete');
                }
            });
        }

        function markRepeatQuestions(duplicates) {
            var repeat = [];
            var tbody = $('#questions-list');
            tbody.find('tr').css('background-color', '');

            for (var i = 0; i < duplicates.length; i++) {
                var d = duplicates[i];
                if (!repeat[d.title]) {
                    repeat[d.title] = [];
                }
                repeat[d.title].push(d);
            }

            for (var j in repeat) {
                var color = window.randomColor();
                var r = repeat[j];
                if (r.length > 1) {
                    //var $pel;
                    for (var k = 0; k < r.length; k++) {
                        if (k === 0) continue;
                        var q = r[k];
                        var $el = tbody.find('tr[qid="' + q.qid + '"]');
                        $el.addClass('repeat-question');
                        $el.css('background-color', color);
                    }
                }
            }
        }

        //2018.03.09 增加拖动功能
        var selectedCategoryList = document.getElementById('selected-category-list');
        if(selectedCategoryList){
            Sortable.create( selectedCategoryList, {
                handle: 'i.fa-bars',
                animation: 150
            });
        }
        $(".selected-categories").on("click", "i.fa-trash", function (e) {
            var isAdvance = $(".question-list").data("isadvance");
            var recordCount = $(".question-list").data("recordcount");
            if(isAdvance ==1 && recordCount>0){
                NW.messageBox(window.OELang.notice,window.OELang.notCanSetLevel)
                return;
            }else{
                var pLi = $(this).parents("li"),
                    catid = pLi.data("catid");
                $(".available-categories").find("li[data-catid='"+catid+"']").removeClass("selected");
                pLi.fadeOut(800, function() {
                    pLi.remove();
                    if($(".selected-categories li").length<=0){
                        $(".selected-categories").removeClass("got");
                    }
                    updateScore();
                });
            }
        }).on('click', 'span.qts-cate-name.main', onClickSelectedCategory)


        $(".selected-categories").on("change", "span.qts-count input", function (e) {
            var max = $(this).attr("max"),
                value = parseInt($(this).val());
            if (value > max) $(this).val(max);
            if (value < 0) $(this).val(0);

            var currentList = $(this).parents(".qt-counts-list");
            if (currentList.length > 0) {
                var count = currentList.find("span.qts-count input").map(function () {
                    return $(this).val()
                }).get().reduce(function (acc, v) {
                    return Number(acc) + Number(v)
                });
                var catid = currentList.attr("id").replace("catid_", "");
                var pLi = $(".selected-categories").find("li[data-catid='" + catid + "']");
                pLi.find("span.qts-count.first").find("strong").html(count);
                updateCategroyItemFromQuestionType(currentList);
            } else {
                var ci = $(this),
                    pLi = ci.parents("li"),
                    si = pLi.find('span.qts-score.first input'),
                    catid = pLi.data("catid"),
                    counts = ci.val(),
                    score = si.val(),
                    qtCounts = [];
                saveCategoryItemData(catid, counts, score, qtCounts);
            }
        });
        $('.selected-categories').on('change', 'span.qts-score input', function (e) {
            var si = $(this);
            var currentList = si.parents(".qt-counts-list");
            if (currentList.length > 0) {
                updateCategroyItemFromQuestionType(currentList);
            } else {
                var pLi = si.parents('li'),
                    catid = pLi.data('catid'),
                    ci = pLi.find('span.qts-count.first input'),
                    count = Number(ci.val()) > 0 ? Number(ci.val()) : 0,
                    score = Number(si.val()) > 0 ? Number(si.val()) : 1,
                    qtCounts = [];
                saveCategoryItemData(catid, count, score, qtCounts);
            }
        });

        $(".questions-sources").on("show.bs.tab", function (e) {
            $(".qs-actions a").removeClass("disabled");
        })

        $(".qs-actions").on("click", "a", function(e){
            e.preventDefault();

            function blockUI() {
                Metronic.blockUI({
                    message: window.OELang.loading,
                    target: $(".tabbable-line"),
                    overlayColor: 'none',
                    cenrerY: true,
                    boxed: true
                });
            }

            function unBlock() {
                Metronic.unblockUI($(".tabbable-line"));
            }

            function saveRandomSettings(callback){
                var qcats = [], cateOrders={}, index = 0;
                $(".selected-categories li").map(function(){
                    var pLi = $(this);
                    var selectedData = pLi.data("selected-data");
                    if(selectedData){
                        if( typeof selectedData == "string"){
                            selectedData = $.parseJSON(selectedData);
                        }
                        qcats.push({
                            orders: index++,
                            catid: pLi.data("catid"),
                            counts: selectedData.count,
                            score: selectedData.score ? selectedData.score : 1,
                            qtCounts: selectedData.qtCounts
                        })
                    }
                    cateOrders[pLi.data("catid")] = index++;
                })

                var postData = {
                    eid: eid,
                    "qcats": JSON.stringify(qcats),
                    "question-order": $("input[name='question-order']:checked").val()
                }
                postData[token] = 1;

                $.post( window.YKS.saveRandomQuestionsSetting, postData ).done(function(d){
                    d = $.parseJSON(d);
                    if(d.status == "ok"){
                        callback(true, "");
                    }else{
                        callback(false, d.msg);
                    }
                }).fail(function(d){
                    callback(false, d);
                })

            }

            function changeExamType(type, callback){
                var postData = {
                    type: type,
                    eid: eid
                }
                postData[token] = 1;

                $.post( window.YKS.changeExamTypeURL, postData).done(function(data){
                    callback( true, data );
                }).fail(function(data){
                    callback( false, data );
                })
            }

            function saveExam(success, data){
                if(success && data == "ok"){
                    if( examType == window.YKS.questionsSource.random || examType === window.YKS.questionsSource.ordinaryAdvance ){
                        var isAdvance = $(".question-list").data("isadvance");
                        if(isAdvance == 1){
                            var questionCount = 0;
                            $(".selected-categories li").map(function(){
                                var pLi = $(this);
                                var selectedData = pLi.data("selected-data");
                                if(selectedData){
                                    if( typeof selectedData == "string"){
                                        selectedData = $.parseJSON(selectedData);
                                    }
                                    questionCount += Number(selectedData.count);
                                }
                            })
                            var maxRewardLevel = $(".rewards").children(":last").find(".options").data("level");
                            if(maxRewardLevel>questionCount){
                                NW.messageBox(window.OELang.notice,window.OELang.rewardCountMoreThanQuestionCount)
                                self.html(originHtml);
                                self.removeClass("disabled");
                                unBlock();
                            }else{
                                saveRandomSettings(function(success, data){
                                    unBlock();
                                    if( success ){
                                        savedSuccess();
                                        window.location.href = link;
                                    }else{
                                        self.html(originHtml);
                                        self.removeClass("disabled");
                                        Metronic.alert({
                                            type: 'danger',
                                            icon: 'error',
                                            message: data,
                                            container: $(".qts-random-select-question"),
                                            place: 'prepend'
                                        });
                                    }
                                })
                            }
                        }else{
                            saveRandomSettings(function(success, data){
                                unBlock();

                                if( success ){
                                    savedSuccess();
                                    window.location.href = link;
                                }else{
                                    self.html(originHtml);
                                    self.removeClass("disabled");

                                    Metronic.alert({
                                        type: 'danger',
                                        icon: 'error',
                                        message: data,
                                        container: $(".qts-random-select-question"),
                                        place: 'prepend'
                                    });
                                }
                            })
                        }
                    }else{
                        $("#nextLink").val(link);
                        updateQuestionScore();
                        var isAdvance = $(".question-list").data("isadvance");
                        if(isAdvance == 1){
                            var question = $("input[name='questionsScores']").val();
                            var questionCount = $.parseJSON(question).length;
                            var maxRewardLevel = $(".rewards").children(":last").find(".options").data("level");
                            if(maxRewardLevel>questionCount){
                                NW.messageBox(window.OELang.notice,window.OELang.rewardCountMoreThanQuestionCount)
                                self.html(originHtml);
                                self.removeClass("disabled");
                                unBlock();
                                return;
                            }
                        }
                        var data = $("#questionsListForm").serialize();
                        $.post($("#questionsListForm").attr("action"), data).done(function (data) {
                            data = $.parseJSON(data);
                            if( data.status == "ok" ){
                                savedSuccess();
                                window.location.href = data.link;
                            }else{
                                Metronic.alert({
                                    type: 'danger',
                                    icon: 'error',
                                    message: window.OELang.examQuestions.saveFailed,
                                    container: $(".qts-pre-select-question"),
                                    place: 'prepend'
                                });
                            }
                            unBlock();

                        }).fail(function () {
                            Metronic.alert({
                                type: 'danger',
                                icon: 'error',
                                message: window.OELang.examQuestions.saveFailed,
                                container: $(".qts-pre-select-question"),
                                place: 'prepend'
                            });
                            unBlock();
                        })
                    }
                }else{
                    unBlock();
                    var msg = '';
                    switch(data){
                        case 'invalid-token':
                            msg = window.OELang.examQuestions.reloginPlease;
                            break;
                        case "not-logined":
                            msg = window.OELang.examQuestions.reloginPlease;
                            break;
                        case "no-exam":
                            msg = window.OELang.examQuestions.reloginPlease;
                            break;
                        case "failed":
                            msg = window.OELang.error;
                            break;
                    }

                    Metronic.alert({
                        type: 'danger',
                        icon: 'error',
                        message: msg,
                        container: $(examType == window.YKS.questionsSource.random?".qts-random-select-question":".qts-pre-select-question"),
                        place: 'prepend'
                    });
                }
            }

            function savedSuccess() {
                new jBox('Modal', {
                    title: window.OELang.title,
                    content: window.OELang.examQuestions.saveSuccess
                }).open();
            }

            function updateQuestionScore() {
                var qs = [];
                $("#questions-list tr").each(function (index, element) {
                    var qid = $(element).attr("qid"),
                        score = $(element).find("td.score").data("score");
                    qs.push({
                        "qid":qid,
                        "score":score
                    });
                });
                $("input[name='questionsScores']").val(JSON.stringify(qs));
            }

            var self = $(this),
                href = self.attr("href"),
                link = self.attr("data-link"),
                examType = Number($(".questions-sources li.active").attr("et"));

            if (examType === window.YKS.questionsSource.predefine) {
                //先检查是否含有试题
                var addedCounts = $("#questions-list tr").length;
                if(addedCounts <=0 ){
                    NW.messageBox(window.OELang.title, window.OELang.examNoQuestionsTip)
                    return;
                }

                var saveBtn = $(this);
                NW.makeLoading(saveBtn);
                var data1 = {
                    eid: eid
                };
                data1[token] = 1;
                $.post({
                    url: window.YKS.checkDuplicateQuestionsInExam,
                    data: data1,
                    dataType: 'json',
                    success: function (data, status, xhr) {
                        if (data.status == 'ok') {
                            var duplicates = data.duplicates;
                            if (duplicates.length > 0) {
                                markRepeatQuestions(duplicates);

                                var content = $($.trim($('#jBoxContentHtml').html()).format(duplicates.length)).find('div[name="jbct2"]');
                                var jbox = new jBox('Modal', {
                                    title: window.OELang.guideline,
                                    content: content,
                                    width: 380,
                                    height: 120,
                                    closeButton: 'title',
                                    onCreated: function () {
                                        content.on('click', 'button[name="confirm"]', function (e) {
                                            jbox.close();
                                            var originHtml = self.html();
                                            self.html(originHtml+'<i class="fa fa-spinner fa-spin"></i>...');
                                            self.addClass("disabled");
                                            blockUI();
                                            changeExamType(examType, saveExam);
                                        });
                                        content.on('click', 'button[name="cancel"]', function (e) {
                                            jbox.close();
                                        })
                                    },
                                    onCloseComplete: function () {
                                        jbox.destroy();
                                        NW.makeUnLoading(saveBtn);
                                    }
                                });
                                jbox.open();
                            } else {
                                var originHtml = self.html();
                                self.html(originHtml+'<i class="fa fa-spinner fa-spin"></i>...');
                                self.addClass("disabled");
                                blockUI();
                                changeExamType(examType, saveExam);
                            }
                        } else {
                            alert(data.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('ajax error');
                    },
                    complete: function (xhr, status) {
                        // alert('complete');
                    }
                });
            } else {
                var originHtml = self.html();
                self.html(originHtml+'<i class="fa fa-spinner fa-spin"></i>...');
                self.addClass("disabled");
                blockUI();
                changeExamType(examType, saveExam);
            }

        });

        $('#btn-check-duplicate').on('click', function (e) {
            NW.makeLoading($('#btn-check-duplicate'));
            checkQuestionsDuplicate();
        });
    }
    /**
     * pre-select questions for the exam
     * @param eid
     */
    function setupPreselectFromJSQuestionBank(eid, token, iscn) {
        //---试题排序---
        function getQuestionsOrderNumber(){
            var qids = [];
            $("#questions-list tr").each(function (index, el) {
                qids.push($(this).attr("qid"));
                $(this).find("span.index").html(index + 1);
            });
            return qids;
        }
        function toUpdateQuestionsOrder(questionsOrder) {
            $("#questionOrders").val(questionsOrder.join(','));
            $("a[href='#save']").removeAttr("disabled").removeClass("disabled");
        }
        function updateQuestionsOrder(){
            var qids = getQuestionsOrderNumber();
            toUpdateQuestionsOrder(qids);
        }
        function onSortUpdated(){
            updateQuestionsOrder();
            if($('#qs-pre-select').find('div.section').length > 0){
                $('#qs-pre-select').find('div.section').each(function(index,element){
                    var indexNum = $(this).find('tr').length;
                    updateQuestionIndex(indexNum,$(this));
                })

            }else{
                var indexNum = $('#questions-list').find('tr').length;
                updateQuestionIndex(indexNum,null);
            }

        }

        var preSortableFilter = ".regular-ques .right-bottom-btns";//定义哪些列表单元不能进行拖放
        if($('#qs-pre-select').find('div.section').length > 0){
            $(document).find('div.section #questions-list').each(function(index,el){
                Sortable.create(el, {
                    animation: 150,
                    onUpdate:onSortUpdated,
                    filter:preSortableFilter
                });
            })
        }else{
            Sortable.create(document.getElementById('questions-list'), {
                animation: 150,
                onUpdate:onSortUpdated,
                filter:preSortableFilter
            });
        }

        function ajaxSaveQuestionsOrder(){
            var questionsListForm = $("#questionsListForm");
            $.post(questionsListForm.attr("action"), questionsListForm.serialize()).done(function (data) {
                $("a[href='#save']").attr("disabled", "disabled").addClass("disabled");
            }).fail(function (error) {
                $("a[href='#save']").removeAttr("disabled").removeClass("disabled");
            });
        }
        /**
         * sort the question order
         * order can be cate, type
         * @param order order by, value can be cate, type
         * @param desc, can be desc, or asc
         */
        function sortQuestionsOn(target,order, desc) {
            var tbody = $(target);
            var trList = tbody.find("tr");

            if( !desc ) desc = "desc";

            if( trList.length <= 0 ) return;

            trList.sort(function (a, b) {
                var prop = "qtid";
                if (order == "cate") { //#orderbycate
                    prop = "catid";
                }

                var na = Number($(a).attr(prop)),
                    nb = Number($(b).attr(prop));
                return desc == "desc" ? (nb - na) : ( na - nb );
            });
            var orders = [];
            trList.each(function () {
                var tr = $(this);
                orders.push(tr.attr("qid"));
                tbody.append(tr);
            });

            toUpdateQuestionsOrder(orders);
            // getQuestionsOrderNumber();

            var sectionParent = $(target).parents('div.section');
            if(sectionParent.length <=0){
                sectionParent = null;
            }
            updateQuestionIndex(trList.length, sectionParent);

        }
        function onSortQuestionsNew(e) {
            e.preventDefault();
            var target = $('#qs-pre-select #questions-list');

            var selectedOption = $(this);

            var value = selectedOption.data("value"),
                desc = selectedOption.attr("desc");
            if(value <= 0){
                return ;
            }
            if(!desc) desc = "desc";
            sortQuestionsOn(target,value == 1 ? "cate" : "type", desc);

            if( desc == "desc" ){
                selectedOption.attr("desc", "asc");
            }else{
                selectedOption.attr("desc", "desc");
            }
        }
        function onSortQuestions(e) {
            e.preventDefault();
            var target = $('#qs-pre-select #questions-list');
            var parentSection = $(this).find('div.section');
            if(parentSection.length > 0){
                target = $(parentSection).find('#questions-list');
            }
            var selectedOption = $(this).find("option:selected");

            var value = selectedOption.val(),
                desc = selectedOption.attr("desc");
            if(value <= 0){
                return ;
            }
            if(!desc) desc = "desc";
            sortQuestionsOn(target,value == 1?"cate":"type", desc);

            if( desc == "desc" ){
                selectedOption.attr("desc", "asc");
            }else{
                selectedOption.attr("desc", "desc");
            }
        }
        //---试题排序end---

        //---手动添加试题---
        var loadingInnerHtml = $("#loading").html(),
            display = "all",
            questionType = -1,
            questionCate = -1,
            addingNewQuestion = true,
            preSelectedLabel = 0,
            preSelectedDiffLevel = 0;
        var box;
        function removeQuestionFromTable(qids, onSuccess, deleteFromBank) {
            if( !(qids instanceof Array)) {
                qids = [qids];
            }

            deleteFromBank = !deleteFromBank?false:true;

            var data = {
                qid: qids.join(","),
                eid: eid,
                deletefrombank: deleteFromBank ? 1 : 0,
                isNew:1
            };
            data[token] = 1;
            $.post(window.YKS.removeExamQuestion, data).done(function (data) {
                if ($.trim(data) == "ok") {
                    for(var i = 0; i<qids.length; i++){
                        var s = "#questionList tr[qid='{0}']".format(qids[i]);
                        var qidtr = $(s);
                        var sectionEl = $(s).parents('div.section');
                        qidtr.remove();


                        var totalQuestionCount = Number($('#questionList').find('tr[qid]').length);
                        if(sectionEl.length > 0){
                            totalQuestionCount = sectionEl.find('tr').length;
                        }else{
                            sectionEl = null;
                        }
                        updateQuestionIndex(totalQuestionCount,sectionEl);
                    }
                    updateQuestionsOrder();

                    onSuccess = onSuccess || function (qids) {};
                    onSuccess(qids.length==1?qids[0]:qids);
                } else {
                    NW.messageBox(window.OELang.notice, window.OELang.examQuestions.removeQuestionFailed);
                }
            })
        }

        function updateQuestionsCount() {
            var totalTime = 0, totalPoints = 0, totalQuestions = 0, totalSections = 0, totalQuestionTimeLimit = 0, totalSectionTimeLimit = 0;
            var sections = $('#qs-pre-select').find('div.section');
            var qtKeyValue = {};
            window.YKS.questiontypes.map(function(qt){
                qt.count = 0;//各个题型的数量
                qtKeyValue[qt.qtid] = qt;
            })
            if(sections.length > 0){
                sections.each(function(index,element){
                    //各部分题目数量
                    var sectionQuestionCount = $(this).find('#questionList tr[qid]').length;
                    $(this).find('#sectionQuestionsCount').html(window.OELang.randomQuestionsSelectedTips.format(sectionQuestionCount));
                    totalQuestions += sectionQuestionCount;

                    //各部分总分
                    var s = 0;
                    $(this).find("td.score").each(function(index, element){
                        var score = Number($(element).data("score")),
                            qscore = Number($(element).data("qscore"));
                        s += score<0?qscore:score;
                    })
                    $(this).find('.sectionTotalScore').html(window.OELang.sectionTotalPoints.format(s));
                    totalPoints += totalPoints;

                    //各部分总时长
                    var questionTimeLimit = $(this).find('.sectionTipComment').data('q-time');
                    var sectionTimeLimit = $(this).find('.sectionTipComment').data('time');
                    if(questionTimeLimit > 0 ){
                        $(this).find('.sectionTipComment').html(window.OELang.sectionQuestionLimited.format(questionTimeLimit));
                    }else{
                        $(this).find('.sectionTipComment').html(window.OELang.sectionLimitTime.format(sectionTimeLimit));

                    }
                    $(this).find('.sectionTipComment').data('q-time',questionTimeLimit)
                    $(this).find('.sectionTipComment').data('time',sectionTimeLimit);
                    totalQuestionTimeLimit += questionTimeLimit;
                    totalSectionTimeLimit += sectionTimeLimit;

                })
                totalTime = parseInt(totalQuestionTimeLimit/60) + totalSectionTimeLimit;

            }else{
                totalQuestions = $("#questionList tr[qid]").length;
                $("#questionscount > b").html(totalQuestions);
                var s = 0;
                $("td.score").each(function(index, element){
                    var score = Number($(element).data("score")),
                        qscore = Number($(element).data("qscore"));
                    s += score<0?qscore:score;
                });
                $("span.totalscore b").html(s);
                totalPoints =  s;
            }

            //各个题型的数量
            $('#qs-pre-select').find("tr").each(function(index, element){
                var qtid = $(this).data('qtid');
                if(qtid !== undefined){
                    qtKeyValue[qtid].count += 1;
                }
            })

            var result = {
                totalQuestions:totalQuestions,
                totalPoints:totalPoints,
                totalSections:totalSections,
                totalTime:totalTime,
                qtKeyValue:qtKeyValue
            }

            return result;

        }
        function onRemove(e) {
            if(e) e.preventDefault();
            var self = $(this);
            var origin = $(this).html();
            $(this).html('<i class="fa fa-spin fa-spinner"></i>');
            DeleteQuestions([$(this).attr("qid")], function(success){
                if(!success) self.html(origin);
            });
            return false;
        };
        function addQuestionToTable(title, category, qid, qtid, catid, questionType, score,setScore) {

            setScore = typeof setScore !== 'undefined' ? setScore : -1;

            var html = '<tr qid="{2}" qtid="{4}" catid="{5}">' +
                ' <td><div class="checker"><span class=""><input type="checkbox" name="qid[]" class="checkboxes" value="{2}"></span></div></td> '+
                ' <td>{3}</td>' +
                ' <td><a clickViewQuestionDetails="{2}" href="" data-from="eq">{0}</a></td>' +
                ' <td>{1}</td>' +
                ' <td>{6}</td>' +
                ' <td class="score" data-score="{8}" data-qscore="{7}">{7}</td>' +
                ' <td>' +
                '    <span><a href="#" class="active" data-action="edit-question" qid="{2}">'+ window.OELang.edit +'</a></span> ' +
                '    <span>|</span> ' +
                '    <span><a href="#addition" action="addition">'+window.OELang.examQuestions.setAddition+'</a></span> ' +
                '    <span>|</span> ' +
                '    <span><a href="#chscore">'+window.OELang.examQuestions.changeScore+'</a></span> ' +
                ' </td>' +
                '</tr>';

            var index = '<i class="question-move fa fa-bars" aria-hidden="true" title="'+ window.OELang.examQuestions.dragToReorder +'"></i> <span class="index">'+$("#questionList tr[qid]").length+'</span>'

            html = html.format(title, category, qid, index, qtid, catid, questionType, score,setScore);

            $("#questionList").append(html);
            $(".qs-actions a").removeClass("disabled");
            updateExamInfo(iscn);
        };
        //应该再加一个section和tr
        //tr存在表示替换
        //setScore在试卷里的分数，score在题库的分数
        function addJSQuestionToTable(section,tr,catid,qid,qtid,action,question,details,score,setScore,adt) {

            if($('#qs-random-select .selected-categories').data('question-count') == 0){
                $('#qs-random-select .selected-categories').find("ul#selected-category-list").empty();
                $('#qs-random-select .selected-categories').data('question-count', 1);
                var noQuestionsTipsTmpContent = window.OELang.noRandomQuestionTips +
                    '<a type="button" class="btn yks-blue" id="choose-category-3">' +
                    '<i class="fa fa-plus" aria-hidden="true"></i> ' + window.OELang.addCategory +
                    '</a>';
                var noQuestionsTipsTmp = '<div class="row no-question-tips" xmlns="http://www.w3.org/1999/html">' +
                    '<div class="col-md-12 text-center">' +
                    '<img class="erro_tips_img" src="{0}" alt=""></br>' +
                    noQuestionsTipsTmpContent
                '</div>' +
                '</div>';
                var noQuestionTipsPng = iscn ? "/components/com_exams/assets/img/no_question_tips.png" :"/components/com_exams/assets/img/no_question_tips_en.png";
                $('#qs-random-select .selected-categories').find("ul#selected-category-list").append(noQuestionsTipsTmp.format(noQuestionTipsPng));
            }
            var allQids = [];
            $('#questionsListForm').find('tr').each(function(index,value){
                var thisQid = Number($(this).attr("qid"));
                if(thisQid > 0){
                    allQids.push(thisQid);
                }
            })
            if($.inArray(qid,allQids) >= 0 && $(tr).length <= 0){
                updateExamInfo(iscn);
                return;
            }
            if(section == "importQuestion"){
                var sectionId = Number($('input[name="currentAddQuestionsSection"]').val());
                if(setScore == 0){
                    setScore = null;
                }
                if(sectionId > 0){

                    section = $('#qs-pre-select div.section[sectionid="{0}"]'.format(sectionId));
                }else{
                    section = null;
                }
            }

            var adtAction = "addition", adtColor = "", adtTitle = window.OELang.examQuestions.setAddition;

                setScore = setScore !== null ? setScore : -1;

            var indexNum = 0;
            if(tr){
                // indexNum = section?$(section).find('tr[qid="{0}"]'.format(qid)).find('.regular-ques').data('index'):$("#questionList tr").find('.regular-ques').data('index');
                indexNum = $(tr).find('.regular-ques').data('index');
            }else{
                indexNum = section?$(section).find('#questionList tr[qid]').length+1:$("#questionList tr[qid]").length+1;
            }

            if(adt == 1){
                adtAction = "nonaddition";
                adtColor = "addition-color";
                adtTitle = window.OELang.examQuestions.cancelAddition;
            }
            var html = '<tr qid="{0}" qtid="{1}" catid="{2}">' +
                ' <td width="30"><div class="checker"><span class=""><input type="checkbox" name="qid[]" class="checkboxes" value="{0}"></span></div></td> '+
                ' <td class="score" data-score="{6}" data-qscore="{7}">'+
                '<div class="regular-ques" data-action="{3}" data-total="'+indexNum+'" data-index="'+indexNum+'"  data-question="{4}" data-details="{5}">' +
                    '<div class="right-bottom-btns">'+
                        '<a action="'+ adtAction +'" href="#addition" type="button" class="btn operation-btn ' + adtColor + '" title="'+adtTitle+'"><i class="fa fa-plus-square" aria-hidden="true"></i></a>'+
                        '<a data-action="edit-question" type="button" class="btn operation-btn" title="'+window.OELang.edit+'" qid="{0}"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></a>'+
                        '<a action="delete-question" type="button" class="btn operation-btn" title="' +window.OELang.delQuestion+ '" qid="{0}"><i class="fa fa-times-circle" aria-hidden="true"></i></a>'+
                    '</div>'+
                    '<span class="right-top-tips">'+window.OELang.dragTips+'</span>'+
                '</div>'+
                '</td>' +
                '</tr>';

            // var index = '<i class="question-move fa fa-bars" aria-hidden="true" title="'+ window.OELang.examQuestions.dragToReorder +'"></i> <span class="index">'+$("#questionList tr").length+'</span>'

            html = html.format(qid,qtid,catid,action,question,details,setScore,score);


            if(tr){
                tr = section?$(section).find(tr):tr;
                $(tr).replaceWith(html);
            }else{
                var ql = section?$(section).find('#questionList'):$('#questionList');
                $(ql).append(html);

            }
            var trList = $('tr[qid="{0}"] .regular-ques'.format(qid));
            if(!iscn){
                window.YKSQuestion.selectLang("en-gb");
            }
            trList.each(function(index,el){
                if($(this).find('.question').length == 0){
                    window.YKSQuestion.render($(this));//JS渲染试题
                }
            })
            // if(MathJax) MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
            $(".qs-actions a").removeClass("disabled");
            updateExamInfo(iscn);
            updateQuestionIndex(indexNum,section);
            $('regular-ques .operation-btn').jBox('Tooltip',{
                theme: 'TooltipDark',
                delayClose:1,
                getContent:'title'
            })
        }
        function updateQuestionIndex(total,section){
            var target = $('#questionList tr[qid]');
            if(section){
                target = $(section).find('.regular-ques');
            }
            var i = 1;
            target.each(function(index,value){
                var self = $(this);
                // var i = self.find('.ques-title .ques-number').text().split('/')[0];
                self.find('.ques-title .ques-number').text(i+'/'+total);
                i++;
            })
        }
        /*
         *loading questions list.
         *eid 指定不显示已经存在于试卷eid的试题
         */
        function toLoadQuestionList(url, display, search_text, filter_question_type, filter_question_cateid, eid,preSelectedDiffLevel,preSelectedLabel, callback) {
            var data = {
                display: display,
                search: search_text,
                fqt: filter_question_type,
                catid: filter_question_cateid,
                eid: eid,
                preSelectedDiffLevel:preSelectedDiffLevel,
                preSelectedLabel:preSelectedLabel,
                format: "raw",
                limit: 6
            };
            if(!url) data["start"] = 0;
            $.ajax({
                url: url ? url : YKS.ListQuestionsURLNew,
                data: data

            }).done(function (data) {
                var dataO = $.parseJSON(data);
                if (callback) {
                    callback(dataO);
                }
                var selectCheckAllEl = $('.questions-panel').find('i.select-check-all');
                if(selectCheckAllEl.hasClass("checked")) selectCheckAllEl.removeClass('checked');
            });
        }
        function loadQuestionList(url) {
            $(".question-list").html(loadingInnerHtml);
            $(".paginations").addClass('hidden');
            toLoadQuestionList(url, display, $("#searchtxt").val(), questionType, questionCate, eid,preSelectedDiffLevel,preSelectedLabel, function (data) {

                var tmpl = $("#question_item_tmpl_new").text();
                var questiontypes = window.YKS.questiontypes;

                if (data.questions.length < 1) {
                    $(".question-list").html(window.OELang.noRecordMatched);
                    $(".paginations").html('');
                    return;
                }

                var indexStart = data.start, questionsCount = data.total;
                var qhtml = data.questions.map(function (q) {
                    ++indexStart;
                    var qid = q.q.qid, details = q.details, question = q.question,itemData = q.q.itemData;

                    return tmpl.format(qid, itemData.qtype, Number(itemData.catid),"briefview",questionsCount,indexStart,question,details,Number(itemData.score));
                }).join("");

                $(".question-list").html(qhtml);
                if(!iscn){
                    window.YKSQuestion.selectLang("en-gb");
                }
                $('.question-list').find('.regular-ques').each(function () {
                    window.YKSQuestion.render($(this));
                });
                // if(MathJax) MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
                checkQuestionsInExam();
                $(".paginations").removeClass('hidden');
                $(".paginations").html(data.pages);
            });

            $("#addQuestionContent").removeClass("hidden");
        }
        function onAddQuestionsToExam(e){
            e.preventDefault();
            var self = $(this);


            var section = self.parents('div.section');
            if(section.length == 1){
                $('input[name="currentAddQuestionsSection"]').val(section.attr('sectionid'));
            }else{
                $('input[name="currentAddQuestionsSection"]').val(0);
            }
            var ddd = $('input[name="currentAddQuestionsSection"]').val();
            var w = window.innerWidth*0.9,
                h = window.innerHeight*0.9;



            box = box || new jBox('Modal', {
                id:"addQuestionContentBox",
                content: $("#addQuestionContent"),
                maxWidth: 1300,
                maxHeight: 900,
                width: w,
                height: h,
                fixed: true,
                onCloseComplete: function () {
                    // box.destroy();
                },
                onCreated: function () {
                    loadQuestionList(null);
                    $("#newQuestionFrame").attr("width", Math.min(w, 1300)-60).attr("height", h - 124);
                    $("#importQuestionFrame").attr("width", Math.min(w, 1300)-60).attr("height", h-124);



                    //设置左边分类管理页面高度
                    $(".categories-panel").css("max-height",Math.min(h, 900)-130);
                    $(".categories-panel #categories-tree").css("height", Math.min(h, 1300)-206);

                    $.setupCategoryPanelDragable();
                    $("#categories-tree").perfectScrollbar({});//滚动条


                    $("#addQuestionContent .question-list").css("height",Math.min(h, 900)-200);

                    $("#addQuestionContentBox").on('click','.select-check-all',function(e){
                        var checked = false;
                        if ($(this).hasClass("checked")) {
                            $(this).removeClass("checked");
                            checked = false;
                        } else {
                            $(this).addClass("checked");
                            checked = true;
                        }
                        var target = $(this).parents('.questions-panel').find('.question-list');
                        $(target).find('.question-box').each(function(index,el){
                            var item = $(this);
                            selectItem($(this), checked)

                        })
                        // if (checked) {
                        //     selectItem($(this), true)
                        // } else {
                        //     selectItem($(this), false)
                        // }
                    })

                },
                onOpen:function(){
                    checkQuestionsInExam();
                }
            });
            box.toggle();
        }
        function selectItem(item, isSelected) {
            var self = item;
            var target = self.find("span.check-mark");
            var offset = target.offset();
            var currentAddQuestionsSection = $('input[name="currentAddQuestionsSection"]').val();
            var operatingI = $('<i class="fa fa-spinner fa-spin fa-2x"></i>');

            if (self.hasClass("active")) {
                if (isSelected) return;
                self.find("span.check-mark").append(operatingI);
                var checkmark = self.find("span.check-mark"), checkEl = self.find('.pre-select-check');
                checkmark.removeClass("checked");
                checkEl.css('color', "#bbb");
                removeQuestionFromTable(self.attr("qid"), function (qid) {
                    self.removeClass("active");
                    operatingI.remove();
                    updateQuestionsCount();

                    updateExamInfo(iscn);

                });
            } else {
                if (!isSelected) return;
                self.find("span.check-mark").append(operatingI);
                self.addClass("pending");
                var data = {
                    eid: eid,
                    qid: self.attr("qid"),
                    sectionId: currentAddQuestionsSection
                };
                data[token] = 1;
                $.ajax({
                    url: window.YKS.addSectionQuestion,
                    data: data
                }).done(function (resp) {
                    self.removeClass("pending");
                    operatingI.remove();
                    resp = $.parseJSON(resp);

                    if (resp.status == "ok") {
                        self.addClass("active");
                        var checkmark = self.find("span.check-mark"), checkEl = self.find('.pre-select-check');
                        checkmark.addClass("checked");
                        checkEl.css('color', "#36aafd");
                        var score = Number(self.attr("score"));

                        var currentSectionId = $('input[name="currentAddQuestionsSection"]').val();
                        var currentSection = null;
                        if (currentSectionId > 0) {
                            currentSection = $('#qs-pre-select div.section[sectionid="{0}"]'.format(currentSectionId));
                        }

                        addJSQuestionToTable(currentSection, null, self.attr("catid"), self.attr("qid"), self.attr("qtid"), "briefview", resp.question, resp.details, score, null, 0);
                        // addQuestionToTable(t, cate, self.attr("qid"), self.attr("qtid"), self.attr("catid"), qtype, score);


                    } else {
                        alert(resp.error);
                    }
                }).fail(function (e) {
                    alert(window.OELang.rePloginlease);
                })
            }
        }
        function checkQuestionsInExam(){
            var qids = [];
            $('#qs-pre-select').find('tr').each(function(index,value){
                qids.push(Number($(this).attr("qid"))) ;
            })
            $("#tab-select-questions-from-bank .question-list").find('div.question-box').each(function(index,value){
                var self = $(this);
                var thisQid = Number(self.attr("qid"));
                var checkEl = self.find('.pre-select-check');
                if($.inArray(thisQid,qids) >= 0){
                    if(!self.hasClass('active')){
                        self.addClass("active");
                        var checkmark = self.find("span.check-mark");
                        checkmark.addClass("checked");
                        checkEl.css('color',"#36aafd");
                    }
                }else{
                    if(self.hasClass('active')){
                        self.removeClass("active");
                        var checkmark = self.find("span.check-mark");
                        checkmark.removeClass("checked");
                        checkEl.css('color',"#bbb");
                    }
                }
            })
        }
        //添加部分
        function onAddSectionToExam(e){
            e.preventDefault();
            var target = e.target;
            NW.makeLoading(target);
            var url = window.YKS.addSection;
            var data = {
                eid:eid
            }
            data[token] = 1;
            $.post(url,data).done(function(rdata){
                rdata = $.parseJSON(rdata);
                if(rdata.status = "ok"){
                    var sectionInfo = rdata.section;
                    addSectionToExam(sectionInfo);
                    updateExamInfo(iscn);
                    var sectionObj = $('#qs-pre-select div.section[sectionid="{0}"]'.format(sectionInfo.id));
                    scrollToTarget(sectionObj);
                    $(document).find('div.section[sectionid="{0}"]'.format(sectionInfo.id)).find('#questions-list').each(function(index,el){
                        Sortable.create(el, {
                            animation: 150,
                            onUpdate:onSortUpdated,
                            filter:preSortableFilter
                        });
                    })

                }
                NW.makeUnLoading(target);
            })
        }
        function addSectionToExam(sectionInfo){
            var sectionTitle = sectionInfo.title;
            if(sectionTitle == ""){
                sectionTitle = window.OELang.sectionTitle;
            }
            var sectionItemTmpl = $('#sectionItemTmpl').html().format(sectionInfo.name,"section_{0}_title".format(sectionInfo.id),sectionTitle,sectionInfo.id);
            $(sectionItemTmpl).appendTo('#questionsListForm .table-responsive');
            NW.buildCheck($('#questionsListForm div.section[sectionid="{0}"]'.format(sectionInfo.id)));
        }

        //删除部分
        function onDeleteSection(e){
            e.preventDefault();
            var target = e.target;
            var sectionId = $(e.target).parents('div.section').attr('sectionid');//多个
            if(($('#qs-pre-select div.section').length - sectionId.length) <= 0 ){
                NW.messageBox(window.OELang.notice,window.OELang.keepOnePartAtLeast);
                return false;
            }

            NW.showCustomConfirmDialog(window.OELang.deletePart,window.OELang._delete,window.OELang.cancel,window.OELang.whetherToDeleteSection,function(resp){
                if(resp == "yes"){
                    var deleteBtn = $(this);
                    NW.makeUnLoading(deleteBtn);
                    var url = window.YKS.deleteSection;
                    var data = {
                        eid:eid,
                        eType:0,
                        sectionId:sectionId
                    }
                    data[token] = 1;
                    $.post(url,data).done(function(rdata){
                        rdata = $.parseJSON(rdata);
                        if(rdata.status = "ok"){
                            deleteSection(sectionId);
                            updateExamInfo(iscn);
                        }else{
                            alert(rdata.msg);
                        }
                        NW.makeUnLoading(deleteBtn);
                    })
                }
            })

        }
        function deleteSection(sectionIds){
            if(!Array.isArray(sectionIds)) sectionIds = sectionIds.split(',');
            $.each(sectionIds,function(index,section){
                var id = section;
                var sectionEl = $('#qs-pre-select div.section[sectionid="{0}"]'.format(id));
                $(sectionEl).remove();
            })
            $('#qs-pre-select').find('div.section').each(function(index,element){
                $(this).find('label.section-name').text(window.OELang.examQuestions.sectionN.format(NumberToChinese(++index)));
            })

        }

        function onMovePreSectionUpAndDown(e){
            e.preventDefault();
            var target = e.target, type = 0;
            //type=1上移，0下移
            if($(target).hasClass('move-up')){
                type = 1;
            }
            var currentSection = $(e.target).parents('div.section');
            var prevSection = currentSection.prev("div.section");
            var nextSection = currentSection.next("div.section");

            var labelSectionName = currentSection.find('label.section-name');
            if(type){
                if(prevSection.length > 0){
                    currentSection.insertBefore(prevSection);
                    scrollToTarget(currentSection);
                }
            }else{
                if(nextSection.length > 0){
                    currentSection.insertAfter(nextSection);
                    scrollToTarget(currentSection);
                }
            }
            $('#qs-pre-select').find('div.section').each(function(index,element){
                $(this).find('label.section-name').text(window.OELang.examQuestions.sectionN.format(NumberToChinese(++index)));
            })
        }
        function onSetRandomQuestion(e){
            e.preventDefault();
            var self = $(this);
            var randomQuestionInput = self.parents('.questions-options-choice-container').find('input[name="random_question"]');
            var box ,boxContent = $('#randomQuestionSettingBox').html();
            box = new jBox('Modal', {
                title:window.OELang.randomQuestionTitle,
                content:boxContent,
                maxWidth:610,
                onCreated:function(){
                    var value = Number(randomQuestionInput.attr('value')), typesEl, qtKeyValue = window.YKS.randomDefaultQuestiontypes;

                    if(randomQuestionInput.prop('checked')){
                        if(!value) {
                            // randomQuestionInput.attr('value',2);
                            value = 2;
                        }
                    }else{
                        // randomQuestionInput.attr('value',0);
                        value = 2;
                        $('.random-question-setting-box input#randomAdvance').attr("checked",'checked');
                    }

                    $('input[name="randomSetting"]').on('change',function(e){
                        var typeCheck = Number($("input[name='randomSetting']:checked").val());
                        if(typeCheck === 1){
                            $('.question-types-box').removeClass('show').addClass('hidden');
                        }else{
                            $('.question-types-box').removeClass('hidden').addClass('show');
                        }
                    })

                    if(value === 1){
                        $('.question-types-box').removeClass('show').addClass('hidden');
                        $('.random-question-setting-box input#randomNormal').attr("checked",'checked');
                    }else if(value === 2){
                        $('.question-types-box').removeClass('hidden').addClass('show');
                        $('.random-question-setting-box input#randomAdvance').attr("checked",'checked');

                        var types = randomQuestionInput.data('types');

                        if(types){
                            qtKeyValue = new Array();
                            types = types.split(',');
                            $.each(types,function(index,type){
                                window.YKS.questiontypes.map(function(qt){
                                    if(type == qt.qtid){
                                        var obj = {
                                            id:qt.qtid,
                                            label:qt.label
                                        };
                                        qtKeyValue.push(qt);
                                    }
                                })
                            });

                        }
                    }

                    typesEl = qtKeyValue.map(function(el){
                        return '<span class="q-type" qtype="{0}">{1}</span>'.format(el.qtid,el.label);
                    }).join("");
                    $('.random-question-setting-box').find('div.question-types').empty();
                    $('.random-question-setting-box').find('div.question-types').html(typesEl);

                    Sortable.create(document.getElementById("questionTypesOrder"), {
                        animation: 150
                    });

                    $('.random-question-setting-box').on('click','a.cancel',function(e){
                        box.close();
                    }).on('click','a.confirm',function(e){
                        var typeCheck = $("input[name='randomSetting']:checked").val();
                        if(!typeCheck) {
                            alert(window.OELang.pleaseSelectFirst);
                            return false;
                        }
                        randomQuestionInput.attr("value",typeCheck);
                        var typeValues = new Array();
                        $('#questionTypesOrder').find('span.q-type').each(function(index,element){
                            typeValues.push(Number($(this).attr("qtype")));
                        })
                        randomQuestionInput.data("types",typeValues.join(','));
                        randomQuestionInput.attr("checked",'checked');
                        box.close();
                    })
                },
                onCloseComplete:function(){
                    box.destroy();
                }
            })
            box.open();

        }


        //固定试题更换模式
        function onChangeMode(e){
            e.preventDefault();
            var self = $(this);
            NW.makeLoading(self);
            var type = self.data('type');
            var url = window.YKS.changeMode;
            var data = {
                eid:eid,
                eType:1
            }
            data[token] = 1;
            if(type){
                //高级切换标准模式
                $('input[name="mType"]').val(0);

                data["mType"] = 1;
                if( $('#qs-pre-select').find('div.section').length > 1 ){
                    NW.messageBox(window.OELang.notice,window.OELang.examQuestions.moveThenChange);
                    NW.makeUnLoading(self);
                    return false;
                }

                $.post(url,data).done(function(rdata){
                    NW.makeUnLoading(self);
                    rdata = $.parseJSON(rdata);
                    if(rdata.status == 'ok'){
                        changeModeStyle(type);//
                        var questionTable = $('#questionListTableTmpl').html();
                        $(questionTable).appendTo('#questionsListForm .table-responsive');
                        var questions = rdata.questions;

                        if(questions.length > 0){
                            $.each(questions,function(index,value){
                                var question = value.question,details=value.details;
                                var q = value.q;
                                var catid = q.itemData.catid,qtid = q.itemData.qtype,qid=q.qid,score=q.itemData.score, adt = q.itemData.adt;

                                addJSQuestionToTable(null,null,catid,qid,qtid,"briefview",question,details,score,null,adt);
                            })
                        }else{
                            updateExamInfo(iscn);
                        }
                        examBuildCheck();
                        Sortable.create(document.getElementById('questions-list'), {
                            animation: 150,
                            onUpdate:onSortUpdated,
                            filter:preSortableFilter
                        });
                        $('.operation-btn').jBox('Tooltip',{
                            theme: 'TooltipDark',
                            delayClose:1,
                            getContent:'title'
                        })
                    }
                })

            }else{
                //标准模式切换高级模式
                $('input[name="mType"]').val(1);

                data["mType"] = 0;
                $.post(url,data).done(function(rdata){
                    NW.makeUnLoading(self);
                    rdata = $.parseJSON(rdata);
                    if(rdata.status == 'ok'){
                        changeModeStyle(type);//
                        var sectionInfo = rdata.section;
                        //部分名字，部分titleId,部分title
                        var sectionName = window.OELang.examQuestions.sectionN.format(NumberToChinese(1));
                        var sectionTitle = sectionInfo.title;
                        if(sectionTitle == ""){
                            sectionTitle = window.OELang.sectionTitle;
                        }
                        var sectionItemTmpl = $('#sectionItemTmpl').html().format(sectionName,"section_{0}_title".format(1),sectionTitle,sectionInfo.id);
                        $(sectionItemTmpl).appendTo('#questionsListForm .table-responsive');
                        var questions = rdata.questions;
                        if(questions.length > 0){
                            $.each(questions,function(index,value){
                                var question = value.question,details=value.details;
                                var q = value.q;
                                var catid = q.itemData.catid,qtid = q.itemData.qtype,qid=q.qid,score=q.itemData.score, adt = q.itemData.adt;

                                var section = $('div.section[sectionid="{0}"]'.format(sectionInfo.id));
                                addJSQuestionToTable(section,null,catid,qid,qtid,"briefview",question,details,score,null,adt);
                            })
                        }else{
                            updateExamInfo(iscn);
                        }
                        examBuildCheck();
                        $(document).find('div.section #questions-list').each(function(index,el){
                            Sortable.create(el, {
                                animation: 150,
                                onUpdate:onSortUpdated,
                                filter:preSortableFilter
                            });
                        })
                        $('.operation-btn').jBox('Tooltip',{
                            theme: 'TooltipDark',
                            delayClose:1,
                            getContent:'title'
                        })
                    }
                })
            }
        }

        function changeModeStyle(type){
            if(type){
                //高级切换低级
                $('#qs-pre-select .btn-groups').removeClass('hidden').addClass('show');
                $('#qs-pre-select .pre-select-question-tips').removeClass('hidden').addClass('show');
                $('#qs-pre-select .pre-high-level-btn-groups').removeClass('show').addClass('hidden');

                $('#qs-pre-select div.section').remove();

                // NW.buildCheck($(".qts-pre-select-question"));
                if($('.qts-pre-select-question').find('div.section').length > 0){
                    NW.buildCheck($(".qts-pre-select-question div.section"));
                }else{
                    NW.buildCheck($(".qts-pre-select-question"));
                }
            }else{
                //固定试题 标准模式切换高级模式
                $('#qs-pre-select .btn-groups').removeClass('show').addClass('hidden');
                $('#qs-pre-select .pre-select-question-tips').removeClass('show').addClass('hidden');
                $('#qs-pre-select .pre-high-level-btn-groups').removeClass('hidden').addClass('show');

                //移除table
                $('#questionList').remove();

                // $(".qts-pre-select-question")

            }

        }

        function closeBox() {
            if(box){
                box.close();
            }
        }
        function onPaginationItemClick(e) {
            e.preventDefault();
            var _url = $(this).attr("href");
            if (_url.indexOf("javascript") > -1)
                return false;
            loadQuestionList(_url);
        }
        function addOrRemoveItem(item){
            var self = item;
            var target = self.find("span.check-mark");
            var offset = target.offset();
            var currentAddQuestionsSection = $('input[name="currentAddQuestionsSection"]').val();
            var operatingI = $('<i class="fa fa-spinner fa-spin fa-2x"></i>');
            self.find("span.check-mark").append(operatingI);
            if( self.hasClass("active") ) {
                var checkmark = self.find("span.check-mark"), checkEl = self.find('.pre-select-check');
                checkmark.removeClass("checked");
                checkEl.css('color',"#bbb");
                removeQuestionFromTable( self.attr("qid"), function (qid) {
                    self.removeClass("active");
                    operatingI.remove();
                    updateQuestionsCount();

                    updateExamInfo(iscn);



                    new jBox('Notice', {
                        content: window.OELang.examQuestions.removedQuestionFromExam,
                        attributes: {
                            x: 'left',
                            y: 'top'
                        },position: {
                            x: offset.left-100,
                            y: offset.top + 64
                        },
                        autoClose: 1500,
                        color: 'green',
                        target: target
                    });
                });
            } else {
                self.addClass("pending");
                var data = {
                    eid: eid,
                    qid: self.attr("qid"),
                    sectionId:currentAddQuestionsSection
                };
                data[token] = 1;
                $.ajax({
                    url: window.YKS.addSectionQuestion,
                    data: data
                }).done(function (resp) {
                    self.removeClass("pending");
                    operatingI.remove();
                    resp = $.parseJSON(resp);

                    if ( resp.status == "ok" ) {
                        self.addClass("active");
                        var checkmark = self.find("span.check-mark"), checkEl = self.find('.pre-select-check');
                        checkmark.addClass("checked");
                        checkEl.css('color',"#36aafd");
                        var score = Number(self.attr("score"));

                        var currentSectionId = $('input[name="currentAddQuestionsSection"]').val();
                        var currentSection = null;
                        if(currentSectionId > 0 ){
                            currentSection = $('#qs-pre-select div.section[sectionid="{0}"]'.format(currentSectionId));
                        }

                        addJSQuestionToTable(currentSection,null,self.attr("catid"),self.attr("qid"),self.attr("qtid"),"briefview",resp.question,resp.details,score,null,0);
                        // addQuestionToTable(t, cate, self.attr("qid"), self.attr("qtid"), self.attr("catid"), qtype, score);

                        new jBox('Notice', {
                            content: window.OELang.examQuestions.questionAddedToExam,
                            attributes: {
                                x: 'left',
                                y: 'top'
                            },
                            position: {
                                x: offset.left-100,
                                y: offset.top + 64
                            },
                            autoClose: 1500,
                            color: 'green',
                            target: target
                        });
                    } else {
                        alert(resp.error);
                    }
                }).fail(function(e){
                    alert( window.OELang.rePloginlease );
                })
            }
        }
        function onQuestionItemClick(e) {
            var item = $(this);
            addOrRemoveItem(item);
        }
        //---手动选题end---

        //---随机选择试题---
        //随机选择试题调整分类试题数事件

        $(".preslect-random-from-bank").on("change", "span.qts-count input", function () {
            var max = $(this).attr("max"),
                value = parseInt($(this).val());
            if(value > max) $(this).val(max);
            if(value < 0) $(this).val(0);

            var currentList = $(this).parents(".qt-counts-list");
            if(currentList.length > 0){
                var count = currentList.find("span.qts-count input").map(function(){
                    return $(this).val();
                }).get().reduce(function(acc,v){
                    return Number(acc) + Number(v);
                });

                var catid = currentList.attr("id").replace("catid_", "");
                var pLi = $("#at-sel-qs-cs-ls").find("li[data-catid='" + catid + "']");
                pLi.find("span.qts-count.first").find("strong").html(count);
                updateCategroyItemFromQuestionType(currentList);
            }else{
                var ci = $(this),
                    pLi = ci.parents("li"),
                    si = pLi.find('span.qts-score.first input'),
                    catid = pLi.data("catid"),
                    counts = ci.val(),
                    score = si.val(),
                    qtCounts = [];
                saveCategoryItemData(catid, counts, score, qtCounts);
            }
        }).on('change', 'span.qts-score input', function (e) {
            var si = $(this);
            if(si.val() <= 0){
                si.val(1);
            }
            var currentList = si.parents(".qt-counts-list");
            if (currentList.length > 0) {
                updateCategroyItemFromQuestionType(currentList);
            } else {
                var pLi = si.parents('li'),
                    catid = pLi.data('catid'),
                    ci = pLi.find('span.qts-count.first input'),
                    count = Number(ci.val()) > 0 ? Number(ci.val()) : 0,
                    score = Number(si.val()) > 0 ? Number(si.val()) : 1,
                    qtCounts = [];
                saveCategoryItemData(catid, count, score, qtCounts);
            }
        }).on("click", "i.fa-trash", function (e) {
            var pLi = $(this).parents("li"),
                catid = pLi.data("catid");
            // $(".available-categories").find("li[data-catid='"+catid+"']").removeClass("selected");
            pLi.fadeOut(800, function() {
                pLi.remove();
                if($("#at-sel-qs-cs-ls li").length<=0){
                    $(".questions-select-tip").removeClass("got");
                }
                updateScore();
            });
        });
        function updateCategroyItemFromQuestionType(qtCountsList){
            var qtCountsList = $(qtCountsList);
            var qtCounts = [], counts = 0;
            qtCountsList.find("div.question-type-item").map(function () {
                var item = $(this),
                    ci = item.find('span.qts-count input'),
                    si = item.find('span.qts-score input'),
                    qtid = ci.data('qtid'),
                    qtc = Number(ci.val()),
                    qts = Number(si.val());
                counts += qtc;
                qtCounts.push({
                    qtid: qtid,
                    count: qtc,
                    score: qts
                })
            });

            var catid = qtCountsList.attr("id").replace("catid_", "");
            saveCategoryItemData(catid, counts, 1, qtCounts);
        }
        function saveCategoryItemData(catid, itemTotal, itemScore, qtCounts) {
            var pLi = $("#at-sel-qs-cs-ls").find("li[data-catid='"+catid+"']");
            var data = {
                count: itemTotal,
                score: itemScore,
                qtCounts: qtCounts
            }
            pLi.data("selected-data", JSON.stringify(data));
            pLi.data("counts", itemTotal);
            pLi.data('score', itemScore);
            updateTotal(calculateTotal());
            updateScore();
            showQuestionTypeCounts(pLi, qtCounts);
        }
        function showQuestionTypeCounts(pLi, qtCounts) {
            if(qtCounts&&qtCounts.length>0){
                var qtLists = pLi.find("span.qt-lists");
                var qtKeyValue = {};
                window.YKS.questiontypes.map(function(qt){
                    qtKeyValue[qt.qtid] = qt;
                })


                if(qtLists.length==0){
                    qtLists = $("<span class='qt-lists'></span>").insertBefore(pLi.children("span:last"));
                }
                var content = qtCounts.map(function(v){
                    var qtid = v.qtid,
                        counts = v.count;
                    if(counts<=0) return "";
                    var colors = [
                        'badge-default',
                        'badge-primary',
                        'badge-info',
                        'badge-success',
                        'badge-danger',
                        'badge-warning'
                    ]
                    return "<b class='badge {2}'>{0} {1}</b>".format(qtKeyValue[qtid].label, counts, colors[qtid%colors.length]);
                }).join(" ");
                qtLists.html(content);
            }else{
                pLi.find("span.qt-lists").remove();
            }
        }
        //更新固定试卷随机抽题总分
        function updateScore() {
            var totalScore = 0;
            var categories = $('#at-sel-qs-cs-ls li');
            for (var i = 0; i < categories.length; i++) {
                var obj = $(categories[i]);
                // var str = obj.data('selected-data');
                if (obj.data('selected-data') == undefined) {
                    continue;
                }
                var seledData = typeof obj.data('selected-data') == 'string' ? JSON.parse(obj.data('selected-data')) : obj.data('selected-data');
                var categoryScore = 0;
                if (seledData.qtCounts.length > 0) {
                    for (var j = 0; j < seledData.qtCounts.length; j++) {
                        var obj1 = seledData.qtCounts[j];
                        categoryScore += Number(obj1.count) * Number(obj1.score);
                    }
                } else {
                    categoryScore = Number(seledData.count) * Number(seledData.score);
                }
                obj.find('span.category-total-score').html(window.OELang.totalNScore.format('<b>' + (categoryScore.isInteger() ? categoryScore : categoryScore.toFixed(1)) + '</b>'));
                totalScore += categoryScore;
            }
            updateTotal(calculateTotal());
            $(".qts-counts-tip").find('span.exam-total-score').html(window.OELang.totalNScore.format('<b>' + (totalScore.isInteger() ? totalScore : totalScore.toFixed(1)) + '</b>'));
        }
        function updateTotal(total){
            var categories = $("#at-sel-qs-cs-ls li").length;
            $(".preslect-random-from-bank .qts-counts-tip").find('span.question-count').html(window.OELang.selectedncategory.format(categories, total));

            if(total>0){
                $("#select_random_submit").css('display','inline-block').removeClass("disabled");
            }else{
                $("#select_random_submit").css('display','none').addClass("disabled");
            }
        }
        function calculateTotal(){

            var sellics = $('#at-sel-qs-cs-ls li');
            var count = 0;
            if(sellics.length > 0){
                count = sellics.map(function () {
                    var count = $(this).data("counts");
                    return count ? Number(count) : 0;
                }).get().reduce(function (acc, v) {
                    return Number(acc) + Number(v);
                });
            }

            return count.isInteger() ? count : count.toFixed(1);
        }

        function getRandomSelectData(){

            var qcats = [], cateOrders={}, index = 0;
            var currentSectionId = $('input[name="currentAddQuestionsSection"]').val();
            $(".preslect-random-from-bank li").map(function(){
                var pLi = $(this);
                var selectedData = pLi.data("selected-data");
                if(selectedData){
                    if( typeof selectedData == "string"){
                        selectedData = $.parseJSON(selectedData);
                    }
                    qcats.push({
                        orders: index++,
                        sectionId:currentSectionId,
                        catid: pLi.data("catid"),
                        counts: selectedData.count,
                        score: selectedData.score ? selectedData.score : 1,
                        qtCounts: selectedData.qtCounts
                    })
                }
                cateOrders[pLi.data("catid")] = index++;
            })

            var postData = {
                eid: eid,
                "qcats": JSON.stringify(qcats)
            }
            postData[token] = 1;
            return postData;
        }
        function onSubmitRandomSelectQuestions(e) {
            e.preventDefault();

            var count = calculateTotal();

            if (count <= 0) {
                NW.messageBox(window.OELang.notice, window.OELang.examQuestions.specifyQuestionCount);
                return;
            }
            var originHTML = $(this).html();
            $(this).html(window.OELang.examQuestions.selectingQuestionsNow);
            var self = $(this);
            self.addClass("pending");
            self.attr("disabled", "disabled");

            $.ajax({
                url: window.YKS.addRandomSelectedSectionQuestions,
                type:"post",
                data: getRandomSelectData()
            }).done(function (resp) {
                resp = $.parseJSON(resp);
                self.removeClass("pending");
                self.removeAttr("disabled");
                if (resp.status == "ok") {
                    if(resp.questions.length < 1){
                        NW.messageBox(window.OELang.notice, window.OELang.examQuestions.selectedNoQuestions);
                        self.html(originHTML);
                        return;
                    }
                    var currentSectionId = $('input[name="currentAddQuestionsSection"]').val();
                    var currentSection = null;
                    if(currentSectionId > 0 ){
                        currentSection = $('#qs-pre-select div.section[sectionid="{0}"]'.format(currentSectionId));
                    }

                    var questiontypes = window.YKS.questiontypes,
                        qtidKeys={};

                    for (var i = 0; i < questiontypes.length; i++) {
                        var qtid = questiontypes[i].qtid+'';
                        qtidKeys[qtid] = questiontypes[i].label;
                    }

                    for (var i = 0; i < resp.questions.length; i++) {
                        var qData = resp.questions[i];
                            // label= qtidKeys[q.qtid];
                        var q = qData.q, question = qData.question, details = qData.details;
                        var catid = q.itemData.catid,qtid = q.itemData.qtid,qid=q.qid,score=Number(q.itemData.score);

                        addJSQuestionToTable(currentSection,null,catid, qid, qtid,"briefview",question,details,q.itemData.points,score,Number(q.itemData.adt));
                    }
                    box.close();

                    $(".qs-actions a").removeClass("disabled");
                } else {
                    NW.messageBox( window.OELang.notice, resp.error);
                }
                $(".preslect-random-from-bank .qts-counts-tip").find('span.question-count').html(window.OELang.selectedncategory.format(0, 0));
                $(".preslect-random-from-bank .qts-counts-tip").find('span.exam-total-score').html(window.OELang.totalNScore.format('<b>' + (0) + '</b>'));
                $(".preslect-random-from-bank .questions-select-tip").removeClass("got");
                $("#at-sel-qs-cs-ls").empty();
                self.html(window.OELang.sure)
            });
        }
        updateTotal(calculateTotal());
        //---随机选题end---

        //---排序和设置为附加题---
        function onFilterQuestionType(e) {
            e.preventDefault();
            questionType = $('select#preQuestionBankQtype').find("option:selected").val();
            loadQuestionList(null);
            return false;
        }
        function onFilterQuestionDiffLevel(e){
            e.preventDefault();
            preSelectedDiffLevel = Number($('select#preDifficultSelect').find("option:selected").val());
            loadQuestionList(null);
            return false;
        }

        function onQuestionAdditionAction( e ){
            e.preventDefault();
            var action = $(this).attr("action");
            var self = $(this);
            var qid = $(this).parents("tr").attr("qid");
            var postData = {
                qid: qid,
                eid: eid,
                addition: action=="addition"?1:0
            }
            postData[token] = 1;

            $.post( window.YKS.changeAddition, postData).done(function(data){
                data = $.parseJSON(data);
                if( data.status == "ok" ){
                    self.attr("action", action=="addition"?"nonaddition":"addition");
                    self.attr('title',action=="addition"?window.OELang.examQuestions.cancelAddition:window.OELang.examQuestions.setAddition)
                    if(action == "addition" ){
                        // self.parents("tr").find("td:eq(1)").find("a").after("<span class='label label-success'>"+window.OELang.examQuestions.additionQuestion+"</span>")
                        self.parents('tr').find('.row-ques-detail').find('span.label.label-success').remove();
                        var additionLabel = '<span class="label label-success" title="{0}">'+
                            '[{1}]'+
                            '</span>';
                        self.parents('tr').find('.row-ques-detail').find('.ques-title span.ques-type.ques-single').after(additionLabel.format(window.OELang.additionalIntroduction,window.OELang.examQuestions.additionQuestion));
                        self.addClass('addition-color');
                    }else{
                        self.parents('tr').find('.row-ques-detail').find('span.label.label-success').remove();
                        // self.parents("tr").find("td:eq(1)").find("span").remove();
                        self.removeClass('addition-color');
                    }
                    self.blur();
                    $(self).jBox('Tooltip',{
                        theme: 'TooltipDark',
                        delayClose:1,
                        getContent:'title'
                    })
                }else{
                    Metronic.alert({
                        type: 'danger',
                        icon: 'error',
                        message: window.OELang.examQuestions.changeAdditionFailed,
                        container: $(".qts-pre-select-question"),
                        place: 'prepend'
                    });
                }
            }).fail(function(data){
                Metronic.alert({
                    type: 'danger',
                    icon: 'error',
                    message: window.OELang.examQuestions.changeAdditionFailed,
                    container: $(".qts-pre-select-question"),
                    place: 'prepend'
                });
            })
        }

        function updateSocre() {
            var s = 0;
            $("td.score").each(function(index, element){
                var score = Number($(element).data("score")),
                    qscore = Number($(element).data("qscore"));
                s += score<0?qscore:score;
            });
            $("span.totalscore b").html(s);
        }

        //修改试题分数
        $('#questionList').on('click', 'a[href="#chscore"]', function (e) {
            e = e || window.event;
            e.preventDefault();
            e.stopPropagation();
            var $a = $(e.target);
            var $tr = $a.parents('tr');
            var $td = $tr.find('td.score');
            if ($td.find('input').length > 0) return;
            var score = Number($td.data('score')), qscore = Number($td.data('qscore'));
            var $input = $('<input type="number" step="0.1">');
            $input.css('width', $td.width());
            $input.css('height', $td.height());
            $input.val(score > 0 ? score : qscore);
            $input.on('blur', function (e) {
                var s = Number($input.val());
                $td.data('score', s);
                $td.empty();
                $td.text(s > 0 ? s : qscore);
                updateSocre();
                $('a[href="#save"]').removeAttr('disabled').removeClass('disabled');
            });
            $td.empty();
            $td.append($input);
            //修复firefox浏览器获取焦点无效问题
            setTimeout(function (e) {
                $input.focus();
            }, 100);
        });

        function DeleteQuestions(qids, callback) {
            var randl = 0;
            var randr = 0;
            var dialog = NW.showDialog( '<div id="dq-sure-click" class="text-center" style="min-height:80px"><span class="delete-questions-warn-img text-center"><b>i</b></span><div>{0}</div></div>'.format(window.OELang.sureToDeleteNQuestions.format(qids.length)), [
                {
                    label: window.OELang.deleteBothQuestionBank,
                    id:'d-q-delete-bank',
                    onClick: function () {
                        if($("input[name='vResult']") && $("input[name='vResult']").length > 0){
                            if( Number( $("input[name='vResult']").val() ) != Number( randl + randr ) ){
                                $('.verify').find('i').remove();
                                $("input[name='vResult']").after('<i class="fa fa-times" aria-hidden="true" style="color:red"></i>')
                                return;
                            }
                            $('.verify').find('i').remove();
                            var btn = $(this);
                            dialog.disable(true);
                            NW.makeLoading(btn);
                            removeQuestionFromTable(qids, function(qids){
                                NW.makeUnLoading(btn);
                                dialog.disable(false);
                                dialog.close();
                                updateExamInfo(iscn);
                                callback(true);
                            }, true);
                        }else{
                            randl = parseInt(Math.random() * (50 - 11 + 1) + 11);
                            randr = parseInt(Math.random() * (10 - 1 + 1) + 1);
                            var verifyContent = '<p>'+ randl +'+'+ randr + '=?</p>';
                            var tmpl = '<div class="verify" style="margin-bottom: 10px;">'+
                                verifyContent+
                                '<span>'+window.OELang.verifyQuestionDeletedTips+'</span>'+
                                '<span><input type="text" name="vResult" id="vResult" style="width: 100px;"></span>'+
                                '</div>'
                            $('#dq-sure-click').html(tmpl);
                        }

                    }
                },
                {
                    label: window.OELang.cancel,
                    id:'d-q-cancel',
                    cls:['yks-blue-default'],
                    onClick: function () {
                        dialog.close();
                        callback(false);
                    }
                },
                {
                    label: window.OELang._delete,
                    id:'d-q-delete',
                    primary: true,
                    cls:['yks-blue'],
                    onClick: function () {
                        var btn = $(this);
                        dialog.disable(true);
                        NW.makeLoading(btn);
                        removeQuestionFromTable(qids, function(qids){
                            NW.makeUnLoading(btn);
                            dialog.disable(false);
                            dialog.close();
                            updateExamInfo(iscn);
                            callback(true);
                        }, false);
                    }
                }

            ], window.OELang.notice, {
                minWidth: 400,
                id:"delete-questions-box"
            });
            dialog.disable = function(disabled){
                $("#d-q-cancel, #d-q-delete, #d-q-delete-bank").prop("disabled", disabled?"disabled":"");
            }
        }

        function deleteQuestions(e){
            e.preventDefault();
            var btn = $(this), targetEls;
            var sectionEl = $(btn).parents('div.section');
            if(sectionEl.length > 0){
                targetEls = sectionEl.find("#questions-list .checked");
            }else{
                targetEls = $("#questions-list .checked");
            }

            if ($(targetEls).length < 1) {
                NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }

            var vals = $.makeArray($(targetEls)).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function (value) {
                return value > 0;
            });


            DeleteQuestions(vals, function(){
                var section = null,total = 0;
                if(sectionEl.length > 0){
                    section = sectionEl;
                    total = $(section).find('#questionList').find('tr[qid]').length;
                }else{
                    total = $('#questionsListForm').find('tr[qid]').length;
                }
                updateQuestionIndex(total,section);
            });
        }

        //删除固定试卷单个试题
        function deleteOneQuestion(e){
            e.preventDefault();
            var vals = [];
            vals.push($(this).attr('qid'));
            var self = $(this);

            DeleteQuestions(vals, function(){
                var sectionEl = $(self).find('div.section'), section = null,total = 0;
                if(sectionEl.length > 0){
                    section = sectionEl;
                    total = $(section).find('#questionList').find('tr[qid]').length;
                }else{
                    total = $('#questionsListForm').find('tr[qid]').length;
                }
                updateQuestionIndex(total,section);
            });
        }



        function changeScore(e){
            e.preventDefault();

            var btn = $(this);
            var section = $(btn).parents('div.section');
            var checkedEl = $("#questions-list .checked");
            if( section.length > 0){
                checkedEl = $('#qs-pre-select div.section[sectionid="{0}"] #questions-list .checked'.format(section.attr("sectionid")));
            }

            if ($(checkedEl).length < 1) {
                NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }

            var tmpl = '<div class="changescore">' +
                '<div class="form-group">' +
                '   <label>{1}, {0}</label>' +
                '   <input class="form-control" type="number" value="1"> ' +
                '</div>' +
                '</div>';
            tmpl = tmpl.format(window.OELang.examQuestions.changeScore,window.OELang.checkedQuestions.format($(checkedEl).length));

            var dialog = NW.showDialog(tmpl, [
                {
                    label: window.OELang.cancel,
                    onClick: function () {
                        dialog.close();
                    }
                },
                {
                    label: window.OELang.examQuestions.changeScore,
                    cls:['yks-blue'],
                    onClick: function () {
                        if($(".changescore input").val()==''){
                            $(".changescore input").focus();
                            return;
                        }

                        var score =  $(".changescore input").val();
                        $(checkedEl).parents("tr").find("td.score").data("score", score);
                        $(checkedEl).parents("tr").find(".row-ques-detail span.ques-score").text("{0}{1}".format(score,window.OELang.point));
                        updateSocre();
                        updateExamInfo(iscn);
                        dialog.close();
                    }
                },
            ], window.OELang.examQuestions.changeScore)
        }

        function onEditQuestion(e){
            e.preventDefault();

            var tr = $(this).parents("tr");
            var qid = tr.attr("qid");
            var sectionEl = $(tr).parents('div.section'), section = null;
            if(sectionEl.length > 0){
                section = sectionEl;
            }

            EditQuestion(qid, function(qid, qtitle, qcate, points){
                /***
                var tr = $("#questionList tr[qid={0}]".format(qid));
                if(qtitle) tr.find("td:eq(2)").find("a").html(qtitle);
                if(qcate)  tr.find("td:eq(3)").html(qcate);

                var td = tr.find("td:eq(5)");
                td.data('qscore', points);
                if(Number(td.data('score')) <0){
                    if(points)  td.html(points);
                    updateSocre();
                }

                */
                var data = {
                    qid:qid
                }
                data[token] = 1;
                // var tr = $("#questionList tr[qid={0}]".format(qid));
                $.post(window.YKS.getJSQuestion,data).done(function(rdata){
                    rdata = data = $.parseJSON(rdata);
                    if(rdata.status == "ok"){

                        var question = rdata.question;
                        var details = rdata.details;
                        var q = rdata.q;
                        var catid = q.itemData.catid,qtid = q.itemData.qtid;

                        addJSQuestionToTable(section,tr,catid, qid, qtid,"briefview",question,details,points,q.itemData.score,Number(q.itemData.adt))

                        var td = tr.find("td.score");
                        td.data('qscore', points);
                        if(Number(td.data('score')) <0){
                            updateSocre();
                        }

                    }
                })

            });
        }

        //---分类选择窗口---
        var onChooseCategories1 = function () {
            var treeWindow = $('#categories-tree-3');
            var confirmBtn = treeWindow.find('button[name="confirm"]');
            var treeEl = treeWindow.find('div[name="categories-tree"]');
            var searchEl = treeWindow.find('input[name="categories-search-input"]');
            var tagsInputEl;
            var jbox, treeInst, selCats, catType = 2;
            function getTreeOptions(){
                var treeOptions = {
                    core: {
                        multiple: true,
                        check_callback: false,
                        data: {
                            type: 'post',
                            dataType: 'json',
                            url: window.YKS.loadCategoriesContentCount,
                            data: function (node) {
                                var data = {
                                    type: catType,
                                    eType: 0,
                                    eid: eid
                                };
                                data[token] = 1;
                                if (node.id === '#') {
                                    data.cats = [{id: -1, text: window.OELang.allQuestions, li_attr: {catid: -1, title: window.OELang.allQuestions}},
                                        {id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}}];
                                } else {
                                    data.catid = node.id;
                                }
                                return data;
                            }
                        }
                    },
                    plugins: ['checkbox']
                };
                return treeOptions;
            }

            var treeOptions;

            function destroyTreeInstAndJbox(){
                if(treeInst){
                    treeInst.destroy();
                }
                if(jbox){
                    jbox.destroy();
                }
                jbox = "";treeInst="";

                tagsInputEl = treeWindow.find('input[name="tagsinput"]');
                treeOptions = getTreeOptions();
            }

            return function (e) {
                var e = e || window.event;
                e.preventDefault();

                destroyTreeInstAndJbox();

                jbox = jbox || new jBox('Modal', {
                    title: window.OELang.pleaseSelectQuestionCategory,
                    content: treeWindow,
                    closeOnEsc: false,
                    closeButton: 'title',
                    width: 620,
                    zIndex: 99999,
                    onCreated: function () {
                        treeInst = treeInst || createCategoryTree(treeEl, searchEl, null, treeOptions, catType, token);

                        tagsInputEl.tagsinput({
                            itemValue: function (item) {
                                return item.li_attr.catid;
                            },
                            itemText: function (item) {
                                return item.li_attr.title;
                            },
                            trimValue: true,
                            allowDuplicates: true
                        });
                        treeWindow.find('.bootstrap-tagsinput').off('click', treeWindow.find('.bootstrap-tagsinput'));
                        treeWindow.find('.bootstrap-tagsinput').children('input').attr('readonly', 'readonly');
                        tagsInputEl.on('itemRemoved', function(event) {
                            if (event.item != null) {
                                treeInst.deselect_node(treeInst.get_node(event.item.id));
                            }
                        });
                        treeEl.on('changed.jstree', function (e, data) {
                            var selIds = treeInst.get_selected().map(function(id){return Number(id)});
                            if (selIds.length > 1) {
                                var node = data.node;
                                if (node.id == -1) {
                                    if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                        treeInst.deselect_all();
                                        treeInst.select_node(-1);
                                    } else {
                                        treeInst.deselect_node(-1);
                                    }
                                } else {
                                    if ($.inArray(-1, selIds) >= 0) {
                                        if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                            treeInst.deselect_node(-1);
                                        } else {
                                            treeInst.deselect_node(node.id);
                                        }
                                    }
                                }
                            }
                            tagsInputEl.tagsinput('removeAll');
                            selIds = treeInst.get_selected(true);
                            if (selIds.length > 0) {
                                for (var i = 0; i < selIds.length; i++) {
                                    var obj = selIds[i];
                                    tagsInputEl.tagsinput('add', obj);
                                }
                            }
                        });

                        treeWindow.on('click', 'button[name="confirm"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            selCats = treeInst.get_selected(true);
                            var selLiCats = $("#at-sel-qs-cs-ls li");
                            var arr1 = [], arr2 = [];
                            for (var i = 0; i < selCats.length; i++) {
                                var obj = selCats[i];
                                arr1[i] = Number(obj.id);
                            }
                            for (var i = 0; i < selLiCats.length; i++) {
                                var obj = $(selLiCats[i]);
                                arr2[i] = Number(obj.data('catid'));
                            }
                            for (var i = 0; i < selLiCats.length; i++) {
                                var obj = $(selLiCats[i]);
                                if ($.inArray(obj.data('catid'), arr1) == -1) {
                                    obj.remove();
                                }
                            }
                            for (var i = 0; i < selCats.length; i++) {
                                var obj = selCats[i];
                                if (i > 0 && (obj.id == -1 || obj.id == -1)) {
                                    continue;
                                } else if ($.inArray(Number(obj.id), arr2) == -1) {
                                    addCategoryToSeledCategoriesNew(obj);
                                }
                            }

                            jbox.close();
                        });
                        treeWindow.on('click', 'button[name="cancel"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            jbox.close();
                        });
                    },
                    onOpen: function () {
                        treeInst.clear_search();
                        searchEl.val('');

                        treeInst.deselect_all();
                        if (treeInst.is_loaded('#')) {
                            tagsInputEl.tagsinput('removeAll');
                            treeInst.select_node(selCats);
                        }
                    },
                    onCloseComplete:function(){
                        tagsInputEl.tagsinput('destroy');
                        jbox.destroy();
                    }
                });
                jbox.toggle();
            };
        }();

        $('#choose-category-1').on('click', onChooseCategories1);

        //---分类选择窗口end---

        function onClickSelectedCategory(e){
            var self = $(this),
                status = self.data('status') ? self.data('status') : 'closed',
                pLi = self.parents("li");
            var catid = pLi.data("catid");

            if(status === "closed"){
                self.data('status', 'open');
                var qcByC = pLi.data('qcbyc');
                var displayQcByC = function () {
                    var template = $("#qtc-template-old").text().trim(),
                        qtKeyValue = {};
                    template = '<div class="question-type-item">' + template +
                        '<span style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;</span>' +
                        '<span class="qts-score"><input type="number" class="form-control" style="display:inline-block; width:80px;" data-qtid="{5}" value="1" min="0" /></span>' +
                        '<span>&ensp;' + window.OELang.point + '</span>' +
                        '</div>';
                    window.YKS.questiontypes.map(function (qt) {
                        qtKeyValue[qt.qtid] = qt;
                    });
                    var content = ["<div style='padding-left: 28px;' class='qt-counts-list' id='catid_" + catid + "'>", qcByC.map(function (qc) {
                        var value = qc.hasOwnProperty('value') ? qc.value : 0;
                        return template.format(qtKeyValue[qc.qtid].label, qc.counts, value, qc.counts, qc.qtid, qc.qtid);
                    }).join(''), "</div>"].join('');
                    $(content).hide().appendTo(pLi).slideDown();
                    onShowQuestionType(pLi);
                };

                if(!qcByC){
                    self.find('i.fa-chevron-circle-down').removeClass("fa-chevron-circle-down").addClass("fa-spin fa-spinner");
                    $.get(window.YKS.getQuestionsCountByCategory, {catid: catid}).done(function(data){
                        data = $.parseJSON(data);
                        if(data.status === "ok"){
                            qcByC = data.questionsCount;
                            pLi.data('qcbyc', JSON.stringify(qcByC));
                            displayQcByC(qcByC);
                        }else{
                            alert(data.error);
                        }
                        self.find('i.fa-spinner').addClass("fa-chevron-circle-up").removeClass("fa-spin fa-spinner");
                    }).fail(function (e) {
                        self.find('i.fa-spinner').addClass("fa-chevron-circle-up").removeClass("fa-spin fa-spinner");
                        alert(window.OELang.noNetworkTip)
                    });
                }else{
                    qcByC = $.parseJSON(qcByC);
                    self.find('i.fa-chevron-circle-down').addClass("fa-chevron-circle-up").removeClass("fa-chevron-circle-down");
                    displayQcByC();
                }
            }else{
                var div = $("#at-sel-qs-cs-ls").find("div#catid_"+catid);
                div.slideUp(function () {
                    div.remove();
                });
                self.find('i.fa-chevron-circle-up').removeClass("fa-chevron-circle-up").addClass("fa-chevron-circle-down");
                $(this).data('status', 'closed');
                onHideQuestionType(pLi);
            }
        }
        function onShowQuestionType(pLi){
            var span1 = pLi.find("span.qts-count.first");
            span1.find("input").hide();
            var span2 = pLi.find('span.qts-score.first');
            span2.hide();
            var countsText = span1.find("strong");
            if(countsText.length<=0){
                countsText = $("<strong>0</strong>");
                span1.append(countsText);
            }

            var data = pLi.data("selected-data");
            if(data){
                if(typeof data == "string"){
                    data = $.parseJSON(data);
                }

                countsText.html(data.count);
                var qtCounts = data.qtCounts;
                if(qtCounts){
                    for(var i=0; i<qtCounts.length; i++){
                        var qt = qtCounts[i];
                        pLi.find("span.qts-count input[data-qtid='"+qt.qtid+"']").val(qt.count);
                        pLi.find('span.qts-score input[data-qtid="' + qt.qtid + '"]').val(qt.score ? qt.score : 1);
                    }
                }
            }
        }
        function onHideQuestionType(pLi){
            var span1 = pLi.find("span.qts-count.first");
            var span2 = pLi.find('span.qts-score.first');

            var data = pLi.data("selected-data");
            if(data) {
                if(typeof data == "string"){
                    data = $.parseJSON(data);
                }
                if(data.hasOwnProperty("count") && data.count > 0 && data.qtCounts.length>0){
                    return;
                }
            }

            span1.find("input").show().val(span1.find("strong").text()).css('display', 'inline-block');
            span2.show();
            span1.find("strong").remove();
        }

        function addCategoryToSeledCategories(obj) {
            var ul = $('#at-sel-qs-cs-ls');
            var li = $('<li data-catid="' + obj.id + '"></li>');
            var cnsp = $('<span class="qts-cate-name">' + obj.li_attr.title + '&ensp;</span>');
            var selsp = $('<span>' + window.OELang.select+ '&ensp;</span>');
            var ipsp = $('<span class="qts-count"></span>');
            var qssp = $('<span>&ensp;' + window.OELang.togetherQuestions + '</span>');
            var qsi = $('<i>(' + window.OELang.altogether + '&ensp;' + obj.li_attr.content_count + '&ensp;' + window.OELang.togetherQuestions + ')</i>');
            var input = $('<input class="form-control" style="display: inline-block; width: 80px;" type="number" value="0" min="0" max="' + obj.li_attr.content_count + '">');
            cnsp.append(qsi);
            ipsp.append(input);
            li.append(cnsp).append(selsp).append(ipsp).append(qssp);
            ul.append(li);
        }

        //-----------------------by lway start-----------------------
        function addCategoryToSeledCategoriesNew(item) {
            var temp = $('#qtc-template-old').text().trim();
            temp = ['<li data-catid = "' + item.li_attr.catid + '">', temp.format(item.li_attr.title, item.li_attr.content_count, 0, item.li_attr.content_count), '<span class="qts-score first" style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;<input type="number" class="form-control" style="display:inline-block; width:80px;" value="1" min="1">&ensp;' + window.OELang.point + '</span>', '<span class="qt-lists"></span>', '<span class="category-total-score" style="padding-left: 28px;">' + window.OELang.totalNScore.format('<b>0</b>') + '</span>', '</li>'].join('');
            content = $(temp).appendTo($("#at-sel-qs-cs-ls"));

            content.find("span.qts-cate-name").append($('<i class="fa fa-chevron-circle-down" title="'+window.OELang.viewqtcountofcate+'"></i>'));
            content.prepend($('<span><i class="fa fa-bars"></i><i class="fa fa-trash" title="'+window.OELang._delete+'"></i></span>'));
            content.find('span.qts-count').addClass('first');
            content.find('span.qts-cate-name').addClass('main');
            updateTotal(calculateTotal());
            updateScore();
            if($('#at-sel-qs-cs-ls li').length == 1){
                onClickSelectedCategory.call($('#at-sel-qs-cs-ls li').find('span.qts-cate-name'));
            }
            if($("#at-sel-qs-cs-ls li").length>0) $(".questions-select-tip").addClass("got");
        }

        $('#at-sel-qs-cs-ls').on('click', 'span.qts-cate-name.main', onClickSelectedCategory)
        //---------------------------by lway end-----------------------




        //-----------------------------------------------------------------------------
        $("#questionList").on("click", "a[action='remove']", onRemove);
        $("#qs-pre-select").on("click", "a[data-action='edit-question']", onEditQuestion);
        //process the questions ordrs.
        $(".order-questions").on("click", "a", onSortQuestions);
        $(".paginations").on("click", "a", onPaginationItemClick);
        $(".question-list").on("click", ".question-box", onQuestionItemClick);
        $("#select_random_submit").click(onSubmitRandomSelectQuestions);
        $("#preQuestionBankQtype").on("change", onFilterQuestionType);
        $("#preDifficultSelect").on("change", onFilterQuestionDiffLevel);
        // $(".question-bank-qcate").on("click", "a", onFilterQuestionCate);旧的手动选择试题分类选择点击侦听
        $("#qs-pre-select").on("click", "a[href='#addition']", onQuestionAdditionAction);

        $(".qts-pre-select-question").on("click", "a[href='#btnAddQuestion']", onAddQuestionsToExam);
        $(".qts-pre-select-question").on("click", "a[href='#deleteQuestions']", deleteQuestions);
        $(".qts-pre-select-question").on("click", "a[action='delete-question']", deleteOneQuestion);
        $(".qts-pre-select-question").on("click", "a[href='#changescore']", changeScore);
        $(".qts-pre-select-question").on('click','a[href="#btnAddSection"]',onAddSectionToExam);
        $(".qts-pre-select-question").on('click','a[href="#changeMode"]',onChangeMode);
        $(".qts-pre-select-question").on('click','a[href="#deleteSection"]',onDeleteSection);
        $(".qts-pre-select-question").on('click','#order-questions li',onSortQuestionsNew);
        $(".qts-pre-select-question").on('click','a.move-down',onMovePreSectionUpAndDown);
        $(".qts-pre-select-question").on('click','a.move-up',onMovePreSectionUpAndDown);
        $(".qts-pre-select-question").on('click','a.random-question-detail',onSetRandomQuestion);


        $(".qts-pre-select-question").on("change",'.questions-options-choice-container input[name="random_question"]',function(e){
            var self = $(this);
            var inputId = self.attr('id');
            var pDiv = self.parents('.questions-options-choice-container');
            var aLabel = $(pDiv).find('label[for="{0}"]'.format(inputId));
            if(self.prop('checked')){
                $(aLabel).removeClass('hde');
            }else{
                $(aLabel).addClass('hde');
            }
        })

        // categoriesWindow2(2, token);
        //Used to accept the child frame message to reload questions list after
        //close the add questions pop and added new question to the list.
        window.addJSQuestionToTable = addJSQuestionToTable;
        window.closeAddQuestionDialog = function () {
            closeBox();
            $("#importQuestionFrame").attr('src', $("#importQuestionFrame").attr("src"));
        };

        function examBuildCheck(){
            $('.qts-pre-select-question .checker').off("click");
            var sectionEls = $('.qts-pre-select-question').find('div.section');

            if(sectionEls.length > 0){

                sectionEls.each(function(index,value){
                    NW.buildCheck($(this));
                })

            }else{

                NW.buildCheck($(".qts-pre-select-question"));
            }
        }
        examBuildCheck();


        $("#searchtxt").keydown(function (e) {
            if (e.keyCode == 13) {
                loadQuestionList(null);
            }
        });


        initCategoriesManage(2, function(catid, type, search){
            questionCate = Number(jstree.get_selected());
            loadQuestionList(null);
            // ajaxLoad(catid, type, $.trim($('input[name="searchtxt"]').val()));
        }, token);
        var jstree = $.jstree.reference($('#categories-tree'));
        $('#preLabelSelect').on('select2:select', function (e) {
            var data = e.params.data;
            preSelectedLabel = Number(data.id);
            loadQuestionList(null);
        });

        $("#categories-tree").perfectScrollbar({});//滚动条
        $('#addQuestionContent').find("#preLabelSelect").select2({
            placeholder: window.OELang.search,
            width:100,
            language:{
                noResults:function(){
                    return window.OELang.noSearchResult;
                }
            }
        });

        updateExamInfo(iscn);
    }
    //更新随机试卷部分和总的分数
    function updateSectionCategoriesCountAndScore(iscn){
        var totalTime = 0, totalPoints = 0, totalQuestions = 0, totalSections = 0, totalQuestionTimeLimit = 0, totalSectionTimeLimit = 0;
        var randomSections = $('#qs-random-select .selected-categories').find('div.section');
        var qtKeyValue = {};
        var isShowRightQuestionType = true;//是否显示右边的各个题型的数量
        var noQuestionTipsPng = iscn ? "/components/com_exams/assets/img/no_question_tips.png" :"/components/com_exams/assets/img/no_question_tips_en.png";


        var examInfoPanel = $('.exam-info-panel');
        var examTimeEl = $(examInfoPanel).find('li.exam-time')
        var examTimeType = $(examTimeEl).data('type');

        window.YKS.questiontypes.map(function(qt){
            qt.count = 0;//各个题型的数量
            qtKeyValue[qt.qtid] = qt;
        })
        if(randomSections.length > 0){
            //部分模式
            $(randomSections).each(function (index,el) {
                var sectionId = $(this).attr('sectionid');
                var totalCounts = 0,sectionTotalPoints = 0,sectionLimitTime=0;
                var sectionLis = $(this).find('ul#selected-category-list li');
                if(sectionLis.length > 0){
                    $(this).removeClass('no-cate-item');
                    $(sectionLis).each(function(lIndex,sLi){
                        var selectedData = $(this).data('selected-data');
                        if(selectedData == undefined || selectedData.length <= 0){
                            return;
                        }
                        var selectDataParse = selectedData;
                        if(typeof selectedData != "object"){
                            selectDataParse = JSON.parse(selectedData);
                        }

                        var qtCounts = selectDataParse.qtCounts;
                        if(qtCounts && qtCounts.length>0){
                            var content = qtCounts.map(function(v){
                                var qtid = v.qtid, counts = v.count;
                                if(counts<=0) return "";
                                totalCounts += Number(counts);
                                sectionTotalPoints += counts*v.score;
                                qtKeyValue[qtid].count += counts;
                            });

                        }else{
                            isShowRightQuestionType = false;

                            totalCounts += Number(selectDataParse.count);
                            sectionTotalPoints += selectDataParse.count * selectDataParse.score;
                        }


                    })
                }else{
                    $(this).addClass('no-cate-item');
                }
                sectionTotalPoints = sectionTotalPoints.isInteger() ?  sectionTotalPoints : parseFloat(sectionTotalPoints.toFixed(2));
                //部分总试题数，部分试题总分
                $(el).find('.qts-counts-tip .question-count').html(window.OELang.randomQuestionsSelectedTips.format(totalCounts));
                $(el).find('.qts-counts-tip .exam-total-score').html(window.OELang.sectionTotalPoints.format(sectionTotalPoints))
                $(el).find('.qts-counts-tip .exam-section-time').html(window.OELang.sectionLimitTime.format(0))

                //各部分总时长
                var questionTimeLimit = $(this).find('.time-setting-btn').data('q-time');
                var sectionTimeLimit = $(this).find('.time-setting-btn').data('time');
                questionTimeLimit = questionTimeLimit == undefined ? 0 : Number(questionTimeLimit);
                sectionTimeLimit = sectionTimeLimit == undefined ? 30 : Number(sectionTimeLimit);
                if(questionTimeLimit > 0 ){
                    $(this).find('.exam-section-time').html(window.OELang.sectionQuestionLimited.format(questionTimeLimit));
                    totalQuestionTimeLimit += questionTimeLimit * totalCounts;
                }else{
                    $(this).find('.exam-section-time').html(window.OELang.sectionLimitTime.format(sectionTimeLimit));
                    totalSectionTimeLimit += Number(sectionTimeLimit);

                }
                if(examTimeType){
                    $(this).find('.exam-section-time').removeClass('show').addClass('hidden');
                }else{
                    $(this).find('.exam-section-time').removeClass('hidden').addClass('show');
                }
                $(this).find('.time-setting-btn').data('q-time',questionTimeLimit)
                $(this).find('.time-setting-btn').data('time',sectionTimeLimit);

                totalQuestions += totalCounts;
                totalPoints += sectionTotalPoints;

                //没有试题的提示
                if($(el).find('li.random-cate-li').length > 0){
                    $(this).find("ul#selected-category-list").find(".no-question-tips").remove();
                }else{
                    if($(this).find("ul#selected-category-list").find(".no-question-tips").length <= 0){
                        var noQuestionsTipsTmp =
                            '<div class="row no-question-tips">' +
                                '<div class="col-md-12 text-center">' +
                                    '<img class="erro_tips_img" src="{0}" alt=""></br>' +
                                    window.OELang.noRandomQuestionTips +
                                    '<a type="button" class="btn yks-blue" id="choose-category-3">' +
                                        '<i class="fa fa-plus" aria-hidden="true"></i> ' + window.OELang.addCategory +
                                    '</a>' +
                                '</div>' +
                            '</div>';
                        $(this).find("ul#selected-category-list").append(noQuestionsTipsTmp.format(noQuestionTipsPng));
                    }
                }
            })
            totalSections = randomSections.length;
            totalTime += Math.round(totalQuestionTimeLimit/60) + totalSectionTimeLimit;

        }else{
            //标准模式
            var sectionLis = $('#qs-random-select .qts-random-select-question').find('ul#selected-category-list li.random-cate-li');
            var totalCounts = 0,sectionTotalPoints = 0,sectionLimitTime=0;
            if(sectionLis.length > 0){
                $('#qs-random-select .qts-random-select-question').removeClass('no-cate-item');
                $(sectionLis).each(function(lIndex,sLi){
                    var selectedData = $(this).data('selected-data');
                    if(selectedData == undefined || selectedData.length <= 0){
                        return;
                    }
                    var selectDataParse = selectedData;
                    if(typeof selectedData != "object"){
                        selectDataParse = JSON.parse(selectedData);
                    }
                    var qtCounts = selectDataParse.qtCounts;
                    if(qtCounts && qtCounts.length>0){
                        var content = qtCounts.map(function(v){
                            var qtid = v.qtid, counts = v.count;
                            if(counts<=0) return "";
                            totalCounts += Number(counts);
                            sectionTotalPoints += counts*v.score;
                            qtKeyValue[qtid].count += counts;
                        });

                    }else{
                        isShowRightQuestionType = false;

                        totalCounts += Number(selectDataParse.count);
                        sectionTotalPoints += selectDataParse.count * selectDataParse.score;
                    }
                })

            }else{
                $('#qs-random-select .qts-random-select-question').addClass('no-cate-item');
            }

            var questionTimeLimit = $('#qs-random-select .questions-options-choice-container').find('.time-setting-btn').data('q-time');
            var sectionTimeLimit = $('#qs-random-select .questions-options-choice-container').find('.time-setting-btn').data('time');
            questionTimeLimit = questionTimeLimit == undefined ? 0 : Number(questionTimeLimit);
            sectionTimeLimit = sectionTimeLimit == undefined ? 30 : Number(sectionTimeLimit);
            if(questionTimeLimit > 0 ){
                $('#qs-random-select .selected-categories').find('.qts-counts-tip .exam-section-time').html(window.OELang.sectionQuestionLimited.format(questionTimeLimit));
                totalQuestionTimeLimit = questionTimeLimit*totalCounts;
                totalTime = Math.round(totalQuestionTimeLimit/60);
            }else{
                $('#qs-random-select .selected-categories').find('.qts-counts-tip .exam-section-time').html(window.OELang.sectionLimitTime.format(sectionTimeLimit));
                totalTime = Number(sectionTimeLimit);
            }
            if(examTimeType){
                $('#qs-random-select .selected-categories').find('.qts-counts-tip .exam-section-time').removeClass('show').addClass('hidden');
            }else{
                $('#qs-random-select .selected-categories').find('.qts-counts-tip .exam-section-time').removeClass('hidden').addClass('show');
            }
            sectionTotalPoints = sectionTotalPoints.isInteger() ?  sectionTotalPoints : parseFloat(sectionTotalPoints.toFixed(2));
            //部分总试题数，部分试题总分
            $('#qs-random-select .selected-categories').find('.qts-counts-tip .question-count').html(window.OELang.randomQuestionsSelectedTips.format(totalCounts));
            $('#qs-random-select .selected-categories').find('.qts-counts-tip .exam-total-score').html(window.OELang.sectionTotalPoints.format(sectionTotalPoints))

            totalQuestions = totalCounts;
            totalPoints += sectionTotalPoints;

            //没有试题的提示
            if($('#qs-random-select').find('li.random-cate-li').length > 0){
                $('#qs-random-select .selected-categories').find("ul#selected-category-list .no-question-tips").remove();
            }else{
                if($('#qs-random-select .selected-categories').find("ul#selected-category-list .no-question-tips").length <= 0){

                    var noQuestionsTipsTmpContent;
                    if($('#qs-random-select .selected-categories').data('question-count') == 0){
                        noQuestionsTipsTmpContent = '<p class="user-no-question">' +
                            window.OELang.noQuestionToselectTipTwo.format(window.YKS.stepTwoImportQuestion, window.YKS.stepTowQuestionAdd) +
                            '</p>';
                    }else {
                        noQuestionsTipsTmpContent = window.OELang.noRandomQuestionTips +
                            '<a type="button" class="btn yks-blue" id="choose-category-3">' +
                            '<i class="fa fa-plus" aria-hidden="true"></i> ' + window.OELang.addCategory +
                            '</a>';
                    }
                    var noQuestionsTipsTmp = '<div class="row no-question-tips" xmlns="http://www.w3.org/1999/html">' +
                        '<div class="col-md-12 text-center">' +
                        '<img class="erro_tips_img" src="{0}" alt=""></br>' +
                        noQuestionsTipsTmpContent
                        '</div>' +
                        '</div>';
                    $('#qs-random-select .selected-categories').find("ul#selected-category-list").append(noQuestionsTipsTmp.format(noQuestionTipsPng));

                }
            }

        }

        var result = {
            totalQuestions:totalQuestions,
            totalPoints:totalPoints,
            totalSections:totalSections,
            totalTime:totalTime,
            qtKeyValue:qtKeyValue,
            isShowRightQuestionType:isShowRightQuestionType
        }

        return result;
    }
    function updateExamQuestionsCountAndScore(iscn) {
        var totalTime = 0, totalPoints = 0, totalQuestions = 0, totalSections = 0, totalQuestionTimeLimit = 0, totalSectionTimeLimit = 0;
        var sections = $('#qs-pre-select').find('div.section');
        var qtKeyValue = {};
        var examInfoPanel = $('.exam-info-panel');
        var examTimeEl = $(examInfoPanel).find('li.exam-time')
        var examTimeType = $(examTimeEl).data('type');
        var noQuestionTipsPng = iscn ? "/components/com_exams/assets/img/no_question_tips.png" :"/components/com_exams/assets/img/no_question_tips_en.png";

        window.YKS.questiontypes.map(function(qt){
            qt.count = 0;//各个题型的数量
            qtKeyValue[qt.qtid] = qt;
        })
        if(sections.length > 0){
            sections.each(function(index,element){
                //各部分题目数量
                var sectionQuestionCount = $(this).find('#questionList tr[qid]').length;
                $(this).find('#sectionQuestionsCount').html(window.OELang.randomQuestionsSelectedTips.format(sectionQuestionCount));
                totalQuestions += sectionQuestionCount;

                //各部分总分
                var s = 0;
                $(this).find("td.score").each(function(index, element){
                    var score = Number($(element).data("score")),
                        qscore = Number($(element).data("qscore"));
                    s += score<0?qscore:score;
                })
                s = s.isInteger() ?  s : parseFloat(s.toFixed(2));
                $(this).find('.sectionTotalScore').html(window.OELang.sectionTotalPoints.format(s));
                totalPoints += s;

                //各部分总时长
                var questionTimeLimit = $(this).find('.time-setting-btn').data('q-time');
                var sectionTimeLimit = $(this).find('.time-setting-btn').data('time');
                questionTimeLimit = questionTimeLimit == undefined ? 0 : Number(questionTimeLimit);
                sectionTimeLimit = sectionTimeLimit == undefined ? 30 : Number(sectionTimeLimit);
                if(questionTimeLimit > 0 ){
                    $(this).find('.sectionTipComment').html(window.OELang.sectionQuestionLimited.format(questionTimeLimit));
                    totalQuestionTimeLimit += questionTimeLimit*sectionQuestionCount;
                }else{
                    $(this).find('.sectionTipComment').html(window.OELang.sectionLimitTime.format(sectionTimeLimit));
                    totalSectionTimeLimit += sectionTimeLimit;
                }

                if(examTimeType){
                    $(this).find('.sectionTipComment').removeClass('show').addClass('hidden');
                }else{
                    $(this).find('.sectionTipComment').removeClass('hidden').addClass('show');
                }
                $(this).find('.time-setting-btn').data('q-time',questionTimeLimit)
                $(this).find('.time-setting-btn').data('time',sectionTimeLimit);

                //没有试题的提示
                if(sectionQuestionCount > 0){
                    $(this).find("table#questionList").find(".no-question-tips").remove();
                    $(this).find(".section-btns").removeClass("opacity-class");
                }else{
                    $(this).find(".section-btns").addClass("opacity-class");
                    if($(this).find("table#questionList").find(".no-question-tips").length <= 0){
                        var noQuestionsTipsTmp = '<div class="row no-question-tips">' +
                            '<div class="col-md-12 text-center">' +
                            '<img class="erro_tips_img" src="{0}" alt=""></br>' +
                            '<p>' + window.OELang.noQuestionTips + '</p>' +
                            '<div>' +
                                '<a href="#btnAddQuestion" class="btn yks-blue">' +
                                    '<i class="fa fa-plus fa-lg"></i>&nbsp;' +
                                    window.OELang.addQuestions +
                                '</a>'
                            '</div>' +
                            '</div>' +
                            '</div>';
                        $(this).find("table#questionList").append(noQuestionsTipsTmp.format(noQuestionTipsPng));
                    }
                }

            })
            totalSections = sections.length;
            totalTime += Math.round(totalQuestionTimeLimit/60) + Number(totalSectionTimeLimit);
        }else{
            totalQuestions = $("#questionList tr[qid]").length;
            $("#questionscount > b").html(totalQuestions);
            var s = 0;
            $("td.score").each(function(index, element){
                var score = Number($(element).data("score")),
                    qscore = Number($(element).data("qscore"));
                s += score<0?qscore:score;
            });
            s = s.isInteger() ?  s : parseFloat(s.toFixed(2));
            $("span.totalscore b").html(s);
            totalPoints =  s;

            //各部分总时长
            var questionTimeLimit = $('.qts-pre-select-question').find('.time-setting-btn').data('q-time');
            var sectionTimeLimit = $('.qts-pre-select-question').find('.time-setting-btn').data('time');
            questionTimeLimit = questionTimeLimit == undefined ? 0 : Number(questionTimeLimit);
            sectionTimeLimit = sectionTimeLimit == undefined ? 30 : Number(sectionTimeLimit);
            if(questionTimeLimit > 0 ){
                $('.qts-pre-select-question').find('.sectionTipComment').html(window.OELang.sectionQuestionLimited.format(questionTimeLimit));
                totalQuestionTimeLimit += questionTimeLimit*totalQuestions;
                totalTime += Math.round(totalQuestionTimeLimit/60);
            }else{
                $('.qts-pre-select-question').find('.sectionTipComment').html(window.OELang.sectionLimitTime.format(sectionTimeLimit));
                totalTime += Number(sectionTimeLimit);
            }
            $('.qts-pre-select-question').find('.time-setting-btn').data('q-time',questionTimeLimit)
            $('.qts-pre-select-question').find('.time-setting-btn').data('time',sectionTimeLimit);

            if(examTimeType){
                $('.qts-pre-select-question').find('.sectionTipComment').removeClass('show').addClass('hidden');
            }else{
                $('.qts-pre-select-question').find('.sectionTipComment').removeClass('hidden').addClass('show');
            }

            //没有试题的提示
            if(totalQuestions > 0){
                $('#questionsListForm').find(".no-question-tips").remove();
                $("#qs-pre-select").find(".pre-exam-toolbar").removeClass("opacity-class");
            }else{
                $("#qs-pre-select").find(".pre-exam-toolbar").addClass("opacity-class");
                if($('#questionsListForm').find(".no-question-tips").length <= 0){
                    var noQuestionsTipsTmp = '<div class="row no-question-tips">' +
                        '<div class="col-md-12 text-center">' +
                        '<img class="erro_tips_img" src="{0}" alt=""></br>' +
                        '<p>' + window.OELang.noQuestionTips + '</p>' +
                        '<div>' +
                        '<a href="#btnAddQuestion" class="btn yks-blue">' +
                        '<i class="fa fa-plus fa-lg"></i>&nbsp;' +
                        window.OELang.addQuestions +
                        '</a>'
                    '</div>' +
                        '</div>' +
                        '</div>';
                    $('.qts-pre-select-question').find('#questionList').append(noQuestionsTipsTmp.format(noQuestionTipsPng));
                }

            }

        }

        //各个题型的数量
        $('#qs-pre-select').find("tr[qid]").each(function(index, element){
            var qtid = Number($(this).attr('qtid'));
            if(qtid !== undefined && qtKeyValue[qtid] !== undefined){
                qtKeyValue[qtid].count += 1;
            }
        })

        var result = {
            totalQuestions:totalQuestions,
            totalPoints:totalPoints,
            totalSections:totalSections,
            totalTime:totalTime,
            qtKeyValue:qtKeyValue
        }

        return result;

    }
    //更新试卷总信息，包括时长，总分，总试题，部分，各种试题的数量
    function updateExamInfo(iscn) {
        var totalTime = 0, totalPoints = 0, totalQuestions = 0, totalSections = 0;
        var isShowRightQuestionType = true;//是否显示右边各个题型的数量
        var examType = Number($(".questions-sources li.active").attr("et"));
        var qtKeyValue = {};
        window.YKS.questiontypes.map(function(qt){
            qt.count = 0;//各个题型的数量
            qtKeyValue[qt.qtid] = qt;
        })
        if(examType === window.YKS.questionsSource.predefine){//固定试卷
            var preExamData = updateExamQuestionsCountAndScore(iscn);
            totalTime = preExamData.totalTime;
            totalPoints = preExamData.totalPoints;
            totalQuestions = preExamData.totalQuestions;
            totalSections = preExamData.totalSections;
            qtKeyValue = preExamData.qtKeyValue;

        }else if(examType === window.YKS.questionsSource.random){//随机试卷
            var randomExamData = updateSectionCategoriesCountAndScore(iscn);
            totalTime = randomExamData.totalTime;
            totalPoints = randomExamData.totalPoints;
            totalQuestions = randomExamData.totalQuestions;
            totalSections = randomExamData.totalSections;
            qtKeyValue = randomExamData.qtKeyValue;
            isShowRightQuestionType = randomExamData.isShowRightQuestionType;
        }else{//固定+随机试卷
            var randomExamData = updateSectionCategoriesCountAndScore(iscn);
            var preExamData = updateExamQuestionsCountAndScore(iscn);
            totalTime = preExamData.totalTime + randomExamData.totalTime;
            totalPoints = preExamData.totalPoints + randomExamData.totalPoints;
            totalQuestions = preExamData.totalQuestions + randomExamData.totalQuestions;
            totalSections = preExamData.totalSections + randomExamData.totalSections;
            isShowRightQuestionType = randomExamData.isShowRightQuestionType;
            var pqtKeyValue = preExamData.qtKeyValue;
            var rqtKeyValue = randomExamData.qtKeyValue;
            window.YKS.questiontypes.map(function(qt){
                qtKeyValue[qt.qtid].count = pqtKeyValue[qt.qtid].count + rqtKeyValue[qt.qtid].count;//各个题型的数量
            })
        }

        var examInfoPanel = $('.exam-info-panel');
        var examTimeEl = $(examInfoPanel).find('li.exam-time')
        var examTimeType = $(examTimeEl).data('type');

        if(examTimeType){
            //使用试卷的总时长或者单题时长
            var examTime = $(examTimeEl).data('exam-time');
            var examQuestionTime = $(examTimeEl).data('q-time');
            var timeText = window.OELang.examInfoTotalTime.format(examTime);
            if(examQuestionTime){
                timeText =window.OELang.examInfoEachQuetionTime.format(examQuestionTime)
            }
            $(examTimeEl).html(timeText);
        }else{
            //使用部分的时长或者单题时长
            $(examInfoPanel).find('li.exam-time').html(window.OELang.examInfoTotalTime.format(totalTime));
        }

        $(examInfoPanel).find('li.exam-score').html(window.OELang.examInfoTotalPoints.format(totalPoints));
        $(examInfoPanel).find('li.exam-questions').html(window.OELang.examInfoTotalQuestions.format(totalQuestions));
        $(examInfoPanel).find('li.exam-sections').html(window.OELang.examInfoTotalSections.format(totalSections));

        $(examInfoPanel).find('li.exam-score').data('score',totalPoints);
        $(examInfoPanel).find('li.exam-questions').data('count',totalQuestions);
        $(examInfoPanel).find('li.exam-time').data('time',totalTime);


        $('.exam-info-panel ul.exam-qtype li').each(function (index,element) {
            var thisLi = $(this);
            var qtid = thisLi.data('qtid');
            var qCount = qtKeyValue[qtid].count;
            if(qCount <= 0 || !isShowRightQuestionType){
                thisLi.removeClass('show').addClass('hidden');
            }else{
                thisLi.removeClass('hidden').addClass('show');
            }
            thisLi.find('span').html(qCount)
        })

        var selectedCategoryList = document.getElementById('at-sel-qs-cs-ls');
        if(selectedCategoryList){
            Sortable.create( selectedCategoryList, {
                handle: 'i.fa-bars',
                animation: 150
            });
        }

    }
    function scrollToTarget(target) {
        $('html, body').animate({
            scrollTop: target.offset().top - 100
        }, 500);
    }

    /**
     *
     * 新的创建试卷第2步
     * make add questions to exam available
     * @param eid the id of exam
     *
     */
    function setupExamJSQuestionsPage(eid, token, iscn){
        setupPreselectFromJSQuestionBank(eid, token, iscn);


        //删除随机部分
        function deleteRandomSection(sectionIds){
            if(!Array.isArray(sectionIds)) sectionIds = sectionIds.split(',');
            $.each(sectionIds,function(index,section){
                var id = section;
                var sectionEl = $('#qs-random-select div.section[sectionid="{0}"]'.format(id));
                $(sectionEl).remove();
            })
            $('#qs-random-select').find('div.section').each(function(index,element){
                $(this).find('label.section-name').text(window.OELang.examQuestions.sectionN.format(NumberToChinese(++index)));
            })

        }

        //添加随机分类项
        function addCategoryToSelectedCategories(sectionId, item, selectedData){
            var contentCount = item.contentCount, catid = item.catid, title = item.title;
            selectedData = selectedData ? selectedData : "";
            var target = $(".selected-categories ul#selected-category-list");
            if(sectionId) {
                target = $('#qs-random-select').find('div.section[sectionid="{0}"]'.format(sectionId)).find("ul#selected-category-list");
            }
            var ul = $('#selected-category-list');
            var temp = $('#qtc-template-new-version').text().trim();

            temp = temp.format(title, contentCount, 0, contentCount, catid, selectedData);
            content = $(temp).appendTo($(target));
            // updateTotal(calculateTotal());
            // updateScore();

            var liElsCount = $(target).find('li').length;
            if(liElsCount == 1){
                // onClickSelectedCategory.call($('.selected-categories li').find('span.qts-cate-name'));
            }

        }

        //随机项题目抽取和分数调整
        $("#qs-random-select").on("click", ".qts-count input,.qts-score input", function (e) {
            e.preventDefault();
            e.stopPropagation();
        })
        $("#qs-random-select").on("change", ".qts-count input", function (e) {
            e.preventDefault();
            e.stopPropagation();
            var self = $(this);
            var max = self.attr("max"),
                value = parseInt(self.val());
            if (value > max) self.val(max);
            if (value < 0) self.val(0);

            var pLi = self.parents('li.random-cate-li');
            saveCategoryCountAndScore($(pLi));
            //更新试卷信息
            updateExamInfo(iscn);

        }).on('change','.qts-score input',function(e){
            e.preventDefault();
            e.stopPropagation();
            var self = $(this);
            var pLi = self.parents('li.random-cate-li');
            saveCategoryCountAndScore($(pLi));
            //更新试卷信息
            updateExamInfo(iscn);
        });

        /**
         * 保存selected-data到li，方便取用
         * @param randomCateLi 分类所在li元素对象
         */
        function saveCategoryCountAndScore(randomCateLi){
            var isWrong = 0, //0表示从题库，1错题
                diffLevel = 0, //难易程度
                labelIdsArray = [],//标签
                catid = 0,//分类ID
                liAllCount = 0,//选择的题目数量
                qtCount = [],
                catScore;

            //分类ID
            catid = randomCateLi.data('catid');

            //计算确定有类型
            if(randomCateLi.find("div.question-type-item").length > 0){
                var activeTabPaneEl = randomCateLi.find(".selected-category-expand-details .tab-pane.active");
                var levelInputEl = $(activeTabPaneEl).find('.random-diff-level-select').find('label.active input');
                var selectLabelElId = $(activeTabPaneEl).find('select[name="random-label-select"]').attr('id');


                //获取分类选中的难易程度值
                isWrong = $(activeTabPaneEl).data("type");
                if(levelInputEl.length > 0){
                    diffLevel = $(levelInputEl).val();
                }

                //分类获取选中标签值
                var dataArray = $("#"+selectLabelElId).select2('data');
                $.each(dataArray,function(index,el){
                    labelIdsArray.push(el.id);
                })

                $(activeTabPaneEl).find("div.question-type-item").map(function () {
                    var item = $(this),
                        ci = item.find('span.qts-count input'),
                        si = item.find('span.qts-score input'),
                        qtid = ci.data('qtid'),
                        qtc = Number(ci.val()),
                        qts = Number(si.val());
                    liAllCount += qtc;
                    qtCount.push({
                        qtid: qtid,
                        count: qtc,
                        score: qts
                    })
                });

                randomCateLi.find("span.qts-count.first").find("strong").html(liAllCount);
            }else{
                //计算没有确定类型的
                var ci = randomCateLi.find('span.qts-count.first input'),
                    si = randomCateLi.find('span.qts-score.first input'),
                    liAllCount = Number(ci.val()) > 0 ? Number(ci.val()) : 0,
                    catScore = Number(si.val()) > 0 ? Number(si.val()) : 0,
                    qtCount = [];
            }


            var data = {
                count:liAllCount,
                score:catScore,
                catid:catid,
                type:isWrong,
                diffLevel:diffLevel,
                labels:labelIdsArray.join(','),
                qtCounts:qtCount
            }



            randomCateLi.data("selected-data", JSON.stringify(data));
            randomCateLi.data("counts", liAllCount);
            randomCateLi.data('score', catScore);
            randomCateLi.data('from',isWrong);



            //更新随机抽题分类的总分
            updateCategoryTotalScore(randomCateLi);

            showQuestionTypeCounts(randomCateLi, qtCount);


        }

        /**
         * 更新随机抽题分类的总分
         * @param pLi
         * @returns {boolean}
         */
        function updateCategoryTotalScore(pLi) {
            // var str = obj.data('selected-data');
            pLi = $(pLi);
            var catid = pLi.data('catid'), bankType = 0;
            var bankEl = $('#selectQuestionFromBank{0}'.format(catid));
            if (pLi.data('selected-data') == undefined || pLi.data('selected-data').length <= 0) {
                pLi.find('.selected-questions-count-and-points').find('.select-count').text(0);
                pLi.find('.selected-questions-count-and-points').find('.select-point').text(0);
                return false;
            }
            var seledData = typeof pLi.data('selected-data') == 'string' ? JSON.parse(pLi.data('selected-data')) : pLi.data('selected-data');
            var categoryScore = 0, bankType = Number(seledData.type);
            if(bankType){
                //错题库抽题
                bankEl = $('#selectQuestionFromWrongBank{0}'.format(catid));
            }
            if (seledData.qtCounts.length > 0) {
                for (var j = 0; j < seledData.qtCounts.length; j++) {
                    var obj1 = seledData.qtCounts[j];
                    categoryScore += Number(obj1.count) * Number(obj1.score);
                }
            } else {
                categoryScore = Number(seledData.count) * Number(seledData.score);
            }
            pLi.find('span.category-total-score').html(window.OELang.totalNScore.format('<b>' + (categoryScore.isInteger() ? categoryScore : parseFloat(categoryScore)) + '</b>'));

            bankEl.find('.selected-questions-count-and-points').find('.select-count').text(seledData.count);
            bankEl.find('.selected-questions-count-and-points').find('.select-point').text(categoryScore);

        }
        //移动随机试卷部分
        function onMoveRandomSectionUpAndDown(e){
            e.preventDefault();
            var target = e.target, type = 0;
            //type=1上移，0下移
            if($(target).hasClass('move-up')){
                type = 1;
            }
            var currentSection = $(e.target).parents('div.section');
            var prevSection = currentSection.prev("div.section");
            var nextSection = currentSection.next("div.section");

            var labelSectionName = currentSection.find('label.section-name');
            if(type){
                if(prevSection.length > 0){
                    currentSection.insertBefore(prevSection);
                    scrollToTarget(currentSection);
                }
            }else{
                if(nextSection.length > 0){
                    currentSection.insertAfter(nextSection);
                    scrollToTarget(currentSection);
                }
            }
            $('#qs-random-select').find('div.section').each(function(index,element){
                $(this).find('label.section-name').text(window.OELang.examQuestions.sectionN.format(NumberToChinese(++index)));
            })
        }

        //选择随机试题项
        var clickTargetElement;
        var onChooseCategories = function(){
            var selectQuestionsWindow = $('#select-questions-content');
            var selectBox;
            return function(e){
                var e = e || window.event;
                e.preventDefault();
                var section = $(this).parents('div.section');
                if(section.length == 1){
                    $('input[name="currentAddCategoriesSection"]').val(section.attr('sectionid'));
                }else{
                    $('input[name="currentAddCategoriesSection"]').val("");

                }

                clickTargetElement = e.target;

                selectBox = selectBox || new jBox('Modal',{
                    title: window.OELang.editRandomExtraction,
                    content: selectQuestionsWindow,
                    closeOnEsc: false,
                    closeButton: 'title',
                    width: 756,
                    zIndex: 1,
                    onCreated:function(){

                        $('#select-questions-content').on('click','a[href="#cancel"]',function(e){
                            selectBox.close();
                        }).on('click','a[href="#confirm"]',function(e){
                            var currentSelectedBankObj = getCurrentSelectBankObj();
                            var catId = $(currentSelectedBankObj).find('input[name="selectCat"]').val();
                            if(catId == ""){
                                alert(window.OELang.pleaseSelectACategory);
                                return false;
                            }
                            var currentTabPane = getCurrentSelectBankObj();
                            var categoryTitle = $(currentTabPane).find('input[name="selectCategoryTitle"]').val();
                            categoryTitle = getCategoryTitle(categoryTitle);

                            var catId = $(currentTabPane).find('input[name="selectCat"]').val();
                            var selectData = $(currentTabPane).find('.category-select-box').data('selected-data');

                            var sectionId = $('input[name="currentAddCategoriesSection"]').val();

                            addCategoryToSelectedCategories(sectionId,catId,categoryTitle,selectData);
                            selectBox.close();
                        })
                        $('#questions-bank').find("#labelSelect").select2({
                            placeholder: window.OELang.search,
                            width:100,
                            language:{
                                noResults:function(){
                                    return window.OELang.noSearchResult;
                                }
                            }
                        });

                    },
                    onOpen:function(){
                        clearCategoriesData(clickTargetElement);
                        editCategory(clickTargetElement);
                    },
                    onCloseComplete:function(){

                    }
                })
                selectBox.open();
                //使用 Javscript 来启用标签页

            };
        }();

        //---分类选择窗口---
        var currentClickSelectCateButton;//当前点击的添加分类按钮
        var onChooseCategories3 = function (e) {
            var treeWindow = $('#categories-tree-4');
            var confirmBtn = treeWindow.find('button[name="confirm"]');
            var treeEl = treeWindow.find('div[name="categories-tree"]');
            var searchEl = treeWindow.find('input[name="categories-search-input"]');
            var tagsInputEl = treeWindow.find('input[name="tagsinput"]');
            var jbox, treeInst, selCats, catType = 2;
            var self = $(this);
            currentClickSelectCateButton = $(this);
            var treeOptions = {
                core: {
                    multiple: true,
                    check_callback: false,
                    data: {
                        type: 'post',
                        dataType: 'json',
                        url: window.YKS.loadCategoriesContentCount,
                        data: function (node) {
                            var data = {type: catType};

                            data[token] = 1;
                            if (node.id === '#') {
                                data.cats = [{id: -1, text: window.OELang.allQuestions, li_attr: {catid: -1, title: window.OELang.allQuestions}},
                                    {id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}}];
                            } else {
                                data.catid = node.id;
                            }
                            return data;
                        }
                    }
                },
                plugins: ['checkbox']
            };


            jbox = new jBox('Modal', {
                title: window.OELang.pleaseSelectQuestionCategory,
                content: treeWindow,
                closeOnEsc: false,
                closeButton: 'title',
                width: 620,
                zIndex: 99999,
                onCreated: function () {
                    treeInst = createCategoryTree(treeEl, searchEl, null, treeOptions, catType, token);
                    treeEl.one('loaded.jstree', function () {
                        var sectionEl = currentClickSelectCateButton.parents('div.section'), target = $('ul#selected-category-list').find('li.random-cate-li');
                        if(sectionEl.length > 0){
                            target = $(sectionEl).find('.selected-category-list').find('ul>li.random-cate-li')
                        }
                        var selIds = treeInst.get_selected(true).length > 0 ? treeInst.get_selected(true) : $.map($.makeArray(target), function (obj) {return $(obj).data('catid');});
                        if (selIds && selIds.length > 0) {
                            for (var i = 0; i < selIds.length; i++) {
                                var id = selIds[i];
                                if (treeInst.get_node(id)) {
                                    treeInst.select_node(id);
                                } else {
                                    treeInst.deselect_all();
                                    treeInst.load_all(null, function () {
                                        treeInst.select_node(selIds);
                                    });
                                    break;
                                }
                            }
                        }
                    });

                    tagsInputEl.tagsinput({
                        itemValue: function (item) {
                            return item.li_attr.catid;
                        },
                        itemText: function (item) {
                            return item.li_attr.title;
                        },
                        trimValue: true,
                        allowDuplicates: true
                    });
                    treeWindow.find('.bootstrap-tagsinput').off('click', treeWindow.find('.bootstrap-tagsinput'));
                    treeWindow.find('.bootstrap-tagsinput').children('input').attr('readonly', 'readonly');
                    tagsInputEl.on('itemRemoved', function (event) {
                        if (event.item != null) {
                            treeInst.deselect_node(treeInst.get_node(event.item.id));
                        }
                    });
                    treeEl.on('changed.jstree', function (e, data) {
                        var node = data.node;
                        if (!node) return;
                        var selIds = treeInst.get_selected().map(function(id){return Number(id)});
                        if (selIds.length > 1) {
                            if (node.id == -1) {
                                if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                    treeInst.deselect_all();
                                    treeInst.select_node(-1);
                                } else {
                                    treeInst.deselect_node(-1);
                                }
                            } else {
                                if ($.inArray(-1, selIds) >= 0) {
                                    if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                        treeInst.deselect_node(-1);
                                    } else {
                                        treeInst.deselect_node(node.id);
                                    }
                                }
                            }
                        }
                        tagsInputEl.tagsinput('removeAll');
                        selIds = treeInst.get_selected(true);
                        if (selIds.length > 0) {
                            for (var i = 0; i < selIds.length; i++) {
                                var obj = selIds[i];
                                tagsInputEl.tagsinput('add', obj);
                            }
                        }
                    });

                    treeWindow.one('click', 'button[name="confirm"]', function (e) {
                        var e = e || window.event;
                        e.preventDefault();
                        e.stopPropagation();
                        selCats = treeInst.get_selected(true);
                        var sectionEl = currentClickSelectCateButton.parents('div.section'), sectionId = null;

                        if(sectionEl.length > 0){
                            sectionId = sectionEl.attr('sectionid');
                            $(sectionEl).find('ul#selected-category-list').empty();
                        }else{
                            $('ul#selected-category-list').empty();
                        }
                        //新的
                        for (var i = 0; i < selCats.length; i++){
                            var obj = selCats[i];
                            var item = {
                                title: obj.li_attr.title,
                                contentCount: obj.li_attr.content_count,
                                catid: obj.id
                            }
                            addCategoryToSelectedCategories(sectionId, item, null);
                        }
                        updateExamInfo(iscn);

                        jbox.close();
                    });
                    treeWindow.on('click', 'button[name="cancel"]', function (e) {
                        var e = e || window.event;
                        e.preventDefault();
                        jbox.close();
                    });
                },
                onOpen: function () {
                    treeInst.clear_search();
                    searchEl.val('');

                    treeInst.deselect_all();
                    if (treeInst.is_loaded('#')) {
                        tagsInputEl.tagsinput('removeAll');
                        treeInst.select_node(selCats);
                    }
                }
            });
            jbox.open();
        };

        function changeRandomModeStyle(type){
            if(type){
                //高级切换低级
                $('input[name="currentRandomMode"]').val(0);
                $('.qts-random-select-question').empty();
                var randomStandardMode = $('#randomExamNormal').html();
                $(randomStandardMode).appendTo('.qts-random-select-question');

                if($('#qs-random-select').find('div.section').length > 0){
                    NW.buildCheck($("#qs-random-select div.section"));
                }else{
                    NW.buildCheck($("#qs-random-select"));
                }
            }else{
                //随机试卷 标准模式切换高级模式
                $('input[name="currentRandomMode"]').val(1);
                $('.qts-random-select-question').empty();
                var randomHightLevelTitle = $('#randomHighLevelTitle').html();
                $(randomHightLevelTitle).appendTo('.qts-random-select-question').show();
            }
        }
        function setOperationBtnEvent(){
            $('.operation-btn').jBox('Tooltip',{
                theme: 'TooltipDark',
                delayClose:1,
                getContent:'title'
            })
        }
        $('#qs-random-select').on('click','a[href="#changeMode"]',function(e){
            //随机试卷切换模式
            e.preventDefault();
            var self = $(this);
            NW.makeLoading(self);
            var type = self.data('type');
            var url = window.YKS.changeRandomMode;
            var data = {
                eid:eid,
                eType:2
            }
            data[token] = 1;
            if(type){//
                data["mType"] = 1;
                if( $('#qs-random-select').find('div.section').length > 1 ){
                    NW.messageBox(window.OELang.notice,window.OELang.examQuestions.moveThenChange);
                    NW.makeUnLoading(self);
                    return false;
                }
                $.post(url,data).done(function(rdata){
                    NW.makeUnLoading(self);
                    rdata = $.parseJSON(rdata);
                    if(rdata.status == 'ok'){
                        changeRandomModeStyle(type);
                        var categories = rdata.categories;

                        if(categories.length > 0){
                            $.each(categories,function (index,value) {
                                var catId = value.catid,
                                    categoryTitle = value.title;
                                if(!categoryTitle) categoryTitle = window.OELang.anyCate;
                                var params = $.parseJSON(value.params);
                                if(params.length <= 0){
                                    params.qtcounts = [];
                                }
                                var selectData = {
                                    "count":value.counts,
                                    "score":value.score,
                                    "qtCounts":params.qtcounts
                                }

                                var item = {
                                    title: categoryTitle,
                                    contentCount: 0,
                                    catid: catId,

                                }
                                addCategoryToSelectedCategories(null, item, JSON.stringify(selectData));
                                var pLi = $('#qs-random-select').find('li.random-cate-li[data-catid="{0}"]'.format(catId));
                                onShowQuestionType($(pLi));
                                updateCategoryTotalScore(pLi);
                                showQuestionTypeCounts(pLi, params.qtcounts);
                            })

                        }
                        Sortable.create(document.getElementById('selected-category-list'), {
                            animation: 150,
                            handle:'i.fa.fa-bars'
                        });
                        setOperationBtnEvent();
                    }
                    updateExamInfo(iscn);
                })

            }else{
                $.post(url,data).done(function(rdata){
                    NW.makeUnLoading(self);
                    rdata = $.parseJSON(rdata);
                    if(rdata.status == 'ok'){
                        changeRandomModeStyle(type);
                        var sectionInfo = rdata.section;
                        //部分名字，部分titleId,部分title
                        var sectionName = window.OELang.examQuestions.sectionN.format(NumberToChinese(1));
                        var sectionTitle = sectionInfo.title;
                        if(sectionTitle == ""){
                            sectionTitle = window.OELang.sectionTitle;
                        }
                        var sectionItemTmpl = $('#randomSectionItemTmpl').html().format(sectionName,"section_{0}_title".format(1),sectionTitle,sectionInfo.id);

                        $(sectionItemTmpl).appendTo('#qs-random-select .qts-random-select-question .selected-categories');
                        var categories = rdata.categories;
                        if(categories.length > 0){
                            $.each(categories,function(index,value){
                                var catId = value.catid,
                                    sectionId = value.section,
                                    categoryTitle = value.title;
                                if(!categoryTitle) categoryTitle = window.OELang.anyCate;

                                var params = $.parseJSON(value.params);
                                if(params.length <= 0){
                                    params.qtcounts = [];
                                }

                                var selectData = {
                                    "count":value.counts,
                                    "score":value.score,
                                    "qtCounts":params.qtcounts
                                }

                                var item = {
                                    title: categoryTitle,
                                    contentCount: 0,
                                    catid: catId,

                                }

                                addCategoryToSelectedCategories(null, item, JSON.stringify(selectData));
                                var pLi = $('#qs-random-select').find('li.random-cate-li[data-catid="{0}"]'.format(catId));
                                onShowQuestionType($(pLi));
                                updateCategoryTotalScore(pLi);
                                showQuestionTypeCounts(pLi, params.qtcounts);

                            })
                            $(document).find('div.section #selected-category-list').each(function(index,el){
                                Sortable.create(el, {
                                    animation: 150,
                                    handle:'i.fa.fa-bars'
                                });
                            })
                            setOperationBtnEvent();
                        }
                        updateExamInfo(iscn);
                        randomExamBuildCheck();
                    }
                })
            }

        }).on('click','a[href="#deleteSection"]',function(e){
            e.preventDefault();
            var self = $(this);


            var sectionId = $(self).parents('div.section').attr('sectionid');//多个
            var randomSections = $('#qs-random-select .selected-categories').find('div.section');
            if(randomSections.length <= 1){
                NW.messageBox(window.OELang.notice,window.OELang.keepOnePartAtLeast);
                NW.makeUnLoading(self);
                return false;
            }

            NW.showCustomConfirmDialog(window.OELang.deletePart,window.OELang._delete,window.OELang.cancel,window.OELang.whetherToDeleteSection,function(resp){
                if(resp == 'yes'){
                    var deleteBtn = $(this);
                    NW.makeLoading(deleteBtn);
                    var url = window.YKS.deleteSection;
                    var data = {
                        eid:eid,
                        eType:1,
                        sectionId:sectionId
                    }
                    data[token] = 1;
                    $.post(url,data).done(function(rdata){
                        rdata = $.parseJSON(rdata);
                        if(rdata.status = "ok"){
                            deleteRandomSection(sectionId);
                            updateExamInfo(iscn);
                        }else{
                            alert(rdata.msg);
                        }
                        NW.makeUnLoading(deleteBtn);
                    })
                }
            })

        }).on('click','a[href="#btnAddSection"]',function(e){
            e.preventDefault();
            var self = $(this);
            NW.makeLoading(self);
            var url = window.YKS.addSection;
            var data = {
                eid:eid,
                eType:1
            }
            data[token] = 1;
            $.post(url,data).done(function(rdata){
                rdata = $.parseJSON(rdata);
                if(rdata.status = "ok"){
                    var sectionInfo = rdata.section;
                    var sectionTitle = sectionInfo.title;
                    if(sectionTitle == ""){
                        sectionTitle = window.OELang.sectionTitle;
                    }
                    var sectionItemTmpl = $('#randomSectionItemTmpl').html().format(sectionInfo.name,"section_{0}_title".format(sectionInfo.id), sectionTitle,sectionInfo.id);
                    $(sectionItemTmpl).appendTo('#qs-random-select .qts-random-select-question .selected-categories');

                    var sectionObj = $('#qs-random-select div.section[sectionid="{0}"]'.format(sectionInfo.id));
                    updateExamInfo(iscn);
                    scrollToTarget(sectionObj);

                    $(document).find('#qs-random-select div.section[sectionid="{0}"]'.format(sectionInfo.id)).find('#selected-category-list').each(function(index,el){
                        Sortable.create(el, {
                            animation: 150,
                        });
                    })
                    NW.buildCheck($('#qs-random-select div.section[sectionid="{0}"]'.format(sectionInfo.id)));
                }
                NW.makeUnLoading(self);
            })
        }).on('click','a.move-up',onMoveRandomSectionUpAndDown).on('click','a.move-down',onMoveRandomSectionUpAndDown).on('click','div.random-cate-li-header, span.category-expand-collapse',onExpandOrCollapseSelectedCategory).on('shown.bs.tab','ul.question-from li a',function(e){
            e.preventDefault();
            var self = $(this);
            var pLi = self.parents('li.random-cate-li');
            var value = 0;
            if(self.attr('href') == "#selectQuestionFromWrongBank{0}".format($(pLi).data("catid"))){
                value = 1;
            }
            getQuestionsCountByCategory(pLi, null, null);

        }).on("click",".random-diff-level-select .btn-group-circle label",function(e){
            e.preventDefault();
            e.stopPropagation();
            var self = $(this);
            var randomDiffLevelSelect = self.parents('.random-diff-level-select');

            var pLi = self.parents('li.random-cate-li');
            var value = self.find('input').val();
            if(self.hasClass('active')){
                value = 0;
                self.removeClass('active');

            }else{
                var labelActive = self.parents('.btn-group-circle').find('label.active');
                if(labelActive.length > 0){
                    labelActive.each(function(index,el){
                        $(this).removeClass('active');
                    })
                }
                self.addClass('active');
            }

            getQuestionsCountByCategory(pLi, "diff", value);

        }).on('click','a[href="#btnDeleteSections"]',function(e){
            e.preventDefault();
            var self = $(this);

            var sectionId = $.makeArray($("#qs-random-select .section-title .checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function (value) {
                return value > 0;
            });

            if(sectionId.length <= 0){
                NW.messageBox(window.OELang.notice,window.OELang.pleaseSelectFirst);
                return false;
            }

            var randomSections = $('#qs-random-select .selected-categories').find('div.section');
            if((randomSections.length - sectionId.length) < 1){
                NW.messageBox(window.OELang.notice,window.OELang.keepOnePartAtLeast);
                NW.makeUnLoading(self);
                return false;
            }

            NW.showCustomConfirmDialog(window.OELang.deletePart,window.OELang._delete,window.OELang.cancel,window.OELang.whetherToDeleteSection,function(resp){
                if(resp == 'yes'){
                    var deleteBtn = $(this);
                    NW.makeLoading(deleteBtn);
                    var url = window.YKS.deleteSection;
                    var data = {
                        eid:eid,
                        eType:1,
                        sectionId:sectionId.join(',')
                    }
                    data[token] = 1;
                    $.post(url,data).done(function(rdata){
                        rdata = $.parseJSON(rdata);
                        if(rdata.status = "ok"){
                            deleteRandomSection(sectionId);
                            updateExamInfo(iscn);
                        }else{
                            alert(rdata.msg);
                        }
                        NW.makeUnLoading(deleteBtn);
                    })
                }
            })
        })
        randomExamBuildCheck();
        // $('#qs-random-select').on("click","div.checker",function(e){
        //     var self = $(this);
        //     changeRandomExamBtnStyle(self);
        // })

        // var changeRandomExamBtnStyle = function(checkEl) {
        //     var sectionEl = checkEl.parents('div.section');
        //
        //     var targetEl = $('div.qts-random-select-question');
        //     if(sectionEl.length > 0){
        //         targetEl = $(sectionEl).find('div.qts-random-select-question');
        //     }
        //
        //     var catid = $.makeArray($(targetEl).find('div.checker span.checked input.checkboxes')).map(function (item, index, array) {
        //         var val = Number($(item).val());
        //         if (val <= 0) {
        //             return;
        //         }
        //         return val;
        //     });
        //
        //     if(catid.length > 0){
        //         targetEl.find('a[href="#deleteCategories"]').removeClass('yks-default').addClass('yks-red-default');
        //     }else{
        //         targetEl.find('a[href="#deleteCategories"]').removeClass('yks-red-default').addClass('yks-default');
        //     }
        // }

        /**
         *
         * @param pLi
         * @param target
         * @param targetValue
         * @returns {boolean}
         */
        function getQuestionsCountByCategory(pLi, target, targetValue){
            var randomCateLi = $(pLi);
            var catid = randomCateLi.data('catid');
            var isWrong = 0, labelIdsArray = [], diffLevel = 0;

            var activeTabPaneEl = randomCateLi.find(".selected-category-expand-details .tab-pane.active");
            var randomDiffLevelSelectEl = $(activeTabPaneEl).find('.random-diff-level-select')
            var levelInputEl = $(activeTabPaneEl).find('.random-diff-level-select').find('label.active');
            var selectLabelElId = $(activeTabPaneEl).find('select[name="random-label-select"]').attr('id');

            //获取分类选中的难易程度值
            if(target == "diff"){
                diffLevel = targetValue;
            }else{
                if(levelInputEl.length > 0){
                    diffLevel = $(levelInputEl).val();
                }
            }

            //分类获取选中标签值
            var dataArray;

            if(!$(activeTabPaneEl).find('select[name="random-label-select"]').hasClass("select2-hidden-accessible")) return false;
            var dataArray = $("#"+selectLabelElId).select2('data');

            $.each(dataArray,function(index,el){
                labelIdsArray.push(el.id);
            })

            if(target && target == "tab"){
                isWrong = targetValue;
            }else{
                if(activeTabPaneEl.data('type') == 1){
                    isWrong = 1;
                }
            }

            var qCountData = {
                catid: catid,
                isWrong:isWrong,
                diffLevel:diffLevel,
                labelId:labelIdsArray.join(',')
            }
            $.get(window.YKS.getQuestionsCountByCategory, qCountData).done(function(data){
                data = $.parseJSON(data);
                if(data.status === "ok"){
                    var qcByC = data.questionsCount;
                    randomCateLi.data('qcbyc', JSON.stringify(qcByC));
                    // randomCateLi.data('selected-data',"");
                    var template = $("#questionTypeDetails").text().trim(),
                        qtKeyValue = {};
                    window.YKS.questiontypes.map(function (qt) {
                        qtKeyValue[qt.qtid] = qt;
                    });

                    template = '<div class="question-type-item">' + template +
                        '<span style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;</span>' +
                        '<span class="qts-score"><input type="number" class="form-control" style="display:inline-block; width:80px;" data-qtid="{5}" value="1" min="1" /></span>' +
                        '<span>&ensp;' + window.OELang.point + '</span>' +
                        '</div>';


                    var content = ["<div class='qt-counts-list' id='catid_" + catid + "'>", qcByC.map(function (qc) {
                        var value = qc.hasOwnProperty('value') ? qc.value : 0;
                        return template.format(qtKeyValue[qc.qtid].label, qc.counts, value, qc.counts, qc.qtid, qc.qtid);
                    }).join(''), "</div>"].join('');

                    var categorySelectBox = randomCateLi.find('.category-select-box');
                    $(categorySelectBox).empty();
                    $(content).hide().appendTo($(categorySelectBox)).slideDown();


                    // onShowQuestionType(pLi);
                    categorySelectTips(randomCateLi, qcByC);//当前选择共包含20题
                    updateCategoryTotalScore(randomCateLi);


                    var activeTabPaneEl = randomCateLi.find(".selected-category-expand-details .tab-pane.active");
                    var randomDiffLevelSelectEl = $(activeTabPaneEl).find('.random-diff-level-select')
                    randomCateLi.find(".selected-questions-count-and-points").find('.select-count').text(0);
                    randomCateLi.find(".selected-questions-count-and-points").find('.select-point').text(0);
                }else{
                    alert(data.error)
                }
            }).fail(function (e) {
                alert(window.OELang.noNetworkTip)
            });
        }

        function categorySelectTips(pLi, qcByC){
            var categoryTotalQuestionCount = 0;//
            qcByC.map(function (qc) {
                categoryTotalQuestionCount += Number(qc.counts);
            });
            pLi.find('.can-selected-questions-count').find('.all-count-num').text(categoryTotalQuestionCount);
        }

        function showSelectedLabels(pLi){
            var selectedData = $(pLi).data('selected-data');
            if(selectedData == undefined || selectedData.length <= 0){
                return;
            }

            if(typeof selectedData != "object"){
                selectedData = JSON.parse(selectedData);
            }

            var labels = selectedData.labels;
            if(!labels || labels.length <= 0){
                return;
            }

            var activeTabPaneEl = pLi.find(".selected-category-expand-details .tab-pane.active");
            var selectLabelElId = $(activeTabPaneEl).find('select[name="random-label-select"]').attr('id');

            $("#"+selectLabelElId).val(labels); // Select the option with a value of '1'
            $("#"+selectLabelElId).trigger('change'); // Notify any JS components that the value changed
        }


        function onExpandOrCollapseSelectedCategory(e){
            var self;
            var pLi = $(this).parents('li.random-cate-li');
            if($(this).hasClass("random-cate-li-header")){
                self = $(pLi.find('span.category-expand-collapse'));
            }else{
                self = $(this);
                e.preventDefault();
                e.stopPropagation();
            }

            var status = self.data('status') ? self.data('status') : 'closed',
                isWrong = Number(pLi.data('from'));
            var catid = pLi.data("catid");


            if(status === "closed"){
                self.data('status', 'open');
                var qcByC = pLi.data('qcbyc');
                var displayQcByC = function () {
                    var template = $("#questionTypeDetails").text().trim(),
                        qtKeyValue = {};
                    template = '<div class="question-type-item">' + template +
                        '<span style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;</span>' +
                        '<span class="qts-score"><input type="number" class="form-control" style="display:inline-block; width:80px;" data-qtid="{5}" value="1" min="1" /></span>' +
                        '<span>&ensp;' + window.OELang.point + '</span>' +
                        '</div>';
                    window.YKS.questiontypes.map(function (qt) {
                        qtKeyValue[qt.qtid] = qt;
                    });
                    var content = ["<div class='qt-counts-list' id='catid_" + catid + "'>", qcByC.map(function (qc) {
                        var value = qc.hasOwnProperty('value') ? qc.value : 0;
                        return template.format(qtKeyValue[qc.qtid].label, qc.counts, value, qc.counts, qc.qtid, qc.qtid);
                    }).join(''), "</div>"].join('');
                    var selectedCategoryExpandDetails = $("#selectedCategoryExpandDetails").text().format(catid).trim();
                    $(selectedCategoryExpandDetails).appendTo(pLi);

                    if(isWrong) {
                        pLi.find('a[href="#selectQuestionFromWrongBank{0}"]'.format(catid)).tab('show');
                    }else {
                        pLi.find('a[href="#selectQuestionFromBank{0}"]'.format(catid)).tab('show');
                    }
                    var categorySelectBox = pLi.find('.category-select-box');
                    $(content).hide().appendTo($(categorySelectBox)).slideDown();

                    var labelData = JSON.parse($('input#randomLabelsData').val());
                    var liLabels = pLi.data('labels');
                    if(liLabels != null && liLabels.length > 0){
                        labelData = JSON.parse(liLabels);
                    }
                    $('#qs-random-select').find("#randomLabelSelect{0}".format(catid)).select2({
                        data:labelData,
                        placeholder: window.OELang.search,
                        width:250,
                        multiple: "multiple",
                        language:{
                            noResults:function(){
                                return window.OELang.noSearchResult;
                            }
                        }
                    }).on("select2:select",function(e){
                        var dataArray = $(this).select2('data');
                        getQuestionsCountByCategory(pLi,null, null);

                    }).on("select2:opening",function(e){
                        var dataArray = $(this).select2('data');
                    }).on("select2:unselect",function(e){
                        getQuestionsCountByCategory(pLi,null, null);
                    });

                    //错题抽取的标签
                    $('#qs-random-select').find("#wrongRandomLabelSelect{0}".format(catid)).select2({
                        data:labelData,
                        placeholder: window.OELang.search,
                        width:250,
                        multiple: "multiple",
                        language:{
                            noResults:function(){
                                return window.OELang.noSearchResult;
                            }
                        }
                    }).on("select2:select",function(e){
                        var dataArray = $(this).select2('data');
                        getQuestionsCountByCategory(pLi,null, null);

                    }).on("select2:opening",function(e){

                    }).on("select2:unselect",function(e){
                        getQuestionsCountByCategory(pLi,null, null);
                    });


                    onShowQuestionType(pLi);
                    categorySelectTips(pLi, qcByC)
                    updateCategoryTotalScore(pLi);
                    showSelectedLabels(pLi);
                };

                if(!qcByC){
                    self.find('i.fa-angle-down').removeClass("fa-angle-down").addClass("fa-spin fa-spinner");
                    var qCountData = {
                        catid: catid,
                        isWrong:isWrong,
                        diffLevel:"",
                        labelId:"",
                        getLabel:1
                    }

                    $.get(window.YKS.getQuestionsCountByCategory, qCountData).done(function(data){
                        data = $.parseJSON(data);
                        if(data.status === "ok"){
                            qcByC = data.questionsCount;
                            pLi.data('qcbyc', JSON.stringify(qcByC));
                            pLi.data('labels',JSON.stringify(data.labels));
                            displayQcByC(qcByC);
                        }else{
                            alert(data.error);
                        }
                        self.find('i.fa-spinner').addClass("fa-angle-down").removeClass("fa-spin fa-spinner");
                        self.removeClass('expand').addClass('collapse');
                    }).fail(function (e) {
                        self.find('i.fa-spinner').addClass("fa-angle-down").removeClass("fa-spin fa-spinner");
                        alert(window.OELang.noNetworkTip)
                    });
                }else{
                    qcByC = $.parseJSON(qcByC);
                    self.removeClass('expand').addClass('collapse');
                    displayQcByC();
                }
            }else{
                var selectedCatExpandDetails = pLi.find('.selected-category-expand-details');
                selectedCatExpandDetails.slideUp(function () {
                    selectedCatExpandDetails.remove();
                });
                self.removeClass('collapse').addClass('expand');;
                self.data('status', 'closed');
                onHideQuestionType(pLi);

                $('#qs-random-select').find("#randomLabelSelect{0}".format(pLi.data('catid'))).select2("destroy");
                $('#qs-random-select').find("#wrongRandomLabelSelect{0}".format(pLi.data('catid'))).select2("destroy");
            }


        }
        $('#qs-random-select').on('click','#choose-category-3', onChooseCategories3);
        //---分类选择窗口end---

        $(document).on('click','i.fa-clock-o',function(e){
            e.preventDefault();
            var isTheSame = isTheSamePart();
            if(!isTheSame){
                alert(window.OELang.preAndRandomModeIsDifferent);
                return false;
            }
            var self = $(this);
            var parentSection = self.parents('div.section');
            var examTimeSettingsBox = $('#examTimeSettingsBox').html();
            var examTimeType = $('.exam-info-panel').find('li.exam-time').data('type');

            var questionTimeLimit = self.data('q-time') == undefined ? 0 : self.data('q-time');
            var sectionTimeLimit = self.data('time') == undefined ? 30 : self.data('time');


            var setTimeBox = new jBox('Modal',{
                title:"",
                id:'examTimeSettingsBoxId',
                content:examTimeSettingsBox,
                onCreated:function(){
                    if(parentSection.length <= 0){
                        $('a[href="#section-time-settings"]').find('span').text(window.OELang.examTimeLimit);
                        $('#section-time-settings span.section-time-limit-tips').text(window.OELang.limitTheTotalLengthOfExam);
                    }
                    $('#questions-time-settings input[name="question_limit_time"]').val(questionTimeLimit)
                    $('#section-time-settings input[name="time_limit"]').val(sectionTimeLimit);

                    if(questionTimeLimit > 0){
                        $('a[href="#questions-time-settings"]').tab('show');
                    }else{
                        $('a[href="#section-time-settings"]').tab('show');
                    }

                    $('#examTimeSettingsBoxId').find('.jBox-title').css('display','none');

                    $('#examTimeSettingsBoxId').on('click','a.cancel',function(e){
                        e.preventDefault();
                        e.stopPropagation();
                        setTimeBox.close();
                    }).on('click','a.confirm',function(e){
                        e.preventDefault();
                        e.stopPropagation();

                        var activeTabPane = $('.exam-time-settings-box').find('.tab-pane.active');
                        var timeText = "";
                        if($(activeTabPane).attr('id') == 'questions-time-settings'){
                            questionTimeLimit = $('#questions-time-settings input[name="question_limit_time"]').val();
                            sectionTimeLimit = 30;
                            timeText = window.OELang.examInfoTotalTime.format(questionTimeLimit);
                        }else{
                            questionTimeLimit = 0;
                            sectionTimeLimit = $('#section-time-settings input[name="time_limit"]').val();
                            if(!examTimeType && sectionTimeLimit <= 0 ){
                                alert(window.OELang.sectionTimeMustLarge);
                                return false;
                            }
                            timeText = window.OELang.examInfoTotalTime.format(sectionTimeLimit);
                        }

                        self.data('q-time',questionTimeLimit);
                        self.data('time',sectionTimeLimit);
                        if(examTimeType){
                            var parentLi = $('.exam-info-panel').find('li.exam-time');
                            parentLi.html(timeText);
                            parentLi.data('q-time',questionTimeLimit);
                            parentLi.data('exam-time',sectionTimeLimit);
                            parentLi.data('type',1);
                        }
                        $('.exam-info-panel').find('li.exam-time').data('type',examTimeType);
                        updateExamInfo(iscn);
                        setTimeBox.close();
                    })
                },
                onCloseComplete:function(e){
                    setTimeBox.destroy();
                }
            })
            if(examTimeType){
                if(parentSection.length > 0){
                    NW.showCustomConfirmDialog(window.OELang.notice,window.OELang.sure,window.OELang.cancel,window.OELang.questionTimeToExamTimeTips,function(resp){
                        if(resp == "yes"){
                            examTimeType = 0;
                            setTimeBox.open();
                        }
                    })
                }else{
                    examTimeType = 1;
                    setTimeBox.open();
                }
            }else{
                examTimeType = 0;
                setTimeBox.open();
            }

        }).on('click','.section-span-title',function(e){
            e.preventDefault();
            var self = $(this);
            titleAndDescriptionTottle(self,'.section-title-input',0);
        }).on('click','.section-span-description',function(e){
            e.preventDefault();
            var self = $(this);
            titleAndDescriptionTottle(self,'.section-description-tips',0);
        }).on('blur','.section-description-tips input',function(e){
            e.preventDefault();
            var self = $(this);
            titleAndDescriptionTottle(self,'.section-description-tips',1);
        }).on('blur','.section-title-input input',function(e){
            e.preventDefault();
            var self = $(this);
            titleAndDescriptionTottle(self,'.section-title-input',1);
        }).on('click','.section .section-expand-collapse',function(e){
            e.preventDefault();
            var self = $(this);
            var sectionParent = self.parents('div.section');
            var examType = self.parents('.tab-pane.active').attr("id") == "qs-pre-select" ? 0 : 1;
            var targetEl = examType ? sectionParent.find('ul#selected-category-list') : sectionParent.find("table#questionList");
            var tipsEl = sectionParent.find('.qts-counts-tip').html();
            var descriptionEl = sectionParent.find('.section-description-tips');

            if(self.hasClass('collapse')){
                self.removeClass('collapse').addClass('expand');
                sectionParent.removeClass('section-collapse').addClass('section-expand');
                var tmp = '{0}<i class="fa fa-angle-up" aria-hidden="true"></i>'.format(window.OELang.collapse);
                self.html(tmp);
                targetEl.fadeIn();
            }else{
                self.removeClass('expand').addClass('collapse');
                sectionParent.removeClass('section-expand').addClass('section-collapse');
                var tmp = '{0}<i class="fa fa-angle-down" aria-hidden="true"></i>'.format(window.OELang.expand);
                self.html(tmp);
                targetEl.fadeOut();
            }
        }).on('click','.exam-info-panel .edit-exam-time',function(e){
            e.preventDefault();
            var isTheSame = isTheSamePart();
            if(!isTheSame){
                alert(window.OELang.preAndRandomModeIsDifferent);
                return false;
            }
            var self = $(this);
            var parentLi = $(self).parents('li');
            var examTimeType = parentLi.data('type');//type为1使用的是试卷时间，否则使用的是部分的时间

            var examTimeSettingsBox = $('#examTimeSettingsBox').html();

            var questionTimeLimit = parentLi.data('q-time') == undefined ? 0 : parentLi.data('q-time');
            var examTimeLimit = parentLi.data('exam-time') == undefined ? 30 : parentLi.data('exam-time');


            var setTimeBox = new jBox('Modal',{
                title:"",
                id:'examTimeSettingsBoxId',
                content:examTimeSettingsBox,
                onCreated:function(){
                    $('a[href="#section-time-settings"]').find('span').text(window.OELang.examTimeLimit);
                    $('#section-time-settings span.section-time-limit-tips').text(window.OELang.limitTheTotalLengthOfExam);

                    $('#questions-time-settings input[name="question_limit_time"]').val(questionTimeLimit)
                    $('#section-time-settings input[name="time_limit"]').val(examTimeLimit);

                    if(questionTimeLimit > 0){
                        $('a[href="#questions-time-settings"]').tab('show');
                    }else{
                        $('a[href="#section-time-settings"]').tab('show');
                    }

                    $('#examTimeSettingsBoxId').find('.jBox-title').css('display','none');

                    $('#examTimeSettingsBoxId').on('click','a.cancel',function(e){
                        e.preventDefault();
                        e.stopPropagation();
                        setTimeBox.close();
                    }).on('click','a.confirm',function(e){
                        e.preventDefault();
                        e.stopPropagation();

                        var activeTabPane = $('.exam-time-settings-box').find('.tab-pane.active');
                        var timeText = "";
                        if($(activeTabPane).attr('id') == 'questions-time-settings'){
                            questionTimeLimit = $('#questions-time-settings input[name="question_limit_time"]').val();
                            examTimeLimit = 30;
                            timeText = window.OELang.examInfoEachQuetionTime.format(questionTimeLimit);
                        }else{
                            questionTimeLimit = 0;
                            examTimeLimit = $('#section-time-settings input[name="time_limit"]').val();
                            timeText = window.OELang.examInfoTotalTime.format(examTimeLimit);
                        }

                        parentLi.html(timeText);
                        parentLi.data('q-time',questionTimeLimit);
                        parentLi.data('exam-time',examTimeLimit);
                        parentLi.data('type',1);
                        // updateExamInfo(iscn);
                        setTimeBox.close();
                    })
                },
                onCloseComplete:function(e){
                    setTimeBox.destroy();
                }
            })
            if(!examTimeType){
                NW.showCustomConfirmDialog(window.OELang.notice,window.OELang.sure,window.OELang.cancel,window.OELang.examTimeToQuestionTimeTips,function(resp){
                    if(resp == "yes"){
                        setTimeBox.open();
                    }
                })
            }else{
                setTimeBox.open();
            }

        }).on('click','.change-to-old',function(e){
            //切换旧版本
            e.preventDefault();
            var self = $(this);

            var theExamType = Number($(".questions-sources li.active").attr("et"))
            var preMode = $('#qs-pre-select').find('.pre-high-level-btn-groups').hasClass('show') ? 1 : 0;
            var randomMode = Number($('#qs-random-select').find('a[href="#changeMode"]').data('type'));
            var needChangeMode = 0;
            if(theExamType === window.YKS.questionsSource.predefineAndRandom){
                if(preMode || randomMode) needChangeMode = 1;
            }else if(theExamType === window.YKS.questionsSource.random){
                if(randomMode) needChangeMode = 1;
            }else{
                if(preMode) needChangeMode = 1;
            }
            if(needChangeMode){
                NW.messageBox(window.OELang.notice,window.OELang.changeModeTips);
                return false;
            }

            var data = {
                eid:eid,
                isStepTwoNew:0
            }
            data[token] = 1;
            NW.makeLoading(self);
            $.post(window.YKS.changeExamVersion,data).done(function(rdata){
                rdata = $.parseJSON(rdata);
                if(rdata.status == "ok"){
                    var actionUrl = $(self).attr('href');
                    window.location.href = actionUrl;
                }else{
                    alert(rdata.msg);
                }
                NW.makeUnLoading(self);
            }).fail(function (e) {
                alert(e)
                NW.makeUnLoading(self);
            });


        }).on('click','.regular-ques .ques-score',function(e){
            e.preventDefault();
            e.stopPropagation();
            var self = $(this);
            var parentTd = self.parents('td.score');
            var score = Number(parentTd.data('score')), qscore = Number(parentTd.data('qscore'));
            var inputEl = $('<input type="number" step="0.1">');
            if(self.find('input').length > 0) return true;

            self.html(inputEl)
            inputEl.css('width',"50px");
            inputEl.css('height',"22px");
            inputEl.val(score > 0 ? score : qscore);
            inputEl.on('blur',function (e){
                var s = Number(inputEl.val());
                parentTd.data('score', s);
                s = s > 0 ? s : qscore
                self.text("{0}{1}".format(s,window.OELang.point));
                $('.regular-ques .right-top-tips').removeClass('hidden');
                updateExamInfo(iscn);
                $(self).jBox('Tooltip',{
                    theme: 'TooltipDark',
                    delayClose:1,
                    getContent:'title'
                })
            }).on('hover focus',function(e){
                $('.regular-ques .right-top-tips').addClass('hidden');
            }).on('keydown',function(e){
                if (e.keyCode == 13) {//判断是否为回车键，Event是window对象的一个属性，是全局的。
                    e.keyCode = 0;//屏蔽回车键
                    e.returnValue = false;
                    return false;
                }
            })

            //修复firefox浏览器获取焦点无效问题
            setTimeout(function (e) {
                inputEl.focus();
            }, 100);
        }).on('click',".random-questions-sort a.sort-type-option",function(e){
            e.preventDefault();
            var self = $(this);
            var title = self.data("title");
            var randomQuestionsSortEl = self.parents('.random-questions-sort');
            var buttonEl = $(randomQuestionsSortEl).find('button.dropdown-toggle');
            var htmlText = title + '<i class="fa fa-angle-down"></i>';
            buttonEl.html(htmlText);

            var value = self.data('value');
            $(randomQuestionsSortEl).data('value',value);

        }).on("change", '#section-time-settings input[name="time_limit"]', function(e){
            var self = $(this);
            var value = self.val();
            if(value > 300) {
                self.val(300);
            } else if(value < 0) {
                self.val(0);
            }
        }).on("change", '#questions-time-settings input[name="question_limit_time"]', function(e){
            var self = $(this);
            var value = self.val();
            if(value > 3600) {
                self.val(3600);
            } else if(value < 0) {
                self.val(0);
            }
        }).on('click','.random-questions-sort a.sort-type-option .random-details',setRandomExamRandomQuestion)

        function setRandomExamRandomQuestion(e){
            e.preventDefault();
            var self = $(this);
            var randomQuestionsSortEl = self.parents('.random-questions-sort');
            var box ,boxContent = $('#randomExamRandomQuestionSettingBox').html();
            box = new jBox('Modal', {
                title:window.OELang.examQuestionsOrderByType,
                content:boxContent,
                maxWidth:610,
                onCreated:function(){
                    var typesEl, qtKeyValue = window.YKS.randomDefaultQuestiontypes, typesValue = $(randomQuestionsSortEl).data('types');

                    if(typesValue.length > 0){
                        qtKeyValue = new Array();
                        typesValue = typesValue.split(',');
                        $.each(typesValue,function(index,type){
                            window.YKS.questiontypes.map(function(qt){
                                if(type == qt.qtid){
                                    var obj = {
                                        id:qt.qtid,
                                        label:qt.label
                                    };
                                    qtKeyValue.push(qt);
                                }
                            })
                        });
                    }

                    Sortable.create(document.getElementById("questionTypesOrder"), {
                        animation: 150
                    });

                    typesEl = qtKeyValue.map(function(el){
                        return '<span class="q-type" qtype="{0}">{1}</span>'.format(el.qtid,el.label);
                    }).join("");
                    $('.random-question-setting-box').find('div.question-types').empty();
                    $('.random-question-setting-box').find('div.question-types').html(typesEl);

                    $('.random-question-setting-box').on('click','a.cancel',function(e){
                        box.close();
                    }).on('click','a.confirm',function(e){
                        var typeValues = new Array();
                        $('#questionTypesOrder').find('span.q-type').each(function(index,element){
                            typeValues.push(Number($(this).attr("qtype")));
                        })
                        $(randomQuestionsSortEl).data('types',typeValues.join(','));
                        box.close();
                    })
                },
                onCloseComplete:function(){
                    box.destroy();
                }
            })
            box.open();

        }
        //0click,1blur
        function titleAndDescriptionTottle(thisTarget,targetParent,type){
            var parentBox = $(thisTarget).parents(targetParent);

            if(type){
                //blur
                var showEl = parentBox.find('span');
                var text = $(thisTarget).val();
                showEl.text(text);
                if(text == "") return;
                $(thisTarget).addClass('hidden');
                $(showEl).removeClass('hidden').addClass('show');

            }else{
                //click
                var showEl = parentBox.find('input');
                $(thisTarget).addClass('hidden');
                var text = $(thisTarget).text();
                $(showEl).removeClass('hidden').addClass('show').focus().val(text);
            }

        }
        function onShowQuestionType(pLi){
            var span1 = pLi.find("span.qts-count.first");
            span1.find("input").hide();
            var span2 = pLi.find('span.qts-score.first');
            span2.hide();
            var countsText = span1.find("strong");
            if(countsText.length<=0){
                countsText = $("<strong>0</strong>");
                span1.append(countsText);
            }

            var data = pLi.data("selected-data"), catid = pLi.data('catid');
            if(data){
                if(typeof data == "string"){
                    data = $.parseJSON(data);
                }
                var bankType = Number(data.type);
                var bankEl = $('#selectQuestionFromBank{0}'.format(catid));
                if(bankType){
                    //从错题库抽取
                    bankEl = $('#selectQuestionFromWrongBank{0}'.format(catid));
                }
                var diffLevel = data.diffLevel;
                countsText.html(data.count);
                var qtCounts = data.qtCounts;
                if(qtCounts){
                    for(var i=0; i<qtCounts.length; i++){
                        var qt = qtCounts[i];
                        bankEl.find("span.qts-count input[data-qtid='"+qt.qtid+"']").val(qt.count);
                        bankEl.find('span.qts-score input[data-qtid="' + qt.qtid + '"]').val(qt.score ? qt.score : 1);
                    }
                }

                //难易程度
                if(diffLevel > 0){
                    var inputEl = bankEl.find('.random-diff-level-select label input[value="{0}"]'.format(diffLevel));
                    $(inputEl).parents('label').addClass('active');
                }

            }


        }

        function onHideQuestionType(pLi){
            var span1 = pLi.find("span.qts-count.first");
            var span2 = pLi.find('span.qts-score.first');

            var data = pLi.data("selected-data");
            if(data) {
                if(typeof data == "string"){
                    data = $.parseJSON(data);
                }
                if(data.hasOwnProperty("count") && data.count > 0 && data.qtCounts.length>0){
                    return;
                }
            }

            span1.find("input").show().val(span1.find("strong").text()).css('display', 'inline-block');
            span2.show();
            span1.find("strong").remove();
        }

        function updateTotal(total){
            var categories = $(".selected-categories li").length;
            $(".qts-counts-tip").find('span.question-count').html(window.OELang.selectedncategory.format(categories, total));

            if(total>0){
                $(".qs-actions a").removeClass("disabled");
            }else{
                $(".qs-actions a").addClass("disabled");
            }
        }

        function calculateTotal(){
            var count = $(".selected-categories li").map(function () {
                var count = $(this).data("counts");
                return count ? Number(count) : 0;
            }).get().reduce(function (acc, v) {
                return Number(acc) + Number(v);
            });
            return count.isInteger() ? count : count.toFixed(1);
        }

        function updateScore() {
            var totalScore = 0;
            var categories = $('.selected-categories li');
            for (var i = 0; i < categories.length; i++) {
                var obj = $(categories[i]);
                // var str = obj.data('selected-data');
                if (obj.data('selected-data') == undefined) {
                    continue;
                }
                var seledData = typeof obj.data('selected-data') == 'string' ? JSON.parse(obj.data('selected-data')) : obj.data('selected-data');
                var categoryScore = 0;
                if (seledData.qtCounts.length > 0) {
                    for (var j = 0; j < seledData.qtCounts.length; j++) {
                        var obj1 = seledData.qtCounts[j];
                        categoryScore += Number(obj1.count) * Number(obj1.score);
                    }
                } else {
                    categoryScore = Number(seledData.count) * Number(seledData.score);
                }
                obj.find('span.category-total-score').html(window.OELang.totalNScore.format('<b>' + (categoryScore.isInteger() ? categoryScore : categoryScore.toFixed(1)) + '</b>'));
                totalScore += categoryScore;
            }
            $(".qts-counts-tip").find('span.exam-total-score').html(window.OELang.totalNScore.format('<b>' + (totalScore.isInteger() ? totalScore : totalScore.toFixed(1)) + '</b>'));
        }

        function showQuestionTypeCounts(pLi, qtCounts) {
            if(qtCounts && qtCounts.length>0){
                var qtLists = pLi.find("span.qt-lists");
                var qtKeyValue = {};
                window.YKS.questiontypes.map(function(qt){
                    qtKeyValue[qt.qtid] = qt;
                })


                if(qtLists.length==0){
                    qtLists = $("<span class='qt-lists'></span>").insertBefore(pLi.children("span:last"));
                }
                var content = qtCounts.map(function(v){
                    var qtid = v.qtid,
                        counts = v.count;
                    if(counts<=0) return "";
                    var colors = [
                        'badge-default',
                        'badge-primary',
                        'badge-info',
                        'badge-success',
                        'badge-danger',
                        'badge-warning'
                    ]
                    return "<b class='badge {2}'>{0} {1}</b>".format(qtKeyValue[qtid].label, counts, colors[qtid%colors.length]);
                }).join(" ");
                qtLists.html(content);
            }else{
                pLi.find("span.qt-lists").remove();
            }
        }


        function onClickSelectedCategory(e){
            var self = $(this),
                status = self.data('status') ? self.data('status') : 'closed',
                pLi = self.parents("li");
            var catid = pLi.data("catid");

            if(status === "closed"){
                self.data('status', 'open');
                var qcByC = pLi.data('qcbyc');
                var displayQcByC = function () {
                    var template = $("#qtc-template").text().trim(),
                        qtKeyValue = {};
                    template = '<div class="question-type-item">' + template +
                        '<span style="padding-left: 28px;">' + window.OELang.eachQuestion + '&ensp;</span>' +
                        '<span class="qts-score"><input type="number" class="form-control" style="display:inline-block; width:80px;" data-qtid="{5}" value="1" min="1" /></span>' +
                        '<span>&ensp;' + window.OELang.point + '</span>' +
                        '</div>';
                    window.YKS.questiontypes.map(function (qt) {
                        qtKeyValue[qt.qtid] = qt;
                    });
                    var content = ["<div style='padding-left: 28px;' class='qt-counts-list' id='catid_" + catid + "'>", qcByC.map(function (qc) {
                        var value = qc.hasOwnProperty('value') ? qc.value : 0;
                        return template.format(qtKeyValue[qc.qtid].label, qc.counts, value, qc.counts, qc.qtid, qc.qtid);
                    }).join(''), "</div>"].join('');
                    $(content).hide().appendTo(pLi).slideDown();
                    onShowQuestionType(pLi);
                };

                if(!qcByC){
                    self.find('i.fa-chevron-circle-down').removeClass("fa-chevron-circle-down").addClass("fa-spin fa-spinner");
                    $.get(window.YKS.getQuestionsCountByCategory, {catid: catid}).done(function(data){
                        data = $.parseJSON(data);
                        if(data.status === "ok"){
                            qcByC = data.questionsCount;
                            pLi.data('qcbyc', JSON.stringify(qcByC));
                            displayQcByC(qcByC);
                        }else{
                            alert(data.error);
                        }
                        self.find('i.fa-spinner').addClass("fa-chevron-circle-up").removeClass("fa-spin fa-spinner");
                    }).fail(function (e) {
                        self.find('i.fa-spinner').addClass("fa-chevron-circle-up").removeClass("fa-spin fa-spinner");
                        alert(window.OELang.noNetworkTip)
                    });
                }else{
                    qcByC = $.parseJSON(qcByC);
                    self.find('i.fa-chevron-circle-down').addClass("fa-chevron-circle-up").removeClass("fa-chevron-circle-down");
                    displayQcByC();
                }
            }else{
                var div = $(".selected-categories").find("div#catid_"+catid);
                div.slideUp(function () {
                    div.remove();
                });
                self.find('i.fa-chevron-circle-up').removeClass("fa-chevron-circle-up").addClass("fa-chevron-circle-down");
                $(this).data('status', 'closed');
                onHideQuestionType(pLi);
            }
        }

        function checkQuestionsDuplicate() {
            var data = {
                eid: eid
            };
            data[token] = 1;
            $.post({
                url: window.YKS.checkDuplicateQuestionsInExam,
                data: data,
                dataType: 'json',
                success: function (data, status, xhr) {
                    if (data.status == 'ok') {
                        var content = $($.trim($('#jBoxContentHtml').html())).find('div[name="jbct1"]');
                        var jbox = new jBox('Modal', {
                            title: window.OELang.guideline,
                            content: content,
                            width: 380,
                            height: 130,
                            closeButton: 'title',
                            onCreated: function () {
                                content.on('click', 'button', function (e) {
                                    jbox.close();
                                });
                            },
                            onCloseComplete: function () {
                                jbox.destroy();
                                NW.makeUnLoading($('#btn-check-duplicate'));
                            }
                        });

                        var duplicates = data.duplicates;
                        if (duplicates.length > 0) {
                            markRepeatQuestions(duplicates);
                            content.find('p').text(window.OELang.existQuestionsDuplicateTip.format(duplicates.length));
                        }

                        jbox.open();
                    } else {
                        alert(data.error);
                    }
                },
                error: function (xhr, status, error) {
                    alert('ajax error');
                },
                complete: function (xhr, status) {
                    // alert('complete');
                }
            });
        }
        function checkQuestionsDuplicate() {
            var target = $('#qs-pre-select .btn-groups #btn-check-duplicate');
            if($('#qs-pre-select .pre-high-level-btn-groups').hasClass('show')){
                target = $('#qs-pre-select .pre-high-level-btn-groups').find('#btn-check-duplicate');
            }

            var data = {
                eid: eid
            };
            data[token] = 1;
            $.post({
                url: window.YKS.checkDuplicateQuestionsInExam,
                data: data,
                dataType: 'json',
                success: function (data, status, xhr) {
                    if (data.status == 'ok') {
                        var content = $($.trim($('#jBoxContentHtml').html())).find('div[name="jbct1"]');
                        var duplicates = data.duplicates;
                        var jbox = new jBox('Modal', {
                            title: window.OELang.guideline,
                            content: content,
                            width: 380,
                            height: 130,
                            closeButton: 'title',
                            onCreated: function () {
                                content.on('click', 'button', function (e) {
                                    jbox.close();
                                });
                            },
                            onCloseComplete: function () {
                                jbox.destroy();
                                if(duplicates.length > 0){
                                    scrollToTarget($('#questionsListForm tr[qid="{0}"]:eq(0)'.format(duplicates[0].qid)));
                                }
                                NW.makeUnLoading($(target));
                            }
                        });

                        if (duplicates.length > 0) {
                            markRepeatQuestions(duplicates);
                            content.find('p').text(window.OELang.existQuestionsDuplicateTip.format(duplicates.length));
                        }

                        // if (duplicatesQids.length > 0) {
                        //     markPreExamRepeatQuestions(duplicatesQids);
                        //     content.find('p').text(window.OELang.existQuestionsDuplicateTip.format(duplicatesQids.length));
                        // }

                        jbox.open();
                    }else {
                        alert(data.error);
                    }
                },
                error: function (xhr, status, error) {
                    alert('ajax error');
                },
                complete: function (xhr, status) {
                    // alert('complete');
                }
            })
        }

        function markRepeatQuestions(duplicates) {
            var repeat = [];
            var tbody = $('#questionsListForm');
            tbody.find('tr').css('background-color', '');

            for (var i = 0; i < duplicates.length; i++) {
                var d = duplicates[i];
                if (!repeat[d.title]) {
                    repeat[d.title] = [];
                }
                repeat[d.title].push(d);
            }

            for (var j in repeat) {
                var color = window.randomColor();
                var r = repeat[j];
                if (r.length > 1) {
                    //var $pel;
                    for (var k = 0; k < r.length; k++) {
                        if (k === 0) continue;
                        var q = r[k];
                        var $el = tbody.find('tr[qid="' + q.qid + '"]');
                        $el.addClass('repeat-question');
                        $el.css('background-color', color);
                    }
                }
            }
        }
        function markPreExamRepeatQuestions(duplicatesQids){
            var tbody = $('#questionsListForm');
            tbody.find('tr').css('background-color', '');
            var repeat = [];

            $.each(duplicatesQids,function(index,qid){
                if($.inArray(qid,repeat) == -1){
                    var color = window.randomColor();
                    var $el = tbody.find('tr[qid="' + qid + '"]');
                    $el.addClass('repeat-question');
                    $el.css('background-color', color);
                }

            })

        }
        /**
         * 获取随机试卷或者固定试卷的部分信息
         * @param type 1固定试卷，0随机试卷
         * @returns {Array}
         */
        function getSections(type){
            var sections = new Array(), target;

            if(type){
                target = $('#qs-pre-select');
            }else{
                target = $('#qs-random-select');
            }
            target.find('div.section').each(function(index,element){
                var sectionId,sectionName,sectionTitle,sectionDescription,self=$(this),timeSettingBtn;
                sectionId = self.attr('sectionid');
                sectionName = self.find('label.section-name').text();
                sectionTitle = self.find('#section_{0}_title'.format(sectionId)).val();
                sectionDescription = self.find('.section-description-tips input').val();
                timeSettingBtn = self.find('i.time-setting-btn');
                var questionTimeLimit = $(timeSettingBtn).data('q-time');
                var sectionTimeLimit = $(timeSettingBtn).data('time');
                var randomoption = self.find('input[name="randomoption"]').prop('checked') ? 1 : 0;//选项随机


                var section = {
                    id:Number(sectionId),
                    name:$.trim(sectionName),
                    title:sectionTitle,
                    description:sectionDescription,
                    q_time_limit:questionTimeLimit,
                    time_limit:sectionTimeLimit,
                    randomoption:randomoption
                }
                if(type){
                    var randomQuestionElement = self.find('input[name="random_question"]');
                    var random_question = $(randomQuestionElement).prop('checked') ? (Number($(randomQuestionElement).val()) <= 0 ? 1 : Number($(randomQuestionElement).val())) : 0;
                    var random_question_type = $(randomQuestionElement).data('types');
                    if(!random_question_type){
                        var randomQuestionType = [];
                        window.YKS.randomDefaultQuestiontypes.map(function(qt){
                            randomQuestionType.push(qt.qtid);
                        })
                        random_question_type = randomQuestionType.join(',');
                    }
                    section["random_question"] = random_question;
                    section["random_question_type"] = random_question_type;

                    //每部分试题的数量
                    var sectionQuestionsCount = self.find('#questions-list tr').length;
                    section["count"] = sectionQuestionsCount;
                }else{
                    //随机试卷
                    var randomQuestionsSortEl = self.find('.random-questions-sort');
                    var questionOrder = $(randomQuestionsSortEl).data('value');
                    var randomExamRandomQuestionType = $(randomQuestionsSortEl).data('types');
                    section["questionorder"] = questionOrder;
                    section["random_exam_random_question_type"] = randomExamRandomQuestionType;

                    var sectionQuestionsCount = 0;

                    $(self).find("#selected-category-list li").map(function() {
                        var pLi = $(this), sectionId = 0;
                        var parentSection = $(pLi).parents('div.section');
                        if (parentSection.length > 0) {
                            sectionId = $(parentSection).attr('sectionid');
                        }
                        var selectedData = pLi.data("selected-data");
                        if (selectedData) {
                            if (typeof selectedData == "string") {
                                selectedData = $.parseJSON(selectedData);
                            }
                            sectionQuestionsCount += Number(selectedData.count);
                        }
                    })
                    section["count"] = sectionQuestionsCount;
                }
                sections.push(section);
            })

            return sections;
        }

        function getPreExamQidsWithSectionIds(){
            var qids = new Array();
            var sections = $('#qs-pre-select').find('div.section');

            if(sections.length <= 0){
                $('#qs-pre-select').find('tr').each(function(index,value){
                    var qid = $(this).attr('qid');
                    var adt = 0;
                    if($(this).find('a[href="#addition"]').attr("action") == "nonaddition"){
                        adt = 1;
                    }
                    if(qid){
                        qids.push({sectionId: 0, qid: Number(qid), adt: adt});
                    }
                })
            }else{
                sections.each(function(index,value){
                    var sectionId = $(this).attr('sectionid')
                    $(this).find('tr').each(function(i,v){
                        var qid = $(this).attr('qid');
                        var adt = 0;
                        if($(this).find('a[href="#addition"]').attr("action") == "nonaddition"){
                            adt = 1;
                        }
                        if(qid){
                            qids.push({sectionId: sectionId, qid: Number(qid), adt: adt});
                        }
                    })
                })
            }
            return qids;
        }

        if($('#qs-random-select').find('div.section').length > 0){
            $(document).find('div.section #selected-category-list').each(function(index,el){
                Sortable.create(el, {
                    animation: 150,
                    handle:'i.fa.fa-bars'
                });
            })
        }else{
            Sortable.create(document.getElementById('selected-category-list'), {
                animation: 150,
                handle:'i.fa.fa-bars'
            });
        }

        $("#qs-random-select").on("click", 'a[href="#deleteCategories"]', function (e) {
            e.preventDefault();
            var self = $(this);
            var sectionEl = self.parents('div.section');
            var targetEl = $('.qts-random-select-question');
            if(sectionEl.length > 0){
                targetEl = $(sectionEl);
            }
            //makeArray将一个类数组对象转换为真正的数组对象。
            var vals = $.makeArray($(targetEl).find(".checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            })

            if(vals.length <= 0){
                NW.messageBox(window.OELang.notice,window.OELang.pleaseSelectACategory);
                return false;
            }

            NW.showConfirmDialog(window.OELang.whetherToDeleteRandomExtractions,function(resp){
                if(resp == "yes"){
                    $.each(vals,function(index,catid){
                        targetEl.find("li.random-cate-li[data-catid='"+catid+"']").fadeOut(800, function() {
                            $(this).remove();
                            updateExamInfo(iscn);
                        });
                    })
                    var sectionEl = self.parents('div.section');
                    if(sectionEl.length > 0){
                        var groupCheckableEl = sectionEl.find('.section-title input.group-checkable');
                        groupCheckableEl.parent("span").removeClass("checked");
                    }else{
                        var buttonsGroupEl = self.parents("div.buttons-group");
                        var groupCheckableEl = $(buttonsGroupEl).find('input.group-checkable');
                        groupCheckableEl.parent("span").removeClass("checked");
                    }

                }
            })

        }).on('click','.random-cat-operation i.fa-pencil-square-o',onChooseCategories)
            // .on('click', 'span.qts-cate-name.main', onClickSelectedCategory)

        var currentQuestionSourcesSelectAElement = "";
        $(".questions-sources").on("show.bs.tab", function (e) {
            $(".qs-actions a").removeClass("disabled");
            var self = $(this);
            var standlone = self.data('standlone');
            var qids = getPreExamQidsWithSectionIds();
            var cateLiEls = $("#qs-random-select .selected-categories").find('li.random-cate-li');
            var theExamType = Number($(".questions-sources li.active").attr("et"));
            var isShowTips = false;
            if(theExamType == 4){
                if(qids.length >0 || cateLiEls.length > 0){
                    isShowTips = true;
                }
            }else if(theExamType == 1){
                if(cateLiEls.length > 0){
                    isShowTips = true;
                }
            }else{
                if(qids.length >0){
                    isShowTips = true;
                }
            }
            if(isShowTips && currentQuestionSourcesSelectAElement != e.target){
                e.preventDefault();//防止切换
                NW.showConfirmDialog(window.OELang.changeExamModeTips,function(resp){
                    if(resp == "yes"){
                        currentQuestionSourcesSelectAElement = e.target;
                        $(e.target).tab('show');

                    }
                })
            }
        }).on("shown.bs.tab", function (e) {
            var target = $('.questions-sources li.active');
            var et = target.attr('et');
            if(et == 4){
                $('.group-mode-sub').css('display','block');
                if(!($('.group-mode-sub a[href="#qs-pre-select"]').parent('li').hasClass('active') || $('.group-mode-sub a[href="#qs-random-select"]').parent('li').hasClass('active'))){
                    $('.group-mode-sub a[href="#qs-pre-select"]').parent('li').addClass('active');
                }
            }else{
                $('.group-mode-sub').css('display','none');
            }
            updateExamInfo(iscn);
        }).on('hide.bs.tab', function(e){


        });

        /**
         *
         * 检查固定试卷或者随机试卷的部分是否包含试题
         * @param $type 1固定，0随机
         * @returns {boolean}
         */
        function checkExamQuestions(type){
            var target = $('#qs-pre-select');
            var result = true;
           if(!type){
                target = $('#qs-random-select');
           }
           var sections = target.find('div.section');
           if(sections.length > 0){
               sections.each(function(index, el){
                   if(type){
                       if($(this).find('tr').length <= 0) {
                           result = false;
                       }
                   }else{
                       if($(this).find('li.random-cate-li').length <= 0) {
                           result = false;
                       }
                   }

               })
           }
           return result;
        }


        function isIncludeQuestions(){
            var result;
            var theExamType = Number($(".questions-sources li.active").attr("et"))
            // random: <?php echo ExamType::etRandomSelectQuestionAtBegin ?>,
            // predefine: <?php echo ExamType::etNormal ?>,
            if(theExamType == window.YKS.questionsSource.random){
                result = checkExamQuestions(0);
            }else if(theExamType == window.YKS.questionsSource.predefine){
                result = checkExamQuestions(1);
            }else{
                result = checkExamQuestions(0) && checkExamQuestions(1);
            }

            return result;
        }

        /**
         * 判断固定加随机试题是否同为标准或者同为高级
         * @returns {boolean}
         */
        function isTheSamePart(){
            var theExamType = Number($(".questions-sources li.active").attr("et"))
            if(theExamType === window.YKS.questionsSource.predefineAndRandom){
                var preExamMode = $('#qs-pre-select').find('div.show').find('a[href="#changeMode"]').data('type');
                var randomExamMode = $('#qs-random-select').find('a[href="#changeMode"]').data('type');
                if(preExamMode !== randomExamMode){
                    return false;
                }
            }
            return true;
        }

        $(".qs-actions").on("click", "a", function(e){
            e.preventDefault();

            //如果是部分，检测是否有部分不包含试题
            var doNotHaveQuestion = isIncludeQuestions();
            if(!doNotHaveQuestion){
                alert(window.OELang.someSectionDoNotHaveQuestion);
                return false;
            }

            var isTheSame = isTheSamePart();
            if(!isTheSame){
                alert(window.OELang.preAndRandomModeIsDifferent);
                return false;
            }

            function blockUI() {
                Metronic.blockUI({
                    message: window.OELang.loading,
                    target: $(".tabbable-line"),
                    overlayColor: 'none',
                    cenrerY: true,
                    boxed: true
                });
            }

            function unBlock() {
                Metronic.unblockUI($(".tabbable-line"));
            }

            function saveRandomSettings(callback){
                var qcats = [], cateOrders={}, index = 0, mType = 0, sections = new Array(), questionorder = "qt",
                    randomoption = 0, question_limit_time = 0, time_limit = 30, randomExamRandomQuestionType;

                if($("#qs-random-select").find('div.section').length > 0){
                    mType = 1;
                }
                if(mType){
                    sections = getSections(0);
                    sections = JSON.stringify(sections);
                }else{
                    // questionorder = $("#qs-random-select").find('select#order-questions').find("option:selected").val()

                    var randomQuestionsSortEl = $("#qs-random-select").find('.random-questions-sort');
                    questionorder = $(randomQuestionsSortEl).data('value');
                    randomExamRandomQuestionType = $(randomQuestionsSortEl).data('types');
                    if(randomExamRandomQuestionType.length <= 0 ){
                        randomExamRandomQuestionType = window.YKS.randomDefaultQuestiontypes.map(function(index,type){
                            return type.qtid;
                        }).join(',');
                    }
                    // section["questionorder"] = questionOrder;
                    // section["random_exam_random_question_type"] = randomExamRandomQuestionType;


                    time_limit = $('#qs-random-select').find('i.time-setting-btn').data('time');
                    question_limit_time = $('#qs-random-select').find('i.time-setting-btn').data('q-time');
                    randomoption = $('#qs-random-select').find('input[name="randomoption"]').prop('checked') ? 1 : 0;

                }

                var examTimeLi = $('.exam-info-panel').find('li.exam-time');
                if(Number($(examTimeLi).data('type'))) {
                    time_limit = $(examTimeLi).data('exam-time');
                    question_limit_time = $(examTimeLi).data('q-time');
                }

                $("#qs-random-select .selected-categories li.random-cate-li").map(function(){
                    var pLi = $(this),sectionId = 0;
                    var parentSection = $(pLi).parents('div.section');
                    if(parentSection.length > 0){
                        sectionId = $(parentSection).attr('sectionid');
                    }
                    var selectedData = pLi.data("selected-data");
                    if(selectedData){
                        if( typeof selectedData == "string"){
                            selectedData = $.parseJSON(selectedData);
                        }
                        qcats.push({
                            orders: index++,
                            sectionId:sectionId === undefined ? 0 : sectionId,
                            catid: pLi.data("catid"),
                            type:selectedData.type,
                            diffLevel:selectedData.diffLevel,
                            labelIds:selectedData.labels ? selectedData.labels : "",
                            counts: selectedData.count,
                            score: selectedData.score ? selectedData.score : 1,
                            qtCounts: selectedData.qtCounts
                        })
                    }
                    cateOrders[pLi.data("catid")] = index++;
                })

                var postData = {
                    eid: eid,
                    mType:mType,
                    randomSections:sections,
                    "qcats": JSON.stringify(qcats),
                    "questionorder":questionorder,
                    "random_exam_random_question_type":randomExamRandomQuestionType,
                    randomoption:Number(randomoption),
                    question_limit_time:Number(question_limit_time),
                    time_limit:Number(time_limit)
                }
                postData[token] = 1;

                $.post( window.YKS.saveRandomSectionsQuestionSettings, postData ).done(function(d){
                    d = $.parseJSON(d);
                    if(d.status == "ok"){
                        callback(true, "");
                    }else{
                        callback(false, d.msg);
                    }
                }).fail(function(d){
                    callback(false, d);
                })
            }

            function changeExamType(type, callback){
                var allSectionScore = Number($('.exam-info-panel li.exam-score').data('score'));
                var allSectionQuestionCount = Number($('.exam-info-panel li.exam-questions').data('count'));
                var allSectionTime = Number($('.exam-info-panel li.exam-time').data('time'));
                var examTimeType = Number($('.exam-info-panel li.exam-time').data('type'));//1表示使用试卷时间，否则使用部分时间
                var examTime = Number($('.exam-info-panel li.exam-time').data('exam-time'));
                var examQuestionTime = Number($('.exam-info-panel li.exam-time').data('q-time'));
                var sandalone = $('input[name="sandalone"]').val();
                var isPractice = $('input[name="examOrPractice"]').val();
                var postData = {
                    type: type,
                    eid: eid,
                    allSectionTime:allSectionTime,
                    allSectionScore:allSectionScore,
                    allSectionQuestionCount:allSectionQuestionCount,
                    examTimeType:examTimeType,
                    examTime:examTime,
                    examQuestionTime:examQuestionTime,
                    sandalone: sandalone,
                    isPractice: isPractice

                }
                postData[token] = 1;

                $.post( window.YKS.changeExamTypeURLNew, postData).done(function(data){
                    callback( true, data );
                }).fail(function(data){
                    callback( false, data );
                })
            }

            function saveExam(success, data){
                if(success && data == "ok"){
                    if( examType == window.YKS.questionsSource.random){//保存随机试卷
                        saveRandomSettings(function(success, data){
                            unBlock();

                            if( success ){
                                savedSuccess();
                                window.location.href = link;
                            }else{
                                self.html(originHtml);
                                self.removeClass("disabled");

                                Metronic.alert({
                                    type: 'danger',
                                    icon: 'error',
                                    message: data,
                                    container: $(".qts-random-select-question"),
                                    place: 'prepend'
                                });
                            }
                        })
                    }else{
                        $("#nextLink").val(link);
                        updateQuestionScore();
                        var mType = Number($('input[name="mType"]').val());//固定试卷高级模式1，标准模式0
                        var data = $("#questionsListForm").serialize();
                        var random_question = 0, randomoption = 0, time_limit = 30, q_time_limit = 0, random_question_type = "";


                        if(mType){
                            var sections = getSections(1);
                            sections = JSON.stringify(sections);
                            //不能用sections作为参数
                            // data = data + '&' + $.param({'sectionParams:':sections});
                            data = $.param({"sectionParams":sections}) + '&' + data;
                        }else{
                            var randomQuestionEl = $('#qs-pre-select').find('input[name="random_question"]');
                            random_question = $(randomQuestionEl).prop('checked') ? (Number($(randomQuestionEl).val()) > 0 ? Number($(randomQuestionEl).val()) :1) : 0;
                            random_question_type = $(randomQuestionEl).data('types');
                            if(!random_question_type){
                                var randomQuestionType = [];
                                window.YKS.randomDefaultQuestiontypes.map(function(qt){

                                    randomQuestionType.push(qt.qtid);
                                })
                                random_question_type = randomQuestionType.join(',');
                            }
                            randomoption = $('#qs-pre-select').find('input[name="randomoption"]').prop('checked') ? 1 : 0;

                            time_limit = $('#qs-pre-select').find('i.time-setting-btn').data('time');
                            q_time_limit = $('#qs-pre-select').find('i.time-setting-btn').data('q-time');

                        }
                        var examTimeLi = $('.exam-info-panel').find('li.exam-time');
                        if(Number($(examTimeLi).data('type'))){
                            time_limit = $(examTimeLi).data('exam-time');
                            q_time_limit = $(examTimeLi).data('q-time');
                        }


                        var qids = getPreExamQidsWithSectionIds();
                        qids = JSON.stringify(qids);
                        data = $.param({"random_question_type":random_question_type,"random_question":random_question,"randomoption":randomoption,"time_limit":time_limit,"question_limit_time":q_time_limit,"examqids":qids}) + '&' + data;

                        $.post($("#questionsListForm").attr("action"), data).done(function (data) {
                            data = $.parseJSON(data);
                            if( data.status == "ok" ){

                                if(examType == window.YKS.questionsSource.predefineAndRandom){
                                    saveRandomSettings(function(success, data){
                                        if( success ){
                                            savedSuccess();

                                            window.location.href = link;
                                        }else{
                                            // self.html(originHtml);
                                            // self.removeClass("disabled");
                                            //
                                            // Metronic.alert({
                                            //     type: 'danger',
                                            //     icon: 'error',
                                            //     message: data,
                                            //     container: $(".qts-random-select-question"),
                                            //     place: 'prepend'
                                            // });
                                            NW.makeUnLoading(self)
                                            NW.messageBox(window.OELang.notice,window.OELang.savePreAndRandomFailTips);
                                        }
                                    })
                                }else{
                                    savedSuccess();
                                    window.location.href = data.link;
                                }

                            }else{
                                Metronic.alert({
                                    type: 'danger',
                                    icon: 'error',
                                    message: window.OELang.examQuestions.saveFailed,
                                    container: $(".qts-pre-select-question"),
                                    place: 'prepend'
                                });
                            }
                            unBlock();

                        }).fail(function () {
                            Metronic.alert({
                                type: 'danger',
                                icon: 'error',
                                message: window.OELang.examQuestions.saveFailed,
                                container: $(".qts-pre-select-question"),
                                place: 'prepend'
                            });
                            unBlock();
                        })
                    }
                }else{
                    unBlock();
                    var msg = '';
                    switch(data){
                        case 'invalid-token':
                            msg = window.OELang.examQuestions.reloginPlease;
                            break;
                        case "not-logined":
                            msg = window.OELang.examQuestions.reloginPlease;
                            break;
                        case "no-exam":
                            msg = window.OELang.examQuestions.reloginPlease;
                            break;
                        case "failed":
                            msg = window.OELang.error;
                            break;
                    }

                    Metronic.alert({
                        type: 'danger',
                        icon: 'error',
                        message: msg,
                        container: $(examType == window.YKS.questionsSource.random ? ".qts-random-select-question":".qts-pre-select-question"),
                        place: 'prepend'
                    });
                }
            }

            function savedSuccess() {
                needConfirmExit = false;//重新加载页面
                new jBox('Modal', {
                    title: window.OELang.title,
                    content: window.OELang.examQuestions.saveSuccess
                }).open();
            }

            function updateQuestionScore() {
                var qs = [];
                $("#questions-list tr").each(function (index, element) {
                    var qid = $(element).attr("qid"),
                        score = $(element).find("td.score").data("score");
                    qs.push({
                        "qid":qid,
                        "score":score
                    });
                });
                $("input[name='questionsScores']").val(JSON.stringify(qs));
            }

            var self = $(this),
                href = self.attr("href"),
                link = self.attr("data-link"),
                examType = Number($(".questions-sources li.active").attr("et"));

            if (examType === window.YKS.questionsSource.predefine || examType === window.YKS.questionsSource.predefineAndRandom) {
                //先检查是否含有试题
                var addedCounts = $("#questions-list tr").length;
                if(addedCounts <=0 ){
                    NW.messageBox(window.OELang.title, window.OELang.examNoQuestionsTip);
                    return;
                }

                var saveBtn = $(this);
                NW.makeLoading(saveBtn);
                var data1 = {
                    eid: eid
                };
                data1[token] = 1;
                $.post({
                    url: window.YKS.checkDuplicateQuestionsInExam,
                    data: data1,
                    dataType: 'json',
                    success: function (data, status, xhr) {
                        if (data.status == 'ok') {
                            var duplicates = data.duplicates;
                            if (duplicates.length > 0) {
                                markRepeatQuestions(duplicates);

                                var content = $($.trim($('#jBoxContentHtml').html()).format(duplicates.length)).find('div[name="jbct2"]');
                                var jbox = new jBox('Modal', {
                                    title: window.OELang.guideline,
                                    content: content,
                                    width: 380,
                                    height: 120,
                                    closeButton: 'title',
                                    onCreated: function () {
                                        content.on('click', 'button[name="confirm"]', function (e) {
                                            jbox.close();
                                            var originHtml = self.html();
                                            self.html(originHtml+'<i class="fa fa-spinner fa-spin"></i>');
                                            self.addClass("disabled");
                                            blockUI();
                                            changeExamType(examType, saveExam);
                                        });
                                        content.on('click', 'button[name="cancel"]', function (e) {
                                            if(duplicates.length > 0){
                                                scrollToTarget($('#questionsListForm tr[qid="{0}"]:eq(0)'.format(duplicates[0].qid)));
                                            }
                                            jbox.close();
                                        })
                                    },
                                    onCloseComplete: function () {
                                        jbox.destroy();
                                        NW.makeUnLoading(saveBtn);
                                    }
                                });
                                jbox.open();
                            } else {
                                var originHtml = self.html();
                                self.html(originHtml+'<i class="fa fa-spinner fa-spin"></i>');
                                self.addClass("disabled");
                                blockUI();
                                changeExamType(examType, saveExam);
                            }
                        } else {
                            alert(data.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('ajax error');
                    },
                    complete: function (xhr, status) {
                        // alert('complete');
                    }
                });

            } else {
                var originHtml = self.html();
                self.html(originHtml+'<i class="fa fa-spinner fa-spin"></i>');
                self.addClass("disabled");
                blockUI();
                changeExamType(examType, saveExam);
            }

        });

        $(document).on('click','#btn-check-duplicate', function (e) {
            NW.makeLoading($(this));
            checkQuestionsDuplicate();
        });


        //刷新提醒上
        var needConfirmExit = true;
        var onBeforeUnLoad =  function (e) {
            e = e || window.event;

            if (needConfirmExit) {

                var msg = window.OELang.yourChangesMayNotBeSaved;
                msg = msg.replace(/\{n\}/g, "\n");

                // 兼容IE8和Firefox 4之前的版本
                if (e) {
                    e.returnValue = msg;
                }

                // Chrome, Safari, Firefox 4+, Opera 12+ , IE 9+
                return msg;
            }
        };

        window.onbeforeunload = onBeforeUnLoad;
        if(window.addEventListener){
            window.addEventListener("beforeunload", onBeforeUnLoad);
        }
        //刷新提醒下
        function randomExamBuildCheck(){

            $('#qs-random-select .checker').off("click");
            var sectionEls = $('#qs-random-select').find('div.section');

            if(sectionEls.length > 0){

                sectionEls.each(function(index,value){
                    NW.buildCheck($(this));
                })

            }else{

                NW.buildCheck($("#qs-random-select"));
            }
        }


        updateSectionCategoriesCountAndScore(iscn);
    }

    function setupExportStudentsResult(gid,token,gTitle,action,eid,sendType){
        var start = 0, limit = 600, page = 1;
        var setPercent = function (percent) {
            percent = percent.toFixed(2);
            var tip = window.OELang.finishedPercent.format(percent);
            $("span.export-percent").html(tip);
            $(".progress-bar").css("width", percent + "%");
            $("span.sr-only").html(tip);
        }
        var loadData = function (s, l) {
            var data = {
                start: s,
                limit: l,
                gid: gid,
                gtitle:gTitle,
                action:action,
                eid:eid,
                sendType:sendType
            };
            data[token] = 1;
            $.post(window.YKS.exportStudentsRaw, data).done(function (data) {
                data = $.parseJSON(data);
                if (data.status == "available") {
                    page++;
                    setPercent(page * 100 / data.pages);
                    loadData(s + l, l);
                } else if (data.status == "finished") {
                    setPercent(100);

                    $(".exporting").fadeOut();
                    $(".success").fadeIn();

                    var url = window.YKS.dlExportStudents + "&gid={0}&{1}=1&gtitle={2}&action={3}&eid={4}&sendType={5}";
                    url = url.format(gid, token,gTitle,action,eid,sendType);
                    window.location.href = url;
                    $(".exported-tips").html(window.OELang.exportStudentsSuccessTips.format(url));
                }
            }).fail(function (data) {
                $(".exported-tips").html(window.OELang.failedExportStudentsInfo);
            })
        };

        loadData(start, limit);
    }

    function setupExportTakenResult(eid, token, fmt, startTime, endTime,gid, rangeStart, rangeEnd, tfSearchValues,sfSearchValues,multiSearch,multiFid,status,rankingType,title,exportAll,openBestRank) {
        var start = 0, limit = 600, page = 1,endRow = 0,exportMakeUp = 0,maxTid = 1,row= 1;

        var setPercent = function (percent) {
            percent = percent.toFixed(2);
            var tip = window.OELang.finishedPercent.format(percent);
            $("span.export-percent").html(tip);
            $(".progress-bar").css("width", percent + "%");
            $("span.sr-only").html(tip);
        };
        var loadData = function (s, l, maxTid,row) {
            if(typeof maxTid == "undefined"){
                maxTid = 1
            }else{
                s = 0
            }
            var data = {
                eid: eid,
                start: s,
                limit: l,
                maxTid: maxTid,
                row:row,
                fmt: fmt,
                startTime: startTime,
                endTime: endTime,
                gid: gid,
                rangeStart: rangeStart,
                rangeEnd: rangeEnd,
                tfSearchValues: tfSearchValues,
                sfSearchValues: sfSearchValues,
                multiSearch: multiSearch,
                multiFid: multiFid,
                status: status,
                rankingType:rankingType,
                exportAll:exportAll,
                endRow:endRow,
                exportMakeUp:exportMakeUp,
                openBestRank:openBestRank
            };
            data[token] = 1;
            $.post(window.YKS.exporttaken, data).done(function (data) {
                data = $.parseJSON(data);
                if (data.status == "available") {
                    if(page == 1){
                        page++;
                        localStorage.setItem("exportPage",data.pages)
                    }
                    var totalPage = localStorage.getItem("exportPage")
                    setPercent(((totalPage-data.pages) * 100) / totalPage);
                    loadData(s + l, l,data.maxTid,data.row);
                } else if (data.status == "finished") {
                    setPercent(100);
                    localStorage.removeItem("exportPage")
                    $(".exporting").fadeOut();
                    $(".success").fadeIn();
                    var row = data.row - 1 //不包括表头
                    var url = window.YKS.dlExport + "&eid={0}&{1}=1&fmt={2}&startTime={3}&endTime={4}&gid={5}&rangeStart={6}&rangeEnd={7}&tfSearchValues={8}&sfSearchValues={9}&multiSearch={10}&multiFid={11}&status={12}&rankingType={13}&exportAll={14}&row={15}";
                    url = url.format(eid, token, fmt, startTime, endTime,gid,rangeStart,rangeEnd,tfSearchValues,sfSearchValues,multiSearch,multiFid,status,rankingType,exportAll,row);
                    window.location.href = url;
                    $(".exported-tips").html(window.OELang.exportSuccess.format(url,title));
                }else if(data.status == "exportTakenFinished"){
                    setPercent(100);
                    start = 0;
                    endRow = data.endRow;
                    exportMakeUp = 1;
                    loadData(start, limit);
                }else if(data.status == "exportMakeUpAvailable"){
                    setPercent(100);
                    endRow = data.endRow;
                    exportMakeUp = 1;
                    loadData(s + l, l);

                }
            }).fail(function (data) {
                $(".exported-tips").html(window.OELang.exportFailed);
            })
        };

        loadData(start, limit ,maxTid,row);
    }

    //导出试题
    function setupExportQuestions(token, eid) {
        var start = 0, limit = 150, page = 1;
        var setPercent = function (percent) {
            percent = percent.toFixed(2);
            var tip = window.OELang.finishedPercent.format(percent);
            $("span.export-percent").html(tip);
            $(".progress-bar").css("width", percent + "%");
            $("span.sr-only").html(tip);

        };
        var percent = 5;
        var interval = setInterval(function () {
            percent += 8;
            if (percent > 100) percent = 100;
            setPercent(percent);
        }, 1000);
        var storage = window.localStorage;
        var questionsIds = storage.questionsIds;
        var loadData = function () {
            var data = {
                questionsIds: questionsIds,
                eid: eid
            }
            data[token] = 1;
            $.post(window.YKS.exportQuestions, data).done(function (data) {
                data = $.parseJSON(data);
                if (data.status == "finished") {
                    setPercent(100);
                    // storage.removeItem("questionsIds");

                    $(".exporting").fadeOut();
                    $(".success").fadeIn();

                    var url = window.YKS.dlQuestionsExport + "&{0}=1&count={1}";
                    url = url.format(token, data.count);
                    if (eid > 0) {
                        url += "&eid=" + eid;
                    }
                    window.location.href = url;
                    $(".exported-tips").html(window.OELang.exportQuestionsSuccess.format(url));
                }
            }).fail(function (data) {
                $(".exported-tips").html(window.OELang.exportFailed);
            })
        };

        loadData();
    }



    //导出学生答案到Excel
    function setupExportStuAnswers(eid, token, fmt, startTime, endTime,gid, rangeStart, rangeEnd, tfSearchValues,sfSearchValues,multiSearch,multiFid,status,title,rankingType) {
        var start = 0, limit = 200, page = 1;
        var setPercent = function (percent) {
            percent = percent.toFixed(2);
            var tip = window.OELang.finishedPercent.format(percent);
            $("span.export-percent").html(tip);
            $(".progress-bar").css("width", percent + "%");
            $("span.sr-only").html(tip);
        };
        var loadData = function (s, l) {
            var data = {
                eid: eid,
                start: s,
                limit: l,
                fmt: fmt,
                startTime: startTime,
                endTime: endTime,
                gid: gid,
                rangeStart: rangeStart,
                rangeEnd: rangeEnd,
                tfSearchValues: tfSearchValues,
                sfSearchValues: sfSearchValues,
                multiSearch: multiSearch,
                multiFid: multiFid,
                status: status,
                rankingType:rankingType,
            };
            data[token] = 1;
            $.post(window.YKS.exportstuanswers, data).done(function (data) {
                data = $.parseJSON(data);
                if (data.status == "available") {
                    page++;
                    setPercent(page * 100 / data.pages);
                    loadData(s + l, l);
                } else if (data.status == "finished") {
                    setPercent(100);

                    $(".exporting").fadeOut();
                    $(".success").fadeIn();

                    var url = window.YKS.dlStuAnswersExport + "&eid={0}&{1}=1&fmt={2}&startTime={3}&endTime={4}&gid={5}&rangeStart={6}&rangeEnd={7}&tfSearchValues={8}&sfSearchValues={9}&multiSearch={10}&multiFid={11}&status={12}&rankingType={13}";
                    url = url.format(eid, token, fmt, startTime, endTime,gid,rangeStart,rangeEnd,tfSearchValues,sfSearchValues,multiSearch,multiFid,status,rankingType);
                    window.location.href = url;
                    $(".exported-tips").html(window.OELang.exportStudentsAnswersSuccess.format(url,title));
                }
            }).fail(function (data) {
                $(".exported-tips").html(window.OELang.exportFailed);
            })
        };

        loadData(start, limit);
    }

    //导出分类分数
    function setupExportCategoryScore(eid, token,title,fmt) {
        var start = 0, limit = 100, page = 1;
        var setPercent = function (percent) {
            percent = percent.toFixed(2);
            var tip = window.OELang.finishedPercent.format(percent);
            $("span.export-percent").html(tip);
            $(".progress-bar").css("width", percent + "%");
            $("span.sr-only").html(tip);
        };
        var loadData = function (s, l) {
            var data = {
                eid: eid,
                start: start,
                limit: limit,
                fmt:fmt
            };
            data[token] = 1;
            $.post(window.YKS.exportCategoryScore, data).done(function (data) {
                data = $.parseJSON(data);
                if (data.status == "available") {
                    start += limit;
                    page++;
                    setPercent(page * 100 / data.pages);
                    loadData(start, limit);
                } else if (data.status == "finished") {
                    setPercent(100);

                    $(".exporting").fadeOut();
                    $(".success").fadeIn();

                    var url = window.YKS.downloadCategoryScoreExport + "&eid=" + eid + "&" + token + "=1" + "&fmt=" + fmt;
                    window.location.href = url;
                    $(".exported-tips").html(window.OELang.exportSuccess.format(url,title));
                }
            }).fail(function (data) {
                $(".exported-tips").html(window.OELang.exportFailed);
            })
        };

        loadData(start, limit);
    }

    //导出收集用户信息
    function setupExportCollection(eid, fid, token, title) {
        var start = 0, limit = 100, page = 1;
        var setPercent = function (percent) {
            percent = percent.toFixed(2);
            var tip = window.OELang.finishedPercent.format(percent);
            $("span.export-percent").html(tip);
            $(".progress-bar").css("width", percent + "%");
            $("span.sr-only").html(tip);
        };
        var loadData = function (s, l) {
            var data = {
                eid: eid,
                fid: fid,
                start: start,
                limit: limit
            };
            data[token] = 1;
            $.post(window.YKS.exportCollection, data).done(function (data) {
                data = $.parseJSON(data);
                if (data.status == "available") {
                    start += limit;
                    page++;
                    setPercent(page * 100 / data.pages);
                    loadData(start, limit);
                } else if (data.status == "finished") {
                    setPercent(100);

                    $(".exporting").fadeOut();
                    $(".success").fadeIn();

                    var url = window.YKS.downloadCollectionExport + "&eid=" + eid +"&fid=" + fid + "&" + token + "=1";
                    window.location.href = url;
                    $(".exported-tips").html(window.OELang.exportCollectionSuccess.format(url,title));
                }
            }).fail(function (data) {
                $(".exported-tips").html(window.OELang.exportFailed);
            })
        };

        loadData(start, limit);
    }

    function initCategoriesManage(type, loadContentFun, token) {
        var treeEl = $('#categories-tree');
        var searchEl = $('#categories-search');
        var addCatEl = $('#create-top-category');
        var treeOptions = {
            core: {
                multiple: true,
                check_callback: true,
                data: {
                    type: 'post',
                    dataType: 'json',
                    url: window.YKS.loadCategories,
                    data: function (node) {
                        var data = {type: type};
                        data[token] = 1;
                        if (node.id === '#') {
                            data.cats = [];
                            var cate_tree = localStorage.getItem("cate_tree_"+type);
                            switch (type) {
                                case 1:
                                    if(!cate_tree || cate_tree == ""){
                                        data.cats.push({id: -1, text: window.OELang.allExams, state: {selected: true}, li_attr: {index:-1,catid: -1, title: window.OELang.allExams}});
                                    }else{
                                        data.cats.push({id: -1, text: window.OELang.allExams, state: {}, li_attr: {index:-1,catid: -1, title: window.OELang.allExams}});
                                    }
                                    break;
                                case 2:
                                    if(!cate_tree || cate_tree == ""){
                                        data.cats.push({id: -1, text: window.OELang.allQuestions, state: {selected: true}, li_attr: {catid: -1, title: window.OELang.allQuestions}});
                                    }else{
                                        data.cats.push({id: -1, text: window.OELang.allQuestions, state: {}, li_attr: {catid: -1, title: window.OELang.allQuestions}});
                                    }
                                    break;
                            }
                            data.cats.push({id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}});
                        } else {
                            data.catid = node.id;
                        }
                        return data;
                    }
                }
            },
            state:{
                key:'cate_tree_' + type,
                ttl:90000
            },
            plugins: ['state', 'contextmenu', 'dnd'],
            createdNodeCallback: function (inst, node) {
                inst.deselect_all();
                inst.select_node(node);

                // refreshCategoryList();
            },
            renamedNodeCallback: function (inst, node) {
                inst.deselect_all();
                inst.select_node(node);

                // refreshCategoryList();
                if (inst.is_selected(node)) {
                    loadContentFun(node.id, '', '');
                }
            },
            removedNodeCallback: function (inst, node) {
                loadContentFun(-1, '', '');
                // refreshCategoryList();
            }
        };

        var treeInst = createCategoryTree(treeEl, searchEl, addCatEl, treeOptions, type, token);

        //click category load content
        var selId = false;
        treeEl.on('changed.jstree', function (e, data) {
            if (treeInst.get_selected().length === 1) {
                if (selId !== Number(data.selected[0])) {
                    //添加分类标题和图标展示在试卷管理位置
                    var selected = treeInst.get_selected(true)[0];
                    var iconIndex = selected.li_attr.icon;
                    if(iconIndex == "" || iconIndex == null){
                        var index = selected.li_attr.index;
                        if(data.selected[0]<=0){
                            iconIndex = data.selected[0];
                        }else{
                            iconIndex = (index%48+1);
                        }
                    }
                    if(isNaN(iconIndex)){
                        iconIndex = 0;
                    }
                    var icon = "/components/com_exams/assets/img/icons/cate-icon-"+iconIndex+".png";
                    $(".caption.category").find("img").prop("src",icon).data("catid",data.selected[0]).data("icon",iconIndex);

                    var strongText;
                    strongText = selected.text;
                    if(data.selected[0] < 0) {
                        var dataTitle = $('#categories-tree').data("title");
                        if(dataTitle) {
                            strongText = dataTitle;
                        }
                    }
                    $(".caption.category").find("strong").html(strongText)

                    selId = Number(data.selected[0]);
                    loadContentFun(selId, '', '');
                }
            }
        }).on("loaded.jstree", function(e,data){
            var defaultGid = $("#categories-tree").data("defaultgid");
            if(defaultGid && defaultGid != ""){
                var n = treeInst.get_node(""+defaultGid);
                treeInst.select_node(n)
            }
        })
        //更换图标
        $(document).on("click",".category img",function(){
            var self = $(this);
            var catid = $(this).data("catid");
            if(catid<=0){
                alert(window.OELang.notChangeIcon)
                return;
            }
            var icon = $(this).data("icon");
            var oldIcon = icon;
            var iconsTemplate = $("#changeIcon").text();
            var iconTemplate = "<li class='{1}' data-index='{0}'><img src='/components/com_exams/assets/img/icons/cate-icon-{0}.png'><li>";
            var iconContents = [];
            for(var i=1;i<=48;i++){
                iconContents.push(iconTemplate.format(i,i==icon?"active":""))
            }
            var content = iconsTemplate.format(iconContents.join("\n"),icon);
            var changeIconBox = new jBox("Modal",{
                id:"changeIconBox",
                title:window.OELang.changeIcon,
                content:content,
                width: 710,
                height: 590,
                closeButton: false,
                onCreated:function(){
                    $("a[href='#cancel']").click(function(e){
                        e.preventDefault();
                        changeIconBox.close();
                    })
                    $("a[href='#save']").click(function(e){
                        e.preventDefault();
                        var icon = $(".icons ul").data("selected");
                        var data = {
                            icon:icon,
                            catid:catid,
                        };
                        data[token] = 1;
                        $.ajax({
                            url: window.YKS.changeCateIcon,
                            type:"POST",
                            data:data,
                            success:function(data){
                            try {
                                var rdata = $.parseJSON(data);
                            }catch (e) {
                                var rdata = {
                                    status:"error",
                                    msg : e
                                }
                            }
                            if(rdata.status == "ok"){
                                var lastIcon = "/components/com_exams/assets/img/icons/cate-icon-"+icon+".png"
                                self.prop("src",lastIcon);
                                var selected = treeInst.get_selected(true)[0];
                                selected.li_attr.icon = icon;
                                changeIconBox.close();
                            }else{
                                alert(window.OELang.notice,rdata.msg)
                            }
                        }
                    })
                    })
                    $(".icons ul li").click(function(){
                        $(".icons ul").find(".active").removeClass("active");
                        $(this).addClass("active");
                        $(".icons ul").data("selected",$(this).data("index"));
                    })
                },
            })
            changeIconBox.open();
        })
    }

    function setupQuestionsListPage(token) {
        var grid, groupActions;

        function ajaxLoad(catid, type, search) {
            var ajaxData = {};
            ajaxData[token] = 1;
            ajaxData['cat'] = [catid];
            /*ajaxData.qt = type;
            ajaxData.s = search;
            ajaxData.author = $('select.author-filter').val();*/
            param = ajaxData;
            if (grid) {
                grid.clearAjaxParams();
                grid.addAjaxParam(token, 1);
                grid.addAjaxParam("cat", catid);
                grid.addAjaxParam("qt", type);
                grid.addAjaxParam("s", search);
                grid.addAjaxParam("author", $("select.author-filter").val());
                grid.getDataTable().ajax.reload();
            } else {
                param['cat'] = catid;
                param['qt'] = type;
                param['s'] = search;
                grid = $.nAjaxTable($("#questions-list"), window.YKS.questionsList, param);
                groupActions = grid.getTableWrapper().find(".row:first").find(".table-group-actions");
                $("#qs-filters").appendTo(groupActions).css("display", "block");
            }
        };
        //导出试题按钮
        $("a.export-questiosn").click(function (e) {
            e.preventDefault();
            var online = Number($(this).data("online"));
            if($(this).hasClass("yks-default")) return;
            if ($(".checked").length < 1) {
                Metronic.alert({
                    type: 'success',
                    icon: 'error',
                    message: window.OELang.pleaseSelectFirst,
                    container: grid.getTableWrapper(),
                    place: 'prepend'
                });
                return;
            }
            if($(".checked").length > 151 && online) {
                NW.messageBox( window.OELang.notice, window.OELang.exportCountTooMuch);
                return;
            }
            var href= $(this).attr("href");
            //makeArray将一个类数组对象转换为真正的数组对象。
            var vals = $.makeArray($(".checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function (value) {
                return value > 0;
            });
            window.localStorage.questionsIds = vals.join(",");
            window.open(href);

        })
        //删除试题
        $("a[href='#delete']").click(function (e) {
            e.preventDefault();
            if($(this).hasClass("yks-default")) return;
            if ($(".checked").length < 1) {
                Metronic.alert({
                    type: 'success',
                    icon: 'error',
                    message: window.OELang.pleaseSelectFirst,
                    container: grid.getTableWrapper(),
                    place: 'prepend'
                });
                return;
            }
            var vals = $.makeArray($(".checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function (value) {
                return value > 0;
            });

            new jBox("Confirm", {
                confirmButton: window.OELang._delete,
                cancelButton: window.OELang.cancel,
                content: window.OELang.sureToDeleteQuestions,
                confirm: function () {
                    var data = {};
                    data.cid = vals.join(',');
                    data[token] = 1;

                    Metronic.blockUI({
                        message: window.OELang.loading,
                        target: grid.gettableContainer(),
                        overlayColor: 'none',
                        cenrerY: true,
                        boxed: true
                    });

                    $.post(window.YKS.deleteQuestions, data).done(function (result) {
                        $(".group-checkable").parent("span").removeClass("checked");
                        result = $.parseJSON(result);
                        var count = result.count;
                        Metronic.unblockUI(grid.gettableContainer());
                        if(result.status == "success"){
                            NW.messageBox(window.OELang.notice, window.OELang.deletedNQuestions.format(count), function(){
                                grid.getDataTable().ajax.reload(function(e){
                                    changeBtnStyle();
                                });
                            });
                        }else{
                            NW.messageBox( window.OELang.notice, window.OELang.deleteQuestionsFailed);
                        }
                    }).fail(function (j,t,e) {
                        Metronic.unBlock(grid.gettableContainer());
                        NW.messageBox( window.OELang.notice, window.OELang.deleteQuestionsFailed + e);
                    })
                }
            }).open();
        });

        $('#move-ques').on('click', function () {
            var jbox, treeInst,
                $content = $('#move-ques-cate-wd'),
                $treeEl = $content.find('div[name="categories-tree"]'),
                $searchEl = $content.find('input[name="categories-search-input"]'),
                treeOptions = {
                    core: {
                        check_callback: false,
                        data: {
                            type: 'post',
                            dataType: 'json',
                            url: window.YKS.loadCategories,
                            data: function (node) {
                                var data = {type: 2};
                                data[token] = 1;
                                if (node.id === '#') {
                                    data.cats = [{id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}}];
                                } else {
                                    data.catid = node.id;
                                }
                                return data;
                            }
                        }
                    },
                    plugins: ['checkbox'],
                    checkbox: {
                        three_state: false
                    }
                };
            return function (e) {
                var e = e || window.event;
                e.preventDefault();
                e.stopPropagation();
                if($(this).hasClass("yks-default")) return;
                jbox = jbox || new jBox('Modal', {
                    title: window.OELang.pleaseSelectQuestionCategory,
                    content: $content,
                    closeOnEsc: false,
                    closeOnClick: false,
                    closeButton: 'title',
                    width: 620,
                    zIndex: 99999,
                    onCreated: function () {
                        treeInst = treeInst || createCategoryTree($treeEl, $searchEl, null, treeOptions, 2, token);
                        $content.on('click', 'button[name="confirm"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            if (treeInst.is_loaded('#')) {
                                if (treeInst.get_selected().length >= 1 && Number(treeInst.get_selected()[0]) >= 0) {
                                    var cid = Number(treeInst.get_selected()[0]);
                                    var qids = $.makeArray($('#questions-list').find('div.checker span.checked input.checkboxes')).map(function (item, index, array) {
                                        var val = Number($(item).val());
                                        if (val <= 0) {
                                            return;
                                        }
                                        return val;
                                    });
                                    if (qids && qids.length > 0) {
                                        var data = {
                                            catid: cid,
                                            qids: qids
                                        };
                                        data[token] = 1;
                                        $.ajax({
                                            url: window.YKS.moveQuestionToCate,
                                            type: 'post',
                                            data: data,
                                            dataType: 'json',
                                            success: function(data, status, xhr) {
                                                grid.getDataTable().ajax.reload(function(e){
                                                    changeBtnStyle();
                                                });
                                                if (data.status === 'success') {
                                                    Metronic.alert({
                                                        type: 'success',
                                                        icon: 'success',
                                                        message: window.OELang.moveQuestionToCategorySuccess,
                                                        container: grid.getTableWrapper(),
                                                        place: 'prepend',
                                                        closeInSeconds: 5
                                                    });
                                                } else {
                                                    Metronic.alert({
                                                        type: 'error',
                                                        icon: 'error',
                                                        message: window.OELang.moveQuestionToCategoryFailed,
                                                        container: grid.getTableWrapper(),
                                                        place: 'prepend',
                                                        closeInSeconds: 5
                                                    });
                                                }
                                            },
                                            error: function (xhr, status, error) {
                                                alert('status: ' + status + '; error: ' + error);
                                            }
                                        });
                                    } else {
                                        Metronic.alert({
                                            type: 'success',
                                            icon: 'error',
                                            message: window.OELang.pleaseSelectFirst,
                                            container: grid.getTableWrapper(),
                                            place: 'prepend',
                                            closeInSeconds: 5
                                        });
                                    }
                                }
                                jbox.close();
                            }
                        });
                        $content.on('click', 'button[name="cancel"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            jbox.close();
                        });
                    },
                    onOpen: function () {
                        treeInst.deselect_all();
                        treeInst.clear_search();
                        treeInst.refresh();
                        $searchEl.val('');
                    }
                });
                jbox.toggle();
            }
        }());

        $("#questions-lists").on("click", "a[href='#delete-question']", function(e){
            e.preventDefault();
            var qid = $(this).data("qid");
            var self = $(this);
            NW.showConfirmDialog(window.OELang.sureToDeleteQuestions, function(resp){
                if(resp == "yes"){
                    var origin = self.html();
                    self.html('<i class="fa fa-spin fa-spinner"></i>')
                    var data = {};
                    data.cid = qid;
                    data[token] = 1;

                    $.post(window.YKS.deleteQuestions, data).done(function (result) {
                        result = $.parseJSON(result);
                        if(result.status == "success"){
                            NW.messageBox(window.OELang.notice, window.OELang.deleteSuccessfully);
                            grid.getDataTable().ajax.reload();
                        }else{
                            self.html(origin);
                            NW.messageBox(window.OELang.notice, window.OELang.deleteQuestionsFailed);
                        }
                    }).fail(function (result) {
                        self.html(origin);
                        NW.messageBox(window.OELang.notice, window.OELang.deleteQuestionsFailed);
                    })
                }
            })
        });
        NW.buildCheck("#questions-lists");
        $(document).on("change",'input.group-checkable',function(e){
            changeBtnStyle();
        })

        $("#questions-lists").on("click","div.checker",function(e){
            changeBtnStyle();
        })

        var changeBtnStyle = function() {
            var eids = $.makeArray($('#questions-list').find('div.checker span.checked input.checkboxes')).map(function (item, index, array) {
                var val = Number($(item).val());
                if (val <= 0) {
                    return;
                }
                return val;
            });
            if (eids && eids.length > 0) {
                $('a[href="#delete"]').removeClass("yks-default").addClass("yks-red-default").css("cursor", "pointer");


                $('a.export-questiosn').removeClass("yks-default").addClass("yks-blue-default").css("cursor", "pointer");

                $('a#move-ques').removeClass("yks-default").addClass("yks-blue-default").css("cursor", "pointer");
            } else {
                $('a[href="#delete"]').removeClass("yks-red-default").addClass("yks-default").css("cursor", "not-allowed");

                $('a.export-questiosn').removeClass("yks-blue-default").addClass("yks-default").css("cursor", "not-allowed");

                $('a#move-ques').removeClass("yks-blue-default").addClass("yks-default").css("cursor", "not-allowed");
            }
        }
        initCategoriesManage(2, function(catid, type, search){
            ajaxLoad(catid, type, $.trim($('input[name="search"]').val()));
        }, token);

        var jstree = $.jstree.reference($('#categories-tree'));
        $('#qs-filters').on('change', 'select', function (e) {
            var seled = jstree.get_selected();
            ajaxLoad(seled && seled.length > 0 ? seled[seled.length - 1] : -1, $('select.qtype-filter').val(), $.trim($('input[name="search"]').val()));
        });
        $('input[name="search"]').on('keypress', function (e) {
            var e = e || window.e;
            if (e.keyCode === 13) {
                var seled = jstree.get_selected();
                ajaxLoad(seled && seled.length > 0 ? seled[seled.length - 1] : -1, $('select.qtype-filter').val(), $.trim($('input[name="search"]').val()));
            }
        });
        $('#btn-search-question').on('click', function (e) {
            var seled = jstree.get_selected();
            ajaxLoad(seled && seled.length > 0 ? seled[seled.length - 1] : -1, $('select.qtype-filter').val(), $.trim($('input[name="search"]').val()));
        });


        //试题查重
        $(".questions-panel").on("click", "a[href='#checkduplicate']", function(e){
            e.preventDefault();

            var content = '<div id="duplicate-loading"><i class="fa fa-spin fa-spinner"></i> {0}</div>'.format(window.OELang.checkingDuplication);
            var dialog = NW.showDialog(content, [], window.OELang.title, {
                closeOnEsc: false,
                closeOnClick:false,
                maxSize:1
            });

            var data = {};
            data[$(this).data("token")] =1;

            $.post("index.php?option=com_exams&task=questions.checkDuplication&format=raw", data).done(function(data){
                var rdata;
                try{
                    rdata = $.parseJSON(data);
                }catch(e){
                    rdata = {
                        status:"error",
                        error: e+"\n"+data
                    }
                }
                if(rdata.status == "ok"){
                     content = '<div class="duplications">' + rdata.duplications.map(function(value){
                        return ('<div class="item alert alert-success">' +
                            '<span class="badge badge-danger">{0}</span> <span>{1}</span>' +
                            '</div>').format( window.OELang.duplicatedNTimes.format(value.dups), value.title)
                     }).join("\n") + '</div>';

                     $("#duplicate-loading").parent().html(content);
                     dialog.maxSize();
                     $(".duplications").parents(".dialog-content").css("max-height", "none");
                }else{
                    NW.messageBox(window.OELang.title, rdata.error);
                }
            }).fail(function(e, err){
                dialog.close();
                NW.messageBox(window.OELang.title, e.responseText);
            })
        })
    }

    function setupArchivedExamsManagePage(token, examType){
        var grid;

        function ajaxLoad(catid, search) {
            var ajaxData = {};
            ajaxData[token] = 1;
            ajaxData['cat'] = [catid];
            ajaxData['examType'] = examType;
            param = ajaxData;
            if (grid) {
                grid.clearAjaxParams();
                grid.addAjaxParam(token, 1);
                grid.addAjaxParam("cat", catid);
                grid.addAjaxParam("examType", examType);
                grid.addAjaxParam("author", $("select.author-filter").val());
                grid.addAjaxParam("s", search);
                grid.getDataTable().ajax.reload();
            } else {
                grid = $.nAjaxTable($("#exams-list-table"), window.YKS.lisArchivedtExams, param, {
                    onSuccess: function (grid, data) {
                        if ($('.checkall input[data-set="checkall"]').length <= 0) {
                            $("#exams-list-table_paginate").prepend(selectAllTmpl.format(window.OELang.allChecked));
                        }
                    }
                });
                $(".exams-panel .btn-group").on("change", "select", function (e) {
                    ajaxLoad(catid, search);
                })
            }
        }

        //全选
        var selectAllTmpl = '<div class="checker checkall">'+
            '<span><input type="checkbox" class="group-checkable" data-set="checkall"></span>'+'{0}'+
            '</div>';

        $("input[name='search']").bind('keypress', function (event) {
            if (event.keyCode === 13) ajaxLoad($("select.category-filter").val(), $("input[name='search']").val());
        });

        $("#btn-search-exam").click(function (e) {
            ajaxLoad($("select.category-filter").val(), $("input[name='search']").val());
        });

        $(".exams-panel").on("click",'a[href="#delete-exams"]',function(e){
            e.preventDefault();
            if($(this).hasClass("yks-default")) return;
            var vals = NW.getCheckValues($("#exams-list"))
            if(!vals || vals.length<1){
                NW.messageBox( window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }
            var action = $(this).data('action');

            //删除多张试卷
            var addEndOne = Math.round(Math.random()*10);
            var addEndTwo = Math.round(Math.random()*10);
            NW.showCustomConfirmDialog(window.OELang.sureToDeleteSelectedFilesPermanently,window.OELang.deletePermanently,window.OELang.cancel,window.OELang.sureDeleteExam.format(vals.length,addEndOne,addEndTwo,addEndOne,addEndTwo), function(resp){
                if(resp == 'yes'){
                    var sum = $('.delete-exam-math input[name="sum"]').val();
                    if(sum == null || sum != (addEndOne+addEndTwo)){
                        //请输入正确答案
                        NW.messageBox(window.OELang.notice, window.OELang.enterTheCorrectAnswer);
                        return;
                    }
                    var btn = this;

                    var data = {
                        eids: vals.join(',')
                    }
                    NW.makeLoading($(btn));
                    data[token] = 1;
                    $.post(action, data).done(function(rdata){
                        try{
                            rdata = $.parseJSON(rdata);
                        }catch(e){
                            rdata = {
                                status:'error',
                                error: e.message+rdata
                            }
                        }

                        if(rdata.status == 'ok'){
                            var message;
                            if(rdata.count == vals.length){
                                message = window.OELang.deleteArchivedExamsSuccessfully.format(rdata.count);
                            }else{
                                message = window.OELang.deleteNExamsSuccessNFail.format(rdata.count, vals.length-rdata.count);
                            }
                            NW.messageBox(window.OELang.notice, message, function(){
                                grid.getDataTable().ajax.reload(function(e){
                                    changeBtnStyle();
                                })
                            })

                        }else{
                            NW.messageBox(window.OELang.notice, rdata.error);
                        }

                    }).fail(function(j, s, e){
                        NW.messageBox(window.OELang.notice, e);
                    }).always(function(){
                        NW.makeUnLoading($(btn));
                    })
                }
            })

        }).on("click",'a[href="#unarchive-exams"]',function(e){
            e.preventDefault();
            if($(this).hasClass("yks-default")) return;
            var vals = NW.getCheckValues($("#exams-list"))
            if(!vals || vals.length<1){
                NW.messageBox( window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }
            var action = $(this).data('action');
            var tmpl = '<div class="row"><div class="col-md-12">{0}</div></div>'

            NW.showCustomConfirmDialog(window.OELang.notice,window.OELang.sureUnarchive,window.OELang.cancel,tmpl.format(window.OELang.unarchiveTips),function(resp){
                if(resp == 'yes'){
                    var unarchivedBtn = $(".uaqbtns-new .yks-default");
                    NW.makeLoading(unarchivedBtn);
                    var data = {
                        eids: vals.join(',')
                    }
                    data[token] = 1;
                    $.post(action, data).done(function(rdata){
                        try{
                            rdata = $.parseJSON(rdata);
                        }catch(e){
                            rdata = {
                                status:'error',
                                error: e.message+rdata
                            }
                        }

                        if(rdata.status == 'ok'){
                            NW.messageBox(window.OELang.notice, rdata.msg, function(){
                                grid.getDataTable().ajax.reload(function(e){
                                    changeBtnStyle();
                                })
                            })
                        }else{
                            NW.messageBox(window.OELang.notice, rdata.error);
                        }
                        NW.makeUnLoading(unarchivedBtn);
                    }).fail(function(j, s, e){
                        NW.messageBox(window.OELang.notice, e);
                    }).always(function(){
                    })
                }
            })

        }).on("click",'button.search-button',function(e){
            ajaxLoad($("select.category-filter").val(), $("input[name='search']").val());
        })
        $(document).on("change",'input.checkboxes',function(e){
            changeBtnStyle();
        })
        NW.buildCheck($("#exams-list"));
        $("#exams-list").on("click",".checker",function(e){
            changeBtnStyle();
        })
        var changeBtnStyle = function(){
            var eids = $.makeArray($('#exams-list-table').find('div.checker span.checked input.checkboxes')).map(function (item, index, array) {
                var val = Number($(item).val());
                if (val <= 0) {
                    return;
                }
                return val;
            });
            if(eids && eids.length > 0){
                $('a[href="#unarchive-exams"]').addClass("yks-blue-default").removeClass("yks-default").css("cursor","pointer");
                $('a[href="#unarchive-exams"] img').attr('src','/components/com_exams/assets/img/unarchive-blue.png');
                $('a[href="#delete-exams"]').addClass("yks-red-default").removeClass("yks-default").css("cursor","pointer");
                $('a[href="#delete-exams"] img').attr('src','/components/com_exams/assets/img/delete-black.png');
            }else{
                $('a[href="#unarchive-exams"]').addClass("yks-default").removeClass("yks-blue-default").css("cursor","not-allowed");
                $('a[href="#unarchive-exams"] img').attr('src','/components/com_exams/assets/img/unarchive-grey.png');
                $('a[href="#delete-exams"]').addClass("yks-default").removeClass("yks-red-default").css("cursor","not-allowed");
                $('a[href="#delete-exams"] img').attr('src','/components/com_exams/assets/img/delete-grey.png');
            }
        }

        initCategoriesManage(1, ajaxLoad, token);
    }

    /**
     * 试卷管理，包括试卷，闯关，练习
     * @param token
     * @param yksExamType
     */
    function setupExamsManagePage(token, yksExamType) {
        var grid,groupActions;

        function ajaxLoad(catid, search) {
            var ajaxData = {};
            ajaxData[token] = 1;
            ajaxData['cat'] = [catid];
            param = ajaxData;
            if (grid) {
                grid.clearAjaxParams();
                grid.addAjaxParam(token, 1);
                grid.addAjaxParam("cat", catid);
                grid.addAjaxParam("author", $("select.author-filter").val());
                grid.addAjaxParam("s", search);
                grid.getDataTable().ajax.reload();
            } else {
                var listUrl
                if(yksExamType == 1) {
                    listUrl = window.YKS.listAdvances;
                }else if(yksExamType == 2){
                    listUrl = window.YKS.listExams;
                }else{
                    listUrl = window.YKS.listPractices;
                }
                grid = $.nAjaxTable($("#exams-list-table"), listUrl, param, {
                    onSuccess: function (grid, data) {
                        if ($('.checkall input[data-set="checkall"]').length <= 0) {
                            $("#exams-list-table_paginate").prepend(selectAllTmpl.format(window.OELang.allChecked));
                        }
                    }
                });
                groupActions = grid.getTableWrapper().find(".row:first").find(".table-group-actions");
                $("#es-filters").appendTo(groupActions).css("display", "block");

                $("#es-filters").on("change", "select", function (e) {
                    ajaxLoad(catid, search);
                })
            }
        }
            //全选
        var selectAllTmpl = '<div class="checker checkall">'+
            '<span><input type="checkbox" class="group-checkable" data-set="checkall"></span>'+'{0}'+
            '</div>';

        $("input[name='search']").bind('keypress', function (event) {
            if (event.keyCode === 13) {
                var category_id = $("#categories-tree li[aria-selected='true']").attr("catid");
                // ajaxLoad($("select.category-filter").val(), $("input[name='search']").val());
                ajaxLoad(category_id, $("input[name='search']").val());
            }
        });
        $("#btn-search-exam").click(function (e) {
            ajaxLoad($("select.category-filter").val(), $("input[name='search']").val());
        });

        $(document).on("click", "a[href='#delete-exams']", function(e){
            e.preventDefault();
            if($(this).hasClass("yks-default")) return;
            var vals = NW.getCheckValues($("#exams-list"))
            if(!vals || vals.length<1){
                NW.messageBox( window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }
            var action = $(this).data('action');

            //删除多张试卷
            var addEndOne = Math.round(Math.random()*10);
            var addEndTwo = Math.round(Math.random()*10);
            //判断是否有闯关的试卷
            var data = {
                eids: vals.join(',')
            }
            $.get(window.YKS.getAdvanceCashOfDel,data).done(function(rdata){
                try{
                    rdata = $.parseJSON(rdata);
                }catch(e){
                    rdata = {
                        status:'error',
                        error: e.message+rdata
                    }
                }
                if(rdata.status == 'ok'){
                    var items = [];
                    for(var i=0;i<rdata.advance.length;i++){
                        var html = window.OELang.delAdvanceCashTip.format(rdata.advance[i].title,rdata.advance[i].cash);
                        items.push(html);
                    }
                    var title = window.OELang.delAdvanceTip;
                    var amount = window.OELang.delAdvanceAmountTip.format(rdata.amount);
                    var content = title+items.join('\n')+amount;
                    NW.showConfirmDialog(content, function(resp){
                        if(resp == 'yes'){
                            NW.showConfirmDialog(window.OELang.sureDeleteExam.format(vals.length,addEndOne,addEndTwo,addEndOne,addEndTwo), function(resp){
                                if(resp == 'yes'){
                                    var sum = $('.delete-exam-math input[name="sum"]').val();
                                    if(sum == null || sum != (addEndOne+addEndTwo)){
                                        //请输入正确答案
                                        NW.messageBox(window.OELang.notice, window.OELang.enterTheCorrectAnswer);
                                        return;
                                    }
                                    var btn = this;

                                    var data = {
                                        eids: vals.join(',')
                                    }
                                    NW.makeLoading($(btn));
                                    data[token] = 1;
                                    $.post(action, data).done(function(rdata){
                                        try{
                                            rdata = $.parseJSON(rdata);
                                        }catch(e){
                                            rdata = {
                                                status:'error',
                                                error: e.message+rdata
                                            }
                                        }

                                        if(rdata.status == 'ok'){
                                            var message;
                                            if(rdata.count == vals.length){
                                                message = window.OELang.deleteExamsSuccess.format(rdata.count);
                                            }else{
                                                message = window.OELang.deleteNExamsSuccessNFail.format(rdata.count, vals.length-rdata.count);
                                            }
                                            NW.messageBox(window.OELang.notice, message, function(){
                                                grid.getDataTable().ajax.reload(function(e){
                                                    changeBtnStyle();
                                                })
                                            })
                                            changeBtnStyle();
                                        }else{
                                            NW.messageBox(window.OELang.notice, rdata.error);
                                        }

                                    }).fail(function(j, s, e){
                                        NW.messageBox(window.OELang.notice, e);
                                    }).always(function(){
                                        NW.makeUnLoading($(btn));
                                    })
                                }
                            })
                        }
                    })
                }else{
                    NW.showConfirmDialog(window.OELang.sureDeleteExam.format(vals.length,addEndOne,addEndTwo,addEndOne,addEndTwo), function(resp){
                        if(resp == 'yes'){
                            var sum = $('.delete-exam-math input[name="sum"]').val();
                            if(sum == null || sum != (addEndOne+addEndTwo)){
                                //请输入正确答案
                                NW.messageBox(window.OELang.notice, window.OELang.enterTheCorrectAnswer);
                                return;
                            }
                            var btn = this;

                            var data = {
                                eids: vals.join(',')
                            }
                            NW.makeLoading($(btn));
                            data[token] = 1;
                            $.post(action, data).done(function(rdata){
                                try{
                                    rdata = $.parseJSON(rdata);
                                }catch(e){
                                    rdata = {
                                        status:'error',
                                        error: e.message+rdata
                                    }
                                }

                                if(rdata.status == 'ok'){
                                    var message;
                                    if(rdata.count == vals.length){
                                        message = window.OELang.deleteExamsSuccess.format(rdata.count);
                                    }else{
                                        message = window.OELang.deleteNExamsSuccessNFail.format(rdata.count, vals.length-rdata.count);
                                    }
                                    NW.messageBox(window.OELang.notice, message, function(){
                                        grid.getDataTable().ajax.reload(function(e){
                                            changeBtnStyle();
                                        })
                                    })
                                    changeBtnStyle();
                                }else{
                                    NW.messageBox(window.OELang.notice, rdata.error);
                                }

                            }).fail(function(j, s, e){
                                NW.messageBox(window.OELang.notice, e);
                            }).always(function(){
                                NW.makeUnLoading($(btn));
                            })
                        }
                    })
                }

            });


        })

        //开始考试和重新开始考试
        function startExam(eid,action,title,isAdvance){
            var presentHeight = $(document).scrollTop();
            var box = new jBox("Modal",{
                id:"exam-setting-jbox",
                width:600,
                height: 450,
                closeButton:false,
                "ajax":{
                    url: action,
                    reload: 'strict'
                },
                onCreated:function(){
                    $("#exam-setting-jbox").on("click",".close-btn",function(){
                        box.destroy();
                    })
                    $("#exam-setting-jbox").on("click","a[href='#cancel']",function(e){
                        e.preventDefault();
                        box.destroy();
                    })
                    $("#exam-setting-jbox").on("click","a[href='#save']",function(e){
                        e.preventDefault();
                        var et = $("input[name='et']").val();
                        var st = $("input[name='st']").val();
                        var endExamType = $("input[name='time']:checked").val();
                        var isAdvance = $("input[name='isadvance']").val();
                        if((isAdvance == 1 || endExamType == 1) && et <= st ){
                            NW.messageBox(window.OELang.notice,window.OELang.endtimeShouldMoreThanStarttime)
                            $("input[name='end_time']").val("");
                            return;
                        }
                        var data = {};
                        data[token] = 1;
                        data.endExamType = endExamType;
                        data.startTime = st;
                        data.endTime = et;
                        data.eid = eid;
                        $.ajax({
                            setContent: false,
                            url: window.YKS.notifyToExamByShare,
                            type:"GET",
                            data:data,
                            success:function(data){
                            try {
                                var rdata = $.parseJSON(data);
                            }catch (e) {
                                var rdata = {
                                    status:"error",
                                    msg : e
                                }
                            }
                            if(rdata.status == "success"){
                                var shareBox = new jBox("Modal", {
                                    "id":"share-box",
                                    maxWidth:958,
                                    maxHeight:615,
                                    minWidth:772,
                                    closeButton: false,
                                    "ajax": {
                                        setContent: false,
                                        url: window.YKS.briefExam,
                                        data: {eid: eid,releaseSuccessfully:1},
                                        success:function(rdata){
                                            shareBox.setContent(rdata);
                                            $(".btn-close-share").on("click",function(e){
                                                shareBox.close();
                                            })
                                            $("button.generate-license").on("click", function (e) {
                                                var eid = $(this).attr("data-eid");
                                                var data = {
                                                    eid: eid
                                                };
                                                data[token] = 1;

                                                var loading = $('<i class="fa fa-spinner fa-spin fa-2x"></i>');
                                                $(this).prepend(loading);
                                                $(this).attr("disabled", "disabled");
                                                var self = $(this);

                                                $.post(window.YKS.reGenerateExamLicense, data).done(function (data) {
                                                    data = $.parseJSON(data);
                                                    loading.remove();
                                                    self.removeAttr("disabled");

                                                    if (data.status == "ok") {
                                                        self.parents(".license-code").find("pre").text(data.license);
                                                        self.siblings().filter("button.copydata").attr("data-clipboard-text", data.license);
                                                        $("#exams-list .license-title").text(window.OELang.licenseValue.format(data.license));
                                                    }
                                                }).fail(function (data) {
                                                    loading.remove();
                                                    self.removeAttr("disabled");
                                                })
                                            });
                                            $("#foreign-share-btn-group").on("click","span",function(e){
                                                e.preventDefault();
                                                e.stopPropagation();
                                                var self = $(this);
                                                var url = self.data("url");
                                                var dataDest = self.data("dest");
                                                if(dataDest == "googleplus"){
                                                    window.open('https://plus.google.com/share?url='+encodeURIComponent(url));
                                                }else if(dataDest == "facebook"){
                                                    window.open('https://www.facebook.com/sharer/sharer.php?u='+encodeURIComponent(url));
                                                }else if(dataDest == "twitter"){
                                                    window.open('https://twitter.com/home?status='+encodeURIComponent(url));
                                                }

                                            })
                                            $(".close-btn").on("click",function(){
                                                shareBox.close();
                                            })
                                        }
                                    },
                                    onCloseComplete:function(e){
                                        $('.sosh-pop').remove();
                                        shareBox.destroy();
                                    }
                                })
                                shareBox.open();
                                box.destroy();
                                grid.getDataTable().ajax.reload();
                            }else{
                                box.destroy();
                                NW.messageBox(window.OELang.notice,rdata.msg)
                            }
                        }
                    })
                        box.destroy();
                    })

                },
                onCloseComplete:function(){
                    box.destroy();
                }
            })
            box.open();
        }

        //发布试卷
        function releaseExamFunc(eid, callBack) {
            NW.showCustomConfirmDialog(window.OELang.notice, window.OELang.releaseNow, window.OELang.releaseLater, window.OELang.isReleaseTheExam,function(resp){
                if(resp == "yes"){
                    var data = {
                        eid:eid
                    }
                    data[token] = 1;
                    $.post(window.YKS.releaseExam,data).done(function(rdata){
                        try{
                            rdata = $.parseJSON(rdata);
                        }catch(e){
                            rdata = {
                                status:'error',
                                error: e.message+rdata
                            }
                        }
                        if(rdata.status == "ok"){
                            callBack(true);
                        }else{
                            callBack(false);
                        }
                    }).fail(function(j, s, e){
                        NW.messageBox(window.OELang.notice, e);
                        callBack(false);
                    }).always(function(){
                        callBack(false);
                    })
                }else {
                    callBack(false);
                }
            })
        }
        function blockUI() {
            Metronic.blockUI(grid.gettableContainer());
        }

        function unBlock() {
            Metronic.unblockUI(grid.gettableContainer());
        }
        //试卷管理
        $("#exams-list").on("click","a.begin-exam",function(e){
            e.preventDefault();
            var self = $(this);
            var eid = self.data("id");
            var action = self.attr("href");
            if(self.data("advance") == 1){
                var windowTitle = window.OELang.startAdvanceTitle;
            }else{
                var windowTitle = window.OELang.startExamTitle;
            }
            startExam(eid,action,windowTitle,self.data("advance")==1?true:false);

        }).on("click","a.release-exam",function(e){
            e.preventDefault();
            var self = $(this);
            var eid =self.data("id");
            NW.makeLoading(self);
            releaseExamFunc(eid, function(success){
                NW.makeUnLoading(self);
                if(success){
                    grid.getDataTable().ajax.reload();
                    $("#jBox-overlay").remove();
                    var shareBox = new jBox("Modal", {
                        "id":"share-box",
                        maxWidth:958,
                        maxHeight:615,
                        minWidth:772,
                        overlay:true,
                        closeButton: false,
                        "ajax": {
                            setContent: false,
                            url: window.YKS.briefExam,
                            data: {eid: eid,releaseSuccessfully:1},
                            success:function(rdata){
                                shareBox.setContent(rdata);
                                $(".btn-close-share").on("click",function(e){
                                    shareBox.close();
                                })
                                $("button.generate-license").on("click", function (e) {
                                    var eid = $(this).attr("data-eid");
                                    var data = {
                                        eid: eid
                                    };
                                    data[token] = 1;

                                    var loading = $('<i class="fa fa-spinner fa-spin fa-2x"></i>');
                                    $(this).prepend(loading);
                                    $(this).attr("disabled", "disabled");
                                    var self = $(this);

                                    $.post(window.YKS.reGenerateExamLicense, data).done(function (data) {
                                        data = $.parseJSON(data);
                                        loading.remove();
                                        self.removeAttr("disabled");

                                        if (data.status == "ok") {
                                            self.parents(".license-code").find("pre").text(data.license);
                                            self.siblings().filter("button.copydata").attr("data-clipboard-text", data.license);
                                            $("#exams-list .license-title").text(window.OELang.licenseValue.format(data.license));
                                        }
                                    }).fail(function (data) {
                                        loading.remove();
                                        self.removeAttr("disabled");
                                    })
                                });
                                $("#foreign-share-btn-group").on("click","span",function(e){
                                    e.preventDefault();
                                    e.stopPropagation();
                                    var self = $(this);
                                    var url = self.data("url");
                                    var dataDest = self.data("dest");
                                    if(dataDest == "googleplus"){
                                        window.open('https://plus.google.com/share?url='+encodeURIComponent(url));
                                    }else if(dataDest == "facebook"){
                                        window.open('https://www.facebook.com/sharer/sharer.php?u='+encodeURIComponent(url));
                                    }else if(dataDest == "twitter"){
                                        window.open('https://twitter.com/home?status='+encodeURIComponent(url));
                                    }

                                })
                                $(".close-btn").on("click",function(){
                                    shareBox.close();
                                })
                            }
                        },
                        onCloseComplete:function(e){
                            $('.sosh-pop').remove();
                            shareBox.destroy();
                        }
                    })
                    shareBox.open();
                }
            })

        })/*.on('click','a.more-share-exam',function(e){
                    e.preventDefault();
            var self = $(this);
            var eid = self.data('eid');
            var action = self.attr('href');
            var draft = Number(self.data('draft'));
            if(draft) {
                releaseExamFunc(eid, function(success){
                    if(success){
                        blockUI();
                        window.location.href = action;
                    }
                })
            }else {
                window.location.href = action;
            }
        })*/.on('click','a.more-notify-to-exam',function(e){
            e.preventDefault();
            var self = $(this);
            var eid = self.data('eid');
            var action = self.attr('href');
            var draft = Number(self.data('draft'));
            if(draft) {
                releaseExamFunc(eid, function(success){
                    if(success){
                        blockUI();
                        window.location.href = action;
                    }
                })
            }else {
                window.location.href = action;
            }
        }).on("click","a[href='#delete-exam']",function(e){
            e.preventDefault();
            var eid = $(this).data("id");
            var addEndOne = Math.round(Math.random()*10);
            var addEndTwo = Math.round(Math.random()*10);
            NW.showConfirmDialog(window.OELang.deleteOneExam.format(addEndOne,addEndTwo), function(resp){
                if(resp == 'yes'){
                    var sum = $('.delete-exam-math input[name="sum"]').val();
                    if(sum == null || sum != (addEndOne+addEndTwo)){
                        NW.messageBox(window.OELang.notice, window.OELang.enterTheCorrectAnswer);
                        return;
                    }

                    var btn = this;

                    var data = {
                        eids: eid
                    }
                    NW.makeLoading($(btn));
                    data[token] = 1;
                    $.post(window.YKS.deleteExam, data).done(function(rdata){
                        try{
                            rdata = $.parseJSON(rdata);
                        }catch(e){
                            rdata = {
                                status:'error',
                                error: e.message+rdata
                            }
                        }

                        if(rdata.status == 'ok'){
                            var message;
                            if(rdata.count == 1){
                                message = "成功删除该试卷";
                            }else{
                                message = "无权限删除该试卷";
                            }
                            NW.messageBox(window.OELang.notice, message, function(){
                                grid.getDataTable().ajax.reload()
                            })
                        }else{
                            NW.messageBox(window.OELang.notice, rdata.error);
                        }

                    }).fail(function(j, s, e){
                        NW.messageBox(window.OELang.notice, e);
                    }).always(function(){
                        NW.makeUnLoading($(btn));
                    })
                }
            })

        }).on("click","a[href='#exam-stop']",function(e){
            e.stopPropagation();
            e.preventDefault();
            var self = $(this);
            var eid = self.data("id");
            new jBox('Confirm', {
                confirmButton: window.OELang.sure,
                cancelButton: window.OELang.cancel,
                content: window.OELang.sureToStopExam,
                confirm: function () {
                    var data = {
                        eid:eid
                    }
                    data[token] = 1;
                    $.post(window.YKS.stopExam, data).done(function(rdata){
                        try{
                            rdata = $.parseJSON(rdata);
                        }catch(e){
                            rdata = {
                                status:'error',
                                error: e.message+rdata
                            }
                        }
                        if(rdata.status == "success"){
                            grid.getDataTable().ajax.reload();
                        }
                    });
                },
                cancel: function () {
                },
                title: window.OELang.stopExam,
            }).open();
        }).on("click","a.restart-exam",function(e){
            e.preventDefault();
            var self = $(this);
            var eid = self.data("id");
            var action = self.attr("href");
            startExam(eid,action,window.OELang.restartExam);
        }).on("click",'.exam-info-left-details .exam-title,.more-share-exam',function(e){
            e.preventDefault();
            var self = $(this);
            var eid = self.data("value");
            var status = self.data("status");
            if(status == 6){
                NW.messageBox(window.OELang.notice, window.OELang.draftTips);
                return false;
            }
            $("#jBox-overlay").remove();
            var shareBox = new jBox("Modal", {
                "id":"share-box",
                maxWidth:958,
                maxHeight:615,
                minWidth:772,
                closeButton: false,
                "ajax": {
                    setContent: false,
                    url: window.YKS.briefExam,
                    data: {eid: eid},
                    success:function(rdata){
                        shareBox.setContent(rdata);
                        $(".btn-close-share").on("click",function(e){
                            shareBox.close();
                        })
                        $("button.generate-license").on("click", function (e) {
                            var eid = $(this).attr("data-eid");
                            var data = {
                                eid: eid
                            };
                            data[token] = 1;

                            var loading = $('<i class="fa fa-spinner fa-spin fa-2x"></i>');
                            $(this).prepend(loading);
                            $(this).attr("disabled", "disabled");
                            var self = $(this);

                            $.post(window.YKS.reGenerateExamLicense, data).done(function (data) {
                                data = $.parseJSON(data);
                                loading.remove();
                                self.removeAttr("disabled");

                                if (data.status == "ok") {
                                    self.parents(".license-code").find("pre").text(data.license);
                                    self.siblings().filter("button.copydata").attr("data-clipboard-text", data.license);
                                    $("#exams-list .license-title").text(window.OELang.licenseValue.format(data.license));
                                }
                            }).fail(function (data) {
                                loading.remove();
                                self.removeAttr("disabled");
                            })
                        });
                        $("#foreign-share-btn-group").on("click","span",function(e){
                            e.preventDefault();
                            e.stopPropagation();
                            var self = $(this);
                            var url = self.data("url");
                            var dataDest = self.data("dest");
                            if(dataDest == "googleplus"){
                                window.open('https://plus.google.com/share?url='+encodeURIComponent(url));
                            }else if(dataDest == "facebook"){
                                window.open('https://www.facebook.com/sharer/sharer.php?u='+encodeURIComponent(url));
                            }else if(dataDest == "twitter"){
                                window.open('https://twitter.com/home?status='+encodeURIComponent(url));
                            }

                        })
                        $(".close-btn").on("click",function(){
                            shareBox.close();
                        })
                    }
                },
                onCloseComplete:function(e){
                    $('.sosh-pop').remove();
                    shareBox.destroy();
                }
            })
            shareBox.open();
        })


        $('.exams-panel').on("click",".search-button",function(e){
            var category_id = $("#categories-tree li[aria-selected='true']").attr("catid");
            // ajaxLoad($("select.category-filter").val(), $("input[name='search']").val());
            ajaxLoad(category_id, $("input[name='search']").val());

        }).on("click","a#archive-exam",function(e){
            if($(this).hasClass("yks-default")) return;
            var eids = $.makeArray($('#exams-list-table').find('div.checker span.checked input.checkboxes')).map(function (item, index, array) {
                var val = Number($(item).val());
                if (val <= 0) {
                    return;
                }
                return val;
            });
            if(eids && eids.length <= 0){
                NW.messageBox(window.OELang.notice,window.OELang.pleaseCheckArchivedExams);
                return;
            }

            var tmpl = '<div class="row dialog-content"><div class="col-md-12">{0}</div><div class="col-md-12">{1}</div></div>'+
                '<div id="check-archive-btns" class="row uaqbtns-new"><div class="col-md-12"><button class="btn yks-blue pull-right sure">{2}</button><button style="margin-right: 10px" class="btn yks-default pull-right cancel">{3}</button></div></div>';
            var url = $(this).data("url");
            var data = {
                eids:eids.join(",")
            }
            data[token] = 1;
            var confirmArchiveBox = new jBox('Modal',{
                title: window.OELang.notice,
                closeButton: "title",
                minWidth:316,
                minHeight:197,
                content: tmpl.format(window.OELang.whetherToArchiveExams.format(eids.length), window.OELang.viewArchivedExams,window.OELang.archive,window.OELang.cancel),
                onCreated:function(e){
                    $('#check-archive-btns').on("click","button.sure",function(event){
                        var archiveSureBtn = $(this);
                        NW.makeLoading(archiveSureBtn);
                        $.post(url,data).done(function(rData){
                            data = $.parseJSON(rData);
                            if(data.status == "ok"){
                                var offset = $(".dashboard-stat.archived-exams a").offset();
                                var archivedExamsCount = $(".dashboard-stat.archived-exams a").data("count");
                                archivedExamsCount = archivedExamsCount + eids.length;
                                var imgFly = $(".exam-info-container").find("img").first().attr('src');
                                var flyer = $('<img class="u-flyer" src="'+imgFly+'">');
                                flyer.fly({
                                    start:{
                                        left: event.pageX,
                                        top: event.pageY
                                    },
                                    end:{
                                        left: offset.left+10,
                                        top: offset.top+10,
                                        width: 0,
                                        height: 0
                                    },
                                    onEnd:function(){
                                        $(".dashboard-stat.archived-exams a").text(window.OELang.archivedExams+"("+archivedExamsCount+")");
                                        $(".dashboard-stat.archived-exams a").data("count",archivedExamsCount);
                                        grid.getDataTable().ajax.reload(function(e){
                                            changeBtnStyle();
                                        });

                                    }
                                })


                            }else{
                                NW.messageBox(window.OELang.notice,data.error);
                            }
                            NW.makeUnLoading(archiveSureBtn);
                            confirmArchiveBox.close();
                        }).fail(function (data) {
                        })
                    }).on("click","button.cancel",function(e){
                        confirmArchiveBox.close();
                    })
                },
                onCloseComplete:function(){
                    confirmArchiveBox.destroy();
                }
            })
            confirmArchiveBox.open();
        })


        $("#exams-list").on("click", "a[viewdata]", function (e) {
            e.preventDefault();
            var self = $(this),
                pTr = self.parents("tr"),
                eid = self.attr("viewdata"),
                cTr = $("tr[briefid='" + eid + "']");
            if (cTr.length > 0) {
                cTr.find('td > div').slideUp("normal", function () {
                    cTr.remove();
                })
                return false;
            }
            var cols = pTr.find("td").length;
            $("<tr briefid='" + eid + "'><td colspan='" + cols + "'><div class='center spinner'></div></td></tr>").insertAfter(pTr);
            cTr = $("tr[briefid='" + eid + "']");
            $.get(window.YKS.briefExam, {eid: eid}, function (data) {
                cTr.find("td").html(data);
                cTr.find("a[href='#close']").click(function () {
                    cTr.find('td > div').slideUp("normal", function () {
                        cTr.remove();
                    })
                    return false;
                });
                //暂时隐藏 xiguzai 2017.12.27
                /*var score_dist = $("#score_dist" + eid);
                score_dist.highcharts({
                    chart: {
                        type: 'line'
                    }, credits: {
                        enabled: false
                    },
                    title: {
                        text: score_dist.attr("title")
                    },
                    xAxis: {
                        title: {
                            text: window.OELang.score
                        },
                        categories: score_dist.attr("categories").split(',')
                    },
                    yAxis: {
                        min: 0,
                        title: {
                            text: window.OELang.count
                        }
                    }, tooltip: {
                        formatter: function () {
                            var p = window.OELang.nStudentGotNScore;
                            return p.replace("{point.y}", this.y).replace("{point.category}", this.key);
                        }
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'middle',
                        borderWidth: 0
                    },
                    series: [{
                        data: score_dist.attr("values").split(',').map(function (v) {
                            return Number(v);
                        })
                    }]
                });*/
            });
            return false;
        }).on("click","a[href='#copy-exams']",function(e){
            e.preventDefault();
            e.stopPropagation();
            var self = $(this);
            var eid = self.data("eid");
            var boxTitle = self.data("title");
            var examTitle = self.data("etitle");
            var copyText = self.data("copy");
            var noExamTitleTips = self.data("notitle");
            var content = $("#copy-exam").html().format(examTitle+copyText);
            var copyExamBox = new jBox("Modal",{
                title:boxTitle,
                content:content,
                minWidth:300,
                minHeight:150,
                onCreated:function(e){
                    $(".copy-exam-btns").on("click","button.confirm",function(e){
                        e.preventDefault();
                        e.stopPropagation();
                        NW.makeLoading($('.copy-exam-btns button.confirm'));
                        var newExamTitle = $.trim($('input[name="exam-copy-name"]').val());
                        if(!newExamTitle){
                            alert(noExamTitleTips);
                            NW.makeUnLoading($('.copy-exam-btns button.confirm'));
                            return;
                        }
                        if(CM.getStringLength(newExamTitle) > 40){
                            alert(window.OELang.examNameLengthIsIncorrect);
                            NW.makeUnLoading($('.copy-exam-btns button.confirm'));
                            return false;
                        }
                        $('input[name="eid"]').val(eid);
                        $('input[name="title"]').val(newExamTitle);
                        var copyExamForm = document.getElementById('copyExamForm');
                        copyExamForm.submit();
                        copyExamBox.close();
                    }).on("click","button.cancel",function(e){
                        copyExamBox.close();
                    })
                },
                onCloseComplete:function(e){
                    copyExamBox.destroy();
                }
            })
            copyExamBox.open();

        })

        NW.buildCheck($("#exams-list"));
        $("#exams-list").on("click",".checker",function(e){
            changeBtnStyle();
        })
        var changeBtnStyle = function(){
            var eids = $.makeArray($('#exams-list-table').find('div.checker span.checked input.checkboxes')).map(function (item, index, array) {
                var val = Number($(item).val());
                if (val <= 0) {
                    return;
                }
                return val;
            });
            if(eids && eids.length > 0){
                $('a[href="#delete-exams"]').removeClass("yks-default").addClass("yks-red-default").css("cursor","pointer");
                $('a#move-exams').removeClass("yks-default").addClass("yks-blue-default").css("cursor","pointer");

                $('a#archive-exam').removeClass("yks-default").addClass("yks-blue-default").css("cursor","pointer");
                $('a#archive-exam img').attr('src','/components/com_exams/assets/img/archive-blue.png');
            }else{
                $('a[href="#delete-exams"]').removeClass("yks-red-default").addClass("yks-default").css("cursor","not-allowed");
                $('a#move-exams').removeClass("yks-blue-default").addClass("yks-default").css("cursor","not-allowed");

                $('a#archive-exam').removeClass("yks-blue-default").addClass("yks-default").css("cursor","not-allowed");
                $('a#archive-exam img').attr('src','/components/com_exams/assets/img/archive-grey.png');
            }
        }
        initCategoriesManage(1, ajaxLoad, token);



        $("#move-exams").on("click", function (e) {

            var jbox, treeInst,
                $content = $('#move-exams-cate-wd'),
                $treeEl = $content.find('div[name="categories-tree"]'),
                $searchEl = $content.find('input[name="categories-search-input"]'),
                treeOptions = {
                    core: {
                        check_callback: false,
                        data: {
                            type: 'post',
                            dataType: 'json',
                            url: window.YKS.loadCategories,
                            data: function (node) {
                                var data = {type: 1};
                                data[token] = 1;
                                if (node.id === '#') {
                                    data.cats = [{id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}}];
                                } else {
                                    data.catid = node.id;
                                }
                                return data;
                            }
                        }
                    },
                    plugins: ['checkbox'],
                    checkbox: {
                        three_state: false
                    }
                };
            return function (e) {
                var e = e || window.event;
                e.preventDefault();
                e.stopPropagation();
                if($(this).hasClass("yks-default")) return false;
                var eids = $.makeArray($('#exams-list-table').find('div.checker span.checked input.checkboxes')).map(function (item, index, array) {
                    var val = Number($(item).val());
                    if (val <= 0) {
                        return;
                    }
                    return val;
                });
                if(eids && eids.length <= 0){
                    NW.messageBox(window.OELang.notice,window.OELang.pleaseCheckMoveExams);
                    return;
                }
                jbox = jbox || new jBox('Modal', {
                    title: window.OELang.pleaseSelectExamCategory,
                    content: $content,
                    closeOnEsc: false,
                    closeOnClick: false,
                    closeButton: 'title',
                    width: 620,
                    zIndex: 99999,
                    onCreated: function () {
                        treeInst = treeInst || createCategoryTree($treeEl, $searchEl, null, treeOptions, 1, token);
                        $content.on('click', 'button[name="confirm"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            if (treeInst.is_loaded('#')) {
                                if (treeInst.get_selected().length >= 1 && Number(treeInst.get_selected()[0]) >= 0) {
                                    var cid = Number(treeInst.get_selected()[0]);
                                    var eids = $.makeArray($('#exams-list-table').find('div.checker span.checked input.checkboxes')).map(function (item, index, array) {
                                        var val = Number($(item).val());
                                        if (val <= 0) {
                                            return;
                                        }
                                        return val;
                                    });
                                    if (eids && eids.length > 0) {
                                        var data = {
                                            catid: cid,
                                            eids: eids
                                        };
                                        data[token] = 1;
                                        $.ajax({
                                            url: window.YKS.moveExamsToCategory,
                                            type: 'post',
                                            data: data,
                                            dataType: 'json',
                                            success: function(data, status, xhr) {
                                                grid.getDataTable().ajax.reload(function(e){
                                                    changeBtnStyle();
                                                });
                                                if (data.status === 'success') {
                                                    Metronic.alert({
                                                        type: 'success',
                                                        icon: 'success',
                                                        message: window.OELang.examsMoveCategorySuccess,
                                                        place: 'prepend',
                                                        container: $('#exams-list-table_wrapper'),
                                                        closeInSeconds: 5
                                                    });
                                                } else {
                                                    Metronic.alert({
                                                        type: 'success',
                                                        icon: 'success',
                                                        message: window.OELang.examsMoveCategoryFail,
                                                        place: 'prepend',
                                                        container: $('#exams-list-table_wrapper'),
                                                        closeInSeconds: 5
                                                    });
                                                }
                                            },
                                            error: function (xhr, status, error) {
                                                alert('status: ' + status + '; error: ' + error);
                                            }
                                        });
                                    } else {
                                        Metronic.alert({
                                            type: 'success',
                                            icon: 'error',
                                            message: window.OELang.pleaseCheckMoveExams,
                                            container: $('#exams-list-table_wrapper'),
                                            place: 'prepend',
                                            closeInSeconds: 5
                                        });
                                    }
                                }
                                jbox.close();
                            }
                        });
                        $content.on('click', 'button[name="cancel"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            jbox.close();
                        });
                    },
                    onOpen: function () {
                        treeInst.deselect_all();
                        treeInst.clear_search();
                        treeInst.refresh();
                        $searchEl.val('');
                    }
                });
                jbox.toggle();
            }
        }());
    }
    //试卷管理页面中弹出设置框
    function setupStartExamPage(iscn,eid,examtitle,isAdvance, basePath){

        $(document).on("change", "input[name='end-exam']", function(e){
            if($(this).val() == 1){
                $("#available-time-settings").fadeIn();
            }else{
                $("#available-time-settings").fadeOut();
            }
        }).on("change","input[name='send-type']",function(e){
            var sendType = $(this).val();
            var notifyType = $("input[name='exam-notification']:checked").val();
            if(notifyType == 0) {
                $("#notify-by-mobile").removeClass(sendType==0?"show":"hidden").addClass(sendType==0?"hidden":"show");
                $("#notify-by-email").removeClass("show").addClass("hidden");
            }else if(notifyType == 1){
                $("#notify-by-email").removeClass(sendType==0?"show":"hidden").addClass(sendType==0?"hidden":"show");
                $("#notify-by-mobile").removeClass("show").addClass("hidden");
            }
            $("#notify-by-group").removeClass(sendType==0?"hidden":"show").addClass(sendType==0?"show":"hidden");
        });
        $(".daterangepicker input").datetimepicker({
            isRTL: Metronic.isRTL(),
            format: $(".daterangepicker").attr("data-date-format"),
            autoclose: true,
            todayBtn: true,
            startDate: "2013-02-14 10:00",
            pickerPosition: (Metronic.isRTL() ? "bottom-right" : "bottom-left"),
            minuteStep: 5
        });


        //邮件编辑框
        var options = {
            init:'sdfasdfafa',
            plugins: 'bbcode',
            toolbar: "bold,italic,underline,strike,color,size|orderedlist,bulletlist,table|link,image,youtube|superscript,subscript,pastetext",
            emoticonsEnabled: false,
            resizeEnabled: true,
            disablePasting: false,
            enablePasteFiltering: true,
            parserOptions:{
                removeEmptyTags:false,
            },
            bbcodeTrim: true,
            style: '/components/com_exams/scedit/jquery.sceditor.default.min.css',
            autoUpdate: true,
            width: 530,
        }

        if(iscn){
            options['locale'] = "zh-cn";
        }
        $('textarea').sceditor(options);
        var editor = $('#email-sms-content').sceditor('instance');
        var editorContent;
        if(isAdvance){
            editorContent = '亲爱的考生，您好！\n' +
                '      诚邀你参与{0}的闯关，链接：[url=ks.youkaoshi.cn/{1}]ks.youkaoshi.cn/{2}[/url]。\n' +
                '广州好智';
            editor.val(editorContent.format(examtitle,eid,eid));
        }else{
            if(iscn){
                var examLink = $('input[name="examLink"]').val();
                editorContent = '亲爱的考生，您好！\n' +
                    '      诚邀你参与{0}的考试，链接：[url={1}]{1}[/url]。\n' +
                    '广州好智';
                editor.val(editorContent.format(examtitle, examLink));
            }else {
                editorContent = 'Hello！\n' +
                    '      {0} invite you to take the exam,link：[url={1}/doit/{2}/a.html]{1}/doit/{2}/a.html[/url]。\n' +
                    '广州好智';
                editor.val(editorContent.format(examtitle,basePath,eid));
            }

        }

        //添加联系人,contact-container
        $(".notify-the-exam-container").on("click",".add-btn",function(e){
            addPhones();
        }).on("click",".email-add-btn",function(e){
            addEmails();
        }).on("click",".contact-detail i.fa-remove",function(e){
            $(this).parent().remove();
            updateSelectedContacts();
            updateSelectedEmails();
        }).on("keypress",'input[name="add-email"]',function(e){
            if (event.keyCode === 13){
                addEmails();
            }
        }).on("keypress",'input[name="add-phone"]',function(e){
            if (event.keyCode === 13){
                addPhones();
            }
        })
        //手动添加手机号码
        function addPhones(){
            //去掉空格，判断是否包含除了数字和逗号之外的，
            var contact = $("input[name='add-phone']").val();
            //去空格
            contact = contact.replace(/\s+/g,"");
            var reg = /\,|\，/;
            var contactArray = contact.split(reg);
            //去掉空元素
            contactArray = contactArray.filter(function(n){
                return n
            });
            if(contactArray.length == 0){
                return;
            }
            var wrongPhones = [];
            //只检测中国地区的手机号码
            var regPhone = /^1[0-9]{10}$/;
            for (var i = 0;i < contactArray.length; i++){
                if(isNaN(contactArray[i])){
                    wrongPhones.push(contactArray[i]);
                    continue;
                }
                if(iscn){
                    if(!regPhone.test(contactArray[i])){
                        wrongPhones.push(contactArray[i]);
                    }
                }
            }
            if(wrongPhones.length>0){
                //NW.messageBox需要jbox支持
                NW.messageBox( window.OELang.notice, window.OELang.phoneNumberIsNotCorrect+"："+wrongPhones.join(","));
                // $("input[name='add-phone']").val("");
                return;
            }

            var tmpl ='<div data-phone="{0}" class="col-xs-6 contact-detail">'+
                '<i class="fa fa-remove" title="{1}">'+
                '</i>'+'{2}'+
                '</div>';
            for (var i = 0;i < contactArray.length; i++){
                $(".contact-container").append(tmpl.format(contactArray[i],window.OELang._delete,contactArray[i]));
            }
            //清空输入框的数据
            $("input[name='add-phone']").val("");
            updateSelectedContacts();
        }
        //手动添加邮箱
        function addEmails(){
            //去掉空格，判断是否包含除了数字和逗号之外的，
            var emails = $("input[name='add-email']").val();
            //去空格
            emails = emails.replace(/\s+/g,"");
            var reg = /\,|\，/;
            var emailsArray = emails.split(reg);
            //去掉空元素
            emailsArray = emailsArray.filter(function(n){
                return n
            });
            if(emailsArray.length == 0){
                return;
            }
            //验证邮箱格式
            var verifyEmail=new RegExp(/^[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]*)*@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/);
            var wrongEmails = [];
            for(var i = 0;i < emailsArray.length;i++){
                var em = emailsArray[i];
                em = em.replace(/(^\s*)|(\s*$)/g, "");
                if(!verifyEmail.test(em)){
                    wrongEmails.push(em);
                }
            }
            if(wrongEmails.length > 0){
                NW.messageBox(window.OELang.notice,window.OELang.emailFormatError+"："+wrongEmails.join(","));
                return;
            }
            var tmpl ='<div data-email="{0}" class="col-xs-6 contact-detail">'+
                '<i class="fa fa-remove" title="{1}">'+
                '</i>'+'{2}'+
                '</div>';
            for(var i = 0; i < emailsArray.length; i++){
                $(".email-container").append(tmpl.format(emailsArray[i],window.OELang._delete,emailsArray[i]))
            }
            //清空输入框的数据
            $("input[name='add-email']").val("");
            updateSelectedEmails();
        }

        //把手机号码添加到input
        function updateSelectedContacts(){
            var val = [];
            $(".contact-container").find(".contact-detail").each(function (index, mi) {
                val.push(
                    $(mi).attr("data-phone")
                )
            })
            $("input[name='send_contacts']").val(val.join(","));
        }
        //把email添加到input
        function updateSelectedEmails(){
            var val = [];
            $(".email-container").find(".contact-detail").each(function(index,mi){
                val.push(
                    $(mi).attr("data-email")
                )
            });
            $("input[name='send_emails']").val(val.join(","));
        }
    }

    //邮件插入图片
    $.fn.extend({
        insertAtCaret: function(text) {
            var obj = $(this)[0];
            var range, node;
            if (!obj.hasfocus) {
                obj.focus();
            }

            if (document.selection && document.selection.createRange) {
                this.focus();
                document.selection.createRange().pasteHTML(text);
                this.focus();
            } else if (window.getSelection && window.getSelection().getRangeAt) {
                range = window.getSelection().getRangeAt(0);
                if($('#emailArea').find(range.startContainer.parentElement).length > 0){
                    range.collapse(false);
                    node = range.createContextualFragment(text);
                    var c = node.lastChild;
                    range.insertNode(node);
                    if (c) {
                        range.setEndAfter(c);
                        range.setStartAfter(c)
                    }
                    var j = window.getSelection();
                    j.removeAllRanges();
                    j.addRange(range);
                    this.focus();
                }else{
                    $('#emailArea').find('.email-body-container').focus();
                }


            }
        }
    })
    function setupMakeUpExamPage(eid,token){
        var hasPhoneGrid,notHasPhoneGrid, emailGrid,notHasEmailGrid;
        /**
         * @param target table对象
         * @param sendType 短信发送还是邮件发送
         * @param  hasValue 是否有指定值
         * @constructor
         */
        var AjaxLoad = function(target,sendType,hasValue,onSetup){
            this.sendType = sendType;
            this.grid = $.nAjaxTable(target,window.YKS.makeUpExam,{
                sendType:sendType,
                eid:eid,
                hasValue:hasValue
            });
            this.grid.getDataTable().on("draw.dt", onSetup);
            NW.buildCheck($(target));
        }
        AjaxLoad.prototype = {
            reload: function () {
                var grid = this.grid;
                grid.clearAjaxParams();
                grid.getDataTable().ajax.reload();
            },
            getGrid: function () {
                return this.grid;
            }
        }

        //获取当前的发送模式
        var getCurrentType = function(){
            var id = $(".nav-tabs.send-type li.active ");
            if(id.hasClass('sms-tab')){
                return "sms";
            }else if(id.hasClass('email-tab')){
                return "email";
            }
        }
        //获取当前激活的tab
        var getCurrentGrid = function(){
            var id = $(".nav-tabs.send-type li.active ");
            if(id.hasClass('sms-tab')){
                return hasPhoneGrid;
            }else if(id.hasClass('email-tab')){
                return emailGrid;
            }
        }

        //更新已经输入的手机号码或者邮件提示,1表示手机，2表示邮箱
        var updateInputCount = function(type){
            if(type == 1){
                var phones = $('input[name="phones"]').val()?JSON.parse($('input[name="phones"]').val()):[];
                var el = $('.phone-input-count');

                el.html(window.OELang.mobileNumbersEnter.format(phones.length));
            }else{
                var phones = $('input[name="emails"]').val()?JSON.parse($('input[name="emails"]').val()):[];
                var el = $('.email-input-count');

                el.html(window.OELang.emailEnter.format(phones.length));
            }
        }

        var setUpNotHasPhone = function(){
            //已经手动输入的手机号码
            var phones = $('input[name="phones"]').val()?JSON.parse($('input[name="phones"]').val()):[];

            //显示未保存的手机号码
            $('input[name="inputPhone"]').each(function(){
                var self = $(this);
                var sid = self.data("value");
                if(phones){
                    $.each(phones,function(index,obj){
                        if(obj.sid == sid){
                            self.val(obj.phone);
                        }
                    });
                }
            })

            //更新没有手机号码的提示
            var recordsTotal = notHasPhoneGrid.getGrid().getDataTable().page.info().recordsTotal;
            var el = $('.sms-input-phone-container .portlet-title .caption span');
            if(recordsTotal == 0) $('.sms-input-phone-container').css('display', 'none');
            el.html(window.OELang.haveNoPhonesCount.format(recordsTotal));

            //更新已经输入的提示
            updateInputCount(1);
        }

        //已有手机号码的考生Grid初始方法
        var setUpHasPhone = function(){
            //更新没有手机号码的提示
            var recordsTotal = hasPhoneGrid.getGrid().getDataTable().page.info().recordsTotal;
            var el = $('.sms-phone-container .portlet-title .caption span');
            el.html(window.OELang.makeUpStudentHasPhone.format(recordsTotal));
        }
        var setUpHasEmail = function(){
            //更新没有手机号码的提示
            var recordsTotal = emailGrid.getGrid().getDataTable().page.info().recordsTotal;
            var el = $('.email-email-container .portlet-title .caption span');
            el.html(window.OELang.makeUpStudentHasEmail.format(recordsTotal));
        }
        var setUpNotHasEmail = function(){
            //已经手动输入的手机号码
            var emails = $('input[name="emails"]').val()?JSON.parse($('input[name="emails"]').val()):[];

            //显示未保存的手机号码
            $('input[name="inputEmail"]').each(function(){
                var self = $(this);
                var sid = self.data("value");
                if(emails){
                    $.each(emails,function(index,obj){
                        if(obj.sid == sid){
                            self.val(obj.email);
                        }
                    });
                }
            })

            //更新没有邮件的提示
            var recordsTotal = notHasEmailGrid.getGrid().getDataTable().page.info().recordsTotal;
            if(recordsTotal == 0) $('.email-input-email-container').css('display', 'none');
            var el = $('.email-input-email-container .portlet-title .caption span');
            el.html(window.OELang.haveNotEmailCount.format(recordsTotal));

            //更新已经输入的提示
            updateInputCount(2);
        }

        var sendEmails = function(target,type){
            NW.makeLoading(target);
            var uniqueId = $('input[name="emailToken"]').val();
            var emails = $('input[name="emails"]').val();
            var emailSubject = $('#email-subject').val();
            var data = {
                eid:eid,
                saveType:type,
                uniqueId:uniqueId,
                emails:emails
            }
            data[token] = 1;
            $.post(window.YKS.makeUpaExamSendEmails,data).done(function(rdata){
                NW.makeUnLoading(target);
                rdata = $.parseJSON(rdata);
                if(rdata.status == "ok"){
                    var template = '<div id="emailArea">'+$('#emailArea').html()+'</div>';
                    var sData = {
                        eid:eid,
                        template:template,
                        emailSubject:emailSubject
                    }
                    sData[token] = 1;
                    $.get(window.YKS.sendEmailsTrigger, sData)

                    var dialog,dContent;
                    var btns = [
                        {
                            label: window.OELang.viewEmails,
                            primary:true,
                            onClick: function () {
                                dialog.close();
                                window.location.href = window.YKS.emailView+"&eid="+eid;
                            }
                        },{
                            label: window.OELang.cancel,
                            onClick: function () {
                                dialog.close();
                            }
                        }
                    ];
                    if(rdata.failcount > 0){
                        dContent = window.OELang.sendEmailTipsTwo.format(rdata.succsscount,rdata.failcount);
                    }else{
                        dContent = window.OELang.sendEmailTipsOne.format(rdata.succsscount);
                    }
                    dialog = NW.showDialog(dContent, btns, window.OELang.sendedEmail, {
                        closeOnEsc: false,
                        closeOnClick: false,
                        closeButton: false
                    });

                }else{
                    alert(rdata.msg);
                }
            }).fail(function(e){
                NW.makeUnLoading(target);
                alert(e);
            })
        }

        /**
         * @param type 1保存并发送短信,0不保存但是发送短信
         */
        var sendSms = function(target,type){
            NW.makeLoading(target);
            var uniqueId = $('input[name="token"]').val();
            var phones = $('input[name="phones"]').val();
            var data = {
                eid:eid,
                saveType:type,
                uniqueId:uniqueId,
                phones:phones
            }
            data[token] = 1;
            $.post(window.YKS.makeUpaExamSendSms,data).done(function(rdata){
                NW.makeUnLoading(target);
                rdata = $.parseJSON(rdata);
                if(rdata.status == "ok"){
                    var sData = {
                        eid:eid
                    }
                    sData[token] = 1;
                    $.get(window.YKS.sendTrigger, sData)

                    var dialog,dContent;
                    var btns = [
                        {
                            label: window.OELang.viewSmsStatus,
                            primary:true,
                            onClick: function () {
                                dialog.close();
                                window.location.href = window.YKS.smsView+"&eid="+eid;
                            }
                        },{
                            label: window.OELang.cancel,
                            onClick: function () {
                                dialog.close();
                            }
                        }
                    ];
                    if(rdata.failcount > 0){
                        dContent = window.OELang.sendSMSTipsTwo.format(rdata.succsscount,rdata.failcount);
                    }else{
                        dContent = window.OELang.sendSMSTipsOne.format(rdata.succsscount);
                    }
                    dialog = NW.showDialog(dContent, btns, window.OELang.smsSendSuccessfully, {
                        closeOnEsc: false,
                        closeOnClick: false,
                        closeButton: false
                    });

                }else if(rdata.status == "insufficientsms"){
                    var prepaySmsBox = new jBox("Modal",{
                        title:window.OELang.rechargeSmsTitle,
                        closeButton: 'title',
                        closeOnEsc: true,
                        onCreated:function(){
                            this.setContent($("#prepay-sms").text());
                            $(".prepay-sms-button-groups").on("click",".cancel",function(){
                                prepaySmsBox.close();
                            })

                            $('input[name="sms-number"]').on("change",function(e){
                                var price = $(this).data("value");
                                $(".sms-price").html(window.OELang.smsAmounts.format(price));
                            })
                            $('.prepay-sms-container').on("click",'a[type="submit"]',function(e){
                                e.preventDefault();
                                var prepaySmsForm = document.getElementById('prepaySmsForm');
                                prepaySmsBox.close();
                                prepaySmsForm.submit();
                            })

                        },
                        onCloseComplete:function(){
                            prepaySmsBox.destroy();
                        }

                    })
                    prepaySmsBox.open();
                }else{
                    alert(rdata.msg);
                }
            }).fail(function(e){
                NW.makeUnLoading(target);
                alert(e);
            })
        }
        //切换发送短信和发送邮件
        $(".send-type").on("shown.bs.tab", function(e){
            var target = $(e.target).parent("li");
            if(target.hasClass("sms-tab")){
                if(!hasPhoneGrid){
                    hasPhoneGrid = new AjaxLoad($("#sms-has-phone-table"), "sms",1,function(e){setUpHasPhone();});
                    notHasPhoneGrid = new AjaxLoad($("#sms-input-phone-table"), "sms",0,function(e){setUpNotHasPhone();});
                }

                $('.sms-tab img').attr('src', '/components/com_exams/assets/img/radio_checked.png');
                $('.email-tab img').attr('src', '/components/com_exams/assets/img/radio_unchecked.png');
            }else{
                if(!emailGrid){
                    // target,sendType,hasValue,onSetup
                    emailGrid = new AjaxLoad($("#email-has-email-table"), "email",1,function(e){setUpHasEmail();});
                    notHasEmailGrid = new AjaxLoad($("#email-input-email-table"), "email",0,function(e){setUpNotHasEmail();});
                }
                $('.sms-tab img').attr('src', '/components/com_exams/assets/img/radio_unchecked.png');
                $('.email-tab img').attr('src', '/components/com_exams/assets/img/radio_checked.png');
            }
        })
        //使用 Javscript 来启用标签页
        $('a[href="#notify-by-sms"]').tab('show');


        $('#sms-input-phone-table').on('blur','input[name="inputPhone"]',function(e){
            var self = $(this);
            var phones = $('input[name="phones"]').val()?JSON.parse($('input[name="phones"]').val()):[];
            var value = self.data("value");
            var phone = self.val();
            var name = self.data("name");

            var tmpObj = {
                sid:value,
                name:name,
                phone:phone
            };
            if(!phones){
                if(isPhone(phone)){
                    phones.push(tmpObj)
                }
            }else{
                var flag = 0;
                $.each(phones,function(index,obj){
                    if(obj.sid == value){
                        flag = 1;
                        phones[index].phone = phone;
                    }
                });
                if(!flag){
                    phones.push(tmpObj);
                }
            }

            $('input[name="phones"]').val(JSON.stringify(phones));
            //更新已经输入的提示
            updateInputCount(1);

        })
        $('#email-input-email-table').on('blur','input[name="inputEmail"]',function(e){
            var self = $(this);
            var emails = $('input[name="emails"]').val()?JSON.parse($('input[name="emails"]').val()):[];
            var value = self.data("value");
            var email = self.val();
            var name = self.data("name");

            var tmpObj = {
                sid:value,
                name:name,
                email:email
            };
            if(!emails){
                emails.push(tmpObj);
            }else{
                var flag = 0;
                $.each(emails,function(index,obj){
                    if(obj.sid == value){
                        flag = 1;
                        emails[index].email = email;
                    }
                });
                if(!flag){
                    emails.push(tmpObj);
                }
            }

            $('input[name="emails"]').val(JSON.stringify(emails));
            //更新已经输入的提示
            updateInputCount(2);
        })
        $('.make-up-exam-container').on('click','.batch-import-btn',function(e){
            e.preventDefault();
            e.stopPropagation();
            var self = $(this);
            var url = self.attr('href');
            var sendType = getCurrentType();//发送sms或者邮件
            var importStuBox = new jBox('Modal',{
                title: self.text(),
                content:$('#importMakeUpExamGroup').html(),
                preventDefault: true,
                onCloseComplete: function(){
                    this.destroy();
                },
                onCreated: function () {
                    selectGroupTree(2,token)
                    $(".jBox-content").on("change","input[name='file_upload']", function () {
                        var self = $(this);
                        var f = $(this)[0];
                        var size = f.files[0].size;
                        var parentA = self.parent('a');
                        var uploadText = parentA.data("upload");
                        if (size > 2 * 1000 * 1000) {
                            var tips = parentA.data("tips");
                            NW.messageBox(window.OELang.notice, tips.format(2, (size / 1000 / 1000).toFixed(1)));
                            return;
                        }

                        $(".file-upload").addClass("disabled").find("span").html('<i class="fa fa-spinner fa-spin"></i>'+uploadText);

                        var form = $("#uploadForm");
                        var formData = new FormData(form[0]);
                        formData.append("sendType",sendType);

                        $.ajax({
                            url: form.attr("action"),
                            type: 'POST',
                            // Form数据
                            data: formData,
                            cache: false,
                            contentType: false,
                            processData: false
                        }).done(function (rdata) {
                            rdata = $.parseJSON(rdata);
                            if(rdata.status == "ok"){
                                var topData = $.parseJSON(rdata.topData);
                                if(sendType == "sms"){
                                    var batchInputPhoneContainer = $('.batch-input-phone-table-container');
                                    var phoneImportTips = $('.phone-import-tips');
                                    var uniqueId = rdata.token;
                                    $('input[name="token"]').val(uniqueId);

                                    phoneImportTips.css('display', 'none');
                                    batchInputPhoneContainer.css('display',"block");

                                    var tr = $('#sms-batch-input-phone-table').find('thead tr');
                                    $.each(topData,function(index,value){
                                        tr.append('<th>{0}</th>'.format(value.label));
                                    });
                                    $.nAjaxTable($("#sms-batch-input-phone-table"),window.YKS.listImportMakeUpStudents, {
                                        token:uniqueId},{
                                        onSuccess: function (grid, data) {
                                            importStuBox.close();
                                        }
                                    });
                                }else{
                                    var batchInputEmailContainer = $('.batch-input-email-table-container');
                                    var emailImportTips = $('.email-import-tips');
                                    var uniqueId = rdata.token;
                                    $('input[name="emailToken"]').val(uniqueId);

                                    emailImportTips.css('display', 'none');
                                    batchInputEmailContainer.css('display',"block");

                                    var tr = $('#email-batch-input-email-table').find('thead tr');
                                    $.each(topData,function(index,value){
                                        tr.append('<th>{0}</th>'.format(value.label));
                                    });
                                    $.nAjaxTable($("#email-batch-input-email-table"),window.YKS.listImportMakeUpStudents, {
                                        token:uniqueId},{
                                        onSuccess: function (grid, data) {
                                            importStuBox.close();
                                        }
                                    });
                                }

                            }else{

                                NW.messageBox(window.OELang.notice,rdata.msg,function(e){
                                    importStuBox.close();
                                })
                            }
                        })
                    }).on("change","#select_group",function(){
                        var val = $("#select_group").val();
                        if( val == '-1'){
                            $("#select_group").val('');
                            $.newGroup('<?php echo JSession::getFormToken() ?>',  function(title, gid){
                                var newGid = new Option( title, gid );
                                $("#select_group").append(newGid).val(gid);
                            })
                        }else{
                            $("input[name='gid']").val(val);
                        }
                    })
                    $('.bootstrap-tagsinput>input').css("cursor","pointer")

                },
                onOpen:function(){

                },
                maxWidth:800,
                maxHeight:500
            })
            importStuBox.open();
        }).on('click','.send-email-btn',function(e){
            sendEmails($(this),0);
        }).on('click','.save-send-email-btn',function(e){
            var self = $(this);
            var hasEmail = self.data('value');
            if(!hasEmail){
                NW.showCustomConfirmDialog(window.OELang.notice,window.OELang.saveAndSend,window.OELang.cancel,self.data('tips'),function(resp){
                    sendEmails(self,1);
                })
            }

        }).on('click','.save-send-sms-btn',function(e){
            var self = $(this);
            var hasPhone = $(this).data('value');
            if(!hasPhone){
                NW.showCustomConfirmDialog(window.OELang.notice,window.OELang.saveAndSend,window.OELang.cancel,self.data('tips'),function(resp){
                    sendSms(self,1);
                })
            }

        }).on('click','.send-sms-btn',function(e){
            sendSms($(this),0);
        }).on('click','.export-student-info',function(e){
            var type = getCurrentType();
            var exportStudentsUrl = window.YKS.exportStudents + "&action=makeupexam&eid={0}&sendtype={1}".format(eid,type);
            window.open(exportStudentsUrl);
        }).on("click",'.insert-btn',function(e){
            e.preventDefault();
            e.stopPropagation();
            var self = $(this);
            var value = self.data("value");
            var tmpl = "";
            if(value == "email-name"){
                tmpl = '<img style="height: 16px" class="email-name" src="/components/com_exams/assets/img/email-user-name.gif" alt="">';
            }else if(value == "email-exam"){
                tmpl = '<img style="height: 16px" class="email-exam-name" src="/components/com_exams/assets/img/email-exam-name.gif" alt="">';
            }else if(value == "email-company"){
                tmpl = '<img style="height: 16px" class="email-company-name" src="/components/com_exams/assets/img/email-company-name.gif" alt="">';
            }else if(value == "email-link"){
                tmpl = '<img style="height: 16px" class="email-exam-link" src="/components/com_exams/assets/img/email-exam-link.gif" alt="">';
            }else if(value == "email-begin"){
                tmpl = '<img style="height: 16px" class="email-start-time" src="/components/com_exams/assets/img/email-start-time.gif" alt="">';
            }else if(value == "email-end"){
                tmpl = '<img style="height: 16px" class="email-end-time" src="/components/com_exams/assets/img/email-end-time.gif" alt="">';
            }else{
                return false;
            }
            $("#emailArea").insertAtCaret(tmpl);
        }).on('click','.use-default-btn',function(){
            $('#emailArea').replaceWith($('#email-container-script').text())
        }).on('click','.email-operate-btn .save-btn',function(e){
            var template = '<div id="emailArea">'+$('#emailArea').html()+'</div>';
            var data = {
                eid:eid,
                template:template
            }
            data[token] = 1;
            $.post(window.YKS.saveEmailTemplate,data).done(function(d){
                var data = $.parseJSON(d);
                if(data.status == "ok"){
                    NW.messageBox(window.OELang.notice,window.OELang.savedSuccessfully)
                }else{
                    alert(data.msg);
                }
            }).fail(function(d){
                alert(d);
            })
        })
    }

    //这个datatyp就是$this->action的值，有exam、recent等
    function setupTakenListPage(datatype, eid, sid, token,isArchive,isAdvance) {
        var grid, groupActions;

        var setupUI = function(target){
            var css = {
                'padding': '10px',
                'max-width': '200px',
                'color': '#303030',
                'background-color': '#ffffff', //#f5f5b5
                'border': '1px solid #36aafd',
                '-moz-box-shadow': '0 0 10px rgba(0, 0, 0, .5)',
                '-webkit-box-shadow': '0 0 10px rgba(0, 0, 0, .5)',
                'box-shadow': '0 0 10px rgba(0, 0, 0, .5)',
                'text-shadow': 'none'
            };
            var hide = function (e, $el) {
                $el.slideUp(100);
            }

            return function(){
                //暂时隐藏红点点击事件
                // $('i.viewfields').jBox('Tooltip', {
                //     trigger: 'click',
                //     getContent: "tips"
                // });

                $(target).find('.operation-btn').jBox('Tooltip',{
                    theme: 'TooltipDark',
                    delayClose:1,
                    getContent:'title'
                })
                $(target).find('.showTooltip').parent().tooltipsy({
                    offset: [2, 0],
                    show: function (e, $el) {
                        $el.css({
                            'left': parseInt($el[0].style.left.replace(/[a-z]/g, '')) + 50 + 'px',
                            'opacity': '0.0',
                            'display': 'block'
                        }).animate({
                            'left': parseInt($el[0].style.left.replace(/[a-z]/g, '')) - 50 + 'px',
                            'opacity': '1.0'
                        }, 300);
                    },
                    content:function(e,$el){
                        var title = e.children('.showTooltip').attr('title')
                        e.children('.showTooltip').removeAttr('title');
                        $el.html(title);
                    },
                    hide: hide,
                    css: css
                });
                $(target).find(".leftTip").tooltipsy({
                    offset: [-10, 0],
                    show: function (e, $el) {
                        $el.css({
                            'left': parseInt($el[0].style.left.replace(/[a-z]/g, '')) - 50 + 'px',
                            'opacity': '0.0',
                            'display': 'block'
                        }).animate({
                            'left': parseInt($el[0].style.left.replace(/[a-z]/g, '')) + 50 + 'px',
                            'opacity': '1.0'
                        }, 300);
                    },
                    hide: hide,
                    css: css
                });
            }
        }

        var AjaxLoad = function (target, status, onSetup, startTime, endTime,gid,rangeStartSearch,rangeEndSearch,searchValues,searchFids,tfSearchValues,sfSearchValues) {
            this.status = status;
            this.startTime = startTime;
            this.endTime = endTime;
            this.groupid = gid;
            this.rangeStart = rangeStartSearch;
            this.rangeEnd = rangeEndSearch;
            this.multiSearchText = searchValues;
            this.multiFid = searchFids;
            this.tfSearchValues = tfSearchValues;
            this.sfSearchValues = sfSearchValues;
            if(isAdvance){
                var url = window.YKS.advanceTakenLists;
            }else{
                var url = window.YKS.takenLists;
            }
            this.grid = $.nAjaxTable(target, url, {
                datatype: datatype,
                eid: eid,
                sid: sid,
                st: status,
                startTime: startTime,
                endTime: endTime,
                gid: gid,
                rangeStart:rangeStartSearch,
                rangeEnd:rangeEndSearch,
                multiSearch:searchValues,
                multiFid:searchFids,
                tfSearchValues:tfSearchValues,
                sfSearchValues:sfSearchValues,
            });
            this.grid.getDataTable().on("draw.dt", onSetup);
            //是否包含未改的试卷
            this.grid.getDataTable().on('xhr.dt', function ( e, settings, json, xhr ){
                var hasUngradedPaper = json.hasUngradedPaper;
                if(hasUngradedPaper){
                    $(".btns-container").addClass("hasungradedpaper");
                }

                var recordsTotal = json.recordsTotal;
                if(recordsTotal == 0){
                    $(target.selector+'_wrapper').find('.dataTables_info').each(function(){
                        var self = $(this);
                        self.css('display','none');
                    })
                    $(target.selector+'_wrapper').parent().css('padding-bottom','50px');
                }else{
                    $(target.selector+'_wrapper').find('.dataTables_info').each(function(){
                        var self = $(this);
                        self.css('display','inline-block');
                    })
                }
            });
            NW.buildCheck($(target));
        }
        AjaxLoad.prototype = {
            search: function (tfValues,sfValues) {
                if(tfSearchValues == this.tfSearchValues  && sfValues == this.sfSearchValues) return;
                this.tfSearchValues = tfValues;
                this.sfSearchValues = sfValues;
                this.reload();
            },
            multiMenuSearch: function (text,fids) {
                if(text == this.multiSearchText && fids == this.multiFid) return;
                this.multiSearchText = text;
                this.multiFid = fids;
                this.reload();
            },
            setTimeRange: function(start, end){
                if(start == this.startTime && end == this.endTime ) return;
               this.startTime = start;
               this.endTime = end;
               this.reload();
            },
            setGroup: function (gid) {//lway
                if(gid == this.groupid) return;
                this.groupid = gid;
                this.reload();
            },
            setScoreRange: function (start,end) {
                if(start == this.rangeStart && end == this.rangeEnd ) return;
                this.rangeStart = start;
                this.rangeEnd = end;
                this.reload();
            },
            setRanking:function(type){
              this.rankingType = type;
              this.reload();
            },
            setBestRank:function(status){
                this.openBestRank = status;
                this.reload();
            },
            reload: function () {
                var grid = this.grid;
                grid.clearAjaxParams();
                grid.addAjaxParam("datatype", datatype);
                grid.addAjaxParam("eid", eid);
                grid.addAjaxParam("sid", sid);
                grid.addAjaxParam("st", this.status);
                grid.addAjaxParam("tfSearchValues", this.tfSearchValues);
                grid.addAjaxParam("sfSearchValues", this.sfSearchValues);
                grid.addAjaxParam("multiSearch", this.multiSearchText);
                grid.addAjaxParam("multiFid", this.multiFid);
                grid.addAjaxParam("startTime", this.startTime);
                grid.addAjaxParam("endTime", this.endTime);
                grid.addAjaxParam("gid", this.groupid);//lway
                grid.addAjaxParam("rangeStart", this.rangeStart);//lway
                grid.addAjaxParam("rangeEnd", this.rangeEnd);//lway
                grid.addAjaxParam("rankingType",this.rankingType);
                grid.addAjaxParam("openBestRank",this.openBestRank);
                grid.getDataTable().ajax.reload(function (e) {
                    if(e.data.length <= 0) {
                        $(".btns-container a.exporttaken").addClass("hasnorecords");
                        $(".btns-container a.exportstuanswers").addClass("hasnorecords");
                        $(".btns-container a.exporttopdf").addClass("hasnorecords");
                    }else{
                        $(".btns-container a.exporttaken").removeClass("hasnorecords");
                        $(".btns-container a.exportstuanswers").removeClass("hasnorecords");
                        $(".btns-container a.exporttopdf").removeClass("hasnorecords");
                    }
                    if(e.hasUngradedPaper){
                        $(".btns-container").addClass("hasungradedpaper");
                    }else{
                        $(".btns-container").removeClass("hasungradedpaper");
                    }
                });
            },
            getGrid: function () {
                return this.grid;
            }
        };

        var finishedTakensGrid, doingTakensGrid, missingTakenGrid,rewardsGrid,ranksGrid;

        //筛选提示
        var filterTmpl = '<li>'+
            '<a class="filter-tips" href="javascript:;" title="{0}" data-type="{1}">'+
            '{2}'+
            '<i class="fa fa-times" aria-hidden="true"></i>'+
            '</a>'+
            '</li>';
        //筛选提示
        var multiFilterTmpl = '<li>'+
            '<a class="filter-tips" href="javascript:;" title="{0}" data-type="{1}" data-fid="{2}">'+
            '{3}'+
            '<i class="fa fa-times" aria-hidden="true"></i>'+
            '</a>'+
            '</li>';
        //筛选提示
        var searchFilterTmpl = '<li>'+
            '<a class="filter-tips" href="javascript:;" title="{0}" data-t="{1}"  data-type="4" data-value="{2}">'+
            '{3}'+
            '<i class="fa fa-times" aria-hidden="true"></i>'+
            '</a>'+
            '</li>';
        //筛选提示
        var showFilterTips = function () {
            if($(".takens-filter-tips ul").children("li").length <= 0){
                $(".takens-filter-tips").addClass("hidden");
            }else {
                $(".takens-filter-tips").removeClass("hidden").addClass("show");
            }
        }
        showFilterTips();

        // var timeStart,timeEnd,gidSearch,rangeStartSearch,rangeEndSearch,searchValue,fid,searchType,searchValues,searchFids;
        //fvSearchValues是组信息，vSearchValues是信息收集项,searchValues是信息收集项中多级菜单的值
        // data-searchType="0" data-fid="0" data-search=""
        //formSubmitData后面的参数不能放在getFilterValues()里面，因为后面的ajax会用到
        var formSubmitData,timeStart,timeEnd,gidSearch,rangeStartSearch,rangeEndSearch,searchValues,searchFids,sfSearchValues,tfSearchValues,rankingType;

        var getFilterValues = function () {
            timeStart = $(".btns-container span.datetime-range").data('start');
            timeEnd = $(".btns-container span.datetime-range").data('end');
            gidSearch = $(".btns-container span.group-filter").data('gid');
            rangeStartSearch = $(".btns-container span.score-filter").data('start');
            rangeEndSearch = $(".btns-container span.score-filter").data('end');
            rankingType = $(".btns-container span.ranking-filter").data('type');
            searchValues = [];
            searchFids = [];
            $("span.field-dropdown-menu").each(function (){
                if($(this).data("value") != "" && $(this).data("fid") != 0) {
                    searchValues.push($(this).data("value"));
                    searchFids.push($(this).data("fid"));
                }
            });

            //遍历，
            sfSearchValues = [];
            tfSearchValues = [];
            $(".search-container select.qtype-filter option").each(function (){
                if($(this).data("type") == 1 && $(this).data("search") != "") {
                    tfSearchValues.push($(this).val()+"_"+$(this).data("search"));
                }else if($(this).data("type") == 2 && $(this).data("search") != ""){
                    sfSearchValues.push($(this).val()+"_"+$(this).data("search"));
                }
            });

            var tabId = $(".tab-pane.active").attr("id");
            //makeArray将一个类数组对象转换为真正的数组对象。
            //不加tabid全选获取到的是两个tab的值
            var vals = $.makeArray($("#"+tabId+" .checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function (value) {
                return value > 0;
            });
            //选择了,tids>0的情况
            if(vals.length > 0) {
                if($("#"+tabId+" .checked").find("input[data-autograde='1']").length > 0){
                    $(".btns-container").addClass("hasungradedpaper");
                }else{
                    $(".btns-container").removeClass("hasungradedpaper");
                }
            }

            //考生报告文件名
            var fileNameFiled=[];
            $("#file_name_selector_right li").each(function (e) {
                if($(this).data("type") == 1) {
                    fileNameFiled.push("tv"+$(this).data("value"));

                }else if($(this).data("type") == 2){
                    fileNameFiled.push("v"+$(this).data("value"));
                }
            })

            var currentStatus = "finished";
            if(getCurrentGrid()){
                currentStatus = getCurrentGrid().status;
            }
            //导出最高分记录
            var openBestRank = $("input[name='openBestRank']").prop("checked")?1:0;
            formSubmitData = {
                startTime:timeStart,
                endTime:timeEnd,
                gid:gidSearch,
                rangeStart:rangeStartSearch,
                rangeEnd:rangeEndSearch,
                tfSearchValues:tfSearchValues.join(','),
                sfSearchValues:sfSearchValues.join(','),
                multiSearch:searchValues.join(";"),
                multiFid:searchFids.join(","),
                status:currentStatus,
                tids:vals.join(","),
                rankingType:rankingType,
                openBestRank:openBestRank,
            }
            if(fileNameFiled.length > 0) {
                formSubmitData.fileNameFiled = fileNameFiled.join(",");
            }
        }

       //日期选择
        var setupTakenFilterAction = function() {
            $("span.datetime-range").append($("#date-picker").text())
            $(".btns-container input").click(function(e) {
                e.stopPropagation();
            });

            var ranges = {};
            ranges[window.OELang.today] = [ moment().startOf('day'), moment().endOf('day') ];
            ranges[window.OELang.yesterday] = [ moment().subtract(1, 'days').startOf('day'), moment().subtract(1, 'days').endOf('day') ];
            ranges[window.OELang.lastWeek] = [ moment().startOf('week').subtract(7, 'days'), moment().startOf('week') ];
            ranges[window.OELang.lastMonth] = [ moment().startOf('month').subtract(1, 'days').startOf('month'), moment().startOf('month') ];
            ranges[window.OELang.lastNDays.format(7)] = [moment().subtract(7, 'days'), moment()];
            ranges[window.OELang.lastNDays.format(30)] = [moment().subtract(30, 'days'), moment()];
            $(".daterangepicker input").datetimepicker({
                isRTL: Metronic.isRTL(),
                format: $(".daterangepicker").attr("data-date-format"),
                autoclose: true,
                todayBtn: true,
                startDate: "2014-02-14 10:00",
                pickerPosition: (Metronic.isRTL() ? "bottom-right" : "bottom-left"),
                minuteStep: 5
            });

            $(".time-picker-menu").on("click",".time-picker-button",function(e){
                var takenlistRange = $(".btns-container span.datetime-range");
                var timestart,timeend;
                $(".daterangepicker input").each(function(){
                    if($(this).attr("name") == "time_start"){
                       timestart = $(this).val();
                    }else{
                        timeend = $(this).val();
                    }
                })
                if(timestart==""){
                    NW.messageBox(window.OELang.notice, window.OELang.startTimeisempty);
                    return;
                }
                if(timeend=="") {
                    NW.messageBox(window.OELang.notice, window.OELang.endTimeisempty);
                    return;
                }
                timestartFmt = Date.parse(new Date(timestart))/1000;
                timeendFmt = Date.parse(new Date(timeend))/1000;
                if(timeendFmt < timestartFmt){
                    NW.messageBox(window.OELang.notice, window.OELang.endTimeIsLessThanStarTime);
                    return;
                }
                takenlistRange.data('start', timestartFmt);
                takenlistRange.data('end', timeendFmt);

                //如果存在就移除
                if($(".takens-filter-tips a[data-type='3']").length > 0) {
                    $(".takens-filter-tips a[data-type='3']").parent().replaceWith($(filterTmpl.format(window.OELang.filterTipsDateTitle.format(timestart,timeend),3,window.OELang.filterTipsDateTitle.format(timestart,timeend))));
                }else{
                    $(".takens-filter-tips ul").append($(filterTmpl.format(window.OELang.filterTipsDateTitle.format(timestart,timeend),3,window.OELang.filterTipsDateTitle.format(timestart,timeend))));
                }
                showFilterTips();
                getCurrentGrid().setTimeRange( timestartFmt, timeendFmt);
            }).on("click",".custom-time a",function(e){
                var takenlistRange = $(".btns-container span.datetime-range");
                var customName = $(this).text();
                var timestart,timeend;
                //开始和结束时间
                timestart = new Date(ranges[customName][0]);
                timeend = new Date(ranges[customName][1]);

                timestartFmt = Date.parse(timestart)/1000;
                timeendFmt = Date.parse(timeend)/1000;

                takenlistRange.data('start', timestartFmt);
                takenlistRange.data('end', timeendFmt);

                //如果存在就移除
                if($(".takens-filter-tips a[data-type='3']").length > 0) {
                    $(".takens-filter-tips a[data-type='3']").parent().replaceWith($(filterTmpl.format(window.OELang.filterTipsDateTitle.format(timestart.Format("yyyy-MM-dd hh:mm:ss"),timeend.Format("yyyy-MM-dd hh:mm:ss")),3,window.OELang.filterTipsDateNotCustom.format(customName))));
                }else{
                    $(".takens-filter-tips ul").append($(filterTmpl.format(window.OELang.filterTipsDateTitle.format(timestart.Format("yyyy-MM-dd hh:mm:ss"),timeend.Format("yyyy-MM-dd hh:mm:ss")),3,window.OELang.filterTipsDateNotCustom.format(customName))));
                }
                showFilterTips();
                getCurrentGrid().setTimeRange( timestartFmt, timeendFmt);
            })

        }
        setupTakenFilterAction();

        //显示最高分记录
        $("#taken-finished").on("change","input[name='openBestRank']",function(){
            var status = 0;
            if($(this).prop("checked")){
                status = 1;
            }
            getCurrentGrid().setBestRank(status);
        })

        //获取当前激活的tab
        var getCurrentGrid = function(){
            var id = $(".tab-pane.active").attr("id");
            if(id == "taken-finished"){
                showOrHideFilterBtns(true);
                return finishedTakensGrid;
            }else if(id == 'taken-doing'){
                showOrHideFilterBtns(true);
                return doingTakensGrid;
            }else if(id == 'rewards-list'){
                showOrHideFilterBtns(true);
                return rewardsGrid;
            }else if(id == 'show-ranks'){
                showOrHideFilterBtns(true);
                return ranksGrid;
            }else{
                showOrHideFilterBtns(false);
                return missingTakenGrid;
            }
        }
        var showOrHideFilterBtns = function(type){
            var btnContainer = $('.btns-container');
            var searchContainer = $('.search-container');
            var takensFilterTips = $('.takens-filter-tips');
            if(type){
                if(btnContainer.hasClass('hide')){
                    btnContainer.removeClass('hide');
                }
                if(searchContainer.hasClass('hide')){
                    searchContainer.removeClass('hide');
                }
                if(takensFilterTips.hasClass('hide')){
                    takensFilterTips.removeClass('hide').addClass('show');
                }
            }else{
                if(!btnContainer.hasClass('hide')){
                    btnContainer.addClass('hide');
                }
                if(!searchContainer.hasClass('hide')){
                    searchContainer.addClass('hide');
                }
                if(!takensFilterTips.hasClass('hide')){
                    takensFilterTips.removeClass("show").addClass('hide');
                }
            }
        }

        //删除筛选提示并且刷新
        $(".takens-filter-tips").on("click","i.fa-times",function (e) {
            var dataType = $(this).parent().attr("data-type");
            switch (dataType) {
                case "1":
                    $(".takens-filter-tips a[data-type='1']").parent().remove();
                    $(".btns-container span.group-filter").data('gid',0);
                    getCurrentGrid().setGroup(0);
                    showFilterTips();
                    break;
                case "2":
                    $(".takens-filter-tips a[data-type='2']").parent().remove();
                    $(".btns-container span.score-filter").data('start',0);
                    $(".btns-container span.score-filter").data('end',0);
                    getCurrentGrid().setScoreRange(0, 0);
                    showFilterTips();
                    break;
                case "3":
                    $(".takens-filter-tips a[data-type='3']").parent().remove();
                    $(".btns-container span.datetime-range").data('start',0);
                    $(".btns-container span.datetime-range").data('end',0);
                    getCurrentGrid().setTimeRange(0,0);
                    showFilterTips();
                    break;
                case "4":
                    var dataT = $(this).parent().attr("data-t");
                    var dataValue = $(this).parent().attr("data-value");
                    $(".search-container select.qtype-filter option[data-type='{0}'][value='{1}']".format(dataT,dataValue)).data('search',"");
                    $(this).parents('li').remove();
                    getFilterValues();
                    getCurrentGrid().search(tfSearchValues.join(','),sfSearchValues.join(','));
                    showFilterTips();
                    break;
                case "5":
                    var dataFid = $(this).parent().attr("data-fid");
                    $(this).parents("li").remove();
                    $(".btns-container span[data-id='{0}']".format(dataFid)).data('fid', 0);
                    $(".btns-container span[data-id='{0}']".format(dataFid)).data('value', "");
                    //遍历，
                    var searchValues = [];
                    var searchFids = [];
                    $("span.field-dropdown-menu").each(function (){
                        if($(this).data("value") != "" && $(this).data("fid") != 0) {
                            searchValues.push($(this).data("value"));
                            searchFids.push($(this).data("fid"));
                        }
                    });
                    getCurrentGrid().multiMenuSearch(searchValues.join(";"),searchFids.join(","));
                    showFilterTips();
                    break;
                case "6":
                    $(".takens-filter-tips a[data-type='6']").parent().remove();
                    $(".btns-container span.ranking-filter").data('type',1);
                    getCurrentGrid().setRanking(1);
                    showFilterTips();
                    break;
                default:
                    break;
            }
        })


        var specifiedGroupTreeInst;
        var treeEl2 = $("#specified-group-tree");
        var specifiedGroupSearchEl = $('input[name="specified-categories-search-input"]');
        var selectGroupId = 0;
        var treeOptions2 = {
            core: {
                multiple: true,
                check_callback: true,
                data: {
                    type: 'post',
                    dataType: 'json',
                    url: window.YKS.loadGroups,
                    data: function (node) {
                        var data = {};
                        data[token] = 1;
                        data['catid'] = selectGroupId;
                        if (node.id === '#') {
                            data.cats = [];
                        } else {
                            data.catid = node.id;
                        }
                        return data;
                    }
                }
            },
            plugins: ['contextmenu'],
            createdNodeCallback: function (inst, node) {
                inst.deselect_all();
                inst.select_node(node);

            },
            renamedNodeCallback: function (inst, node) {
                inst.deselect_all();
                inst.select_node(node);

            },
            removedNodeCallback: function (inst, node) {
            }
        };
        var specifiedGroupBox = new jBox('Modal', {
            width:$(window).width()*0.98,
            height:$(window).width()*0.98,
            maxWidth: 620,
            maxHeight: 363,
            id:"specifiedGroupBoxId",
            title: window.OELang.selectAGroup,
            content: $('#specifiedGroupJboxContent'),
            preventDefault: true,
            onCreated:function(){
                $("#specifiedGroupBoxId").on('click', "button[name='cancel2']", function (e){
                    e.preventDefault();
                    specifiedGroupBox.close();
                });
                $("#specifiedGroupBoxId").on('click', "button[name='confirm2']", function (e){
                    e.preventDefault();
                    var gids = specifiedGroupTreeInst.get_selected().toString(),groupTitle = specifiedGroupTreeInst.get_text(specifiedGroupTreeInst.get_selected());
                    if (gids == ''){
                        NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectGroup);
                        return;
                    }
                    //添加data-gid
                    $(".btns-container span.group-filter").data('gid',gids);
                    //如果存在就移除
                    if($(".takens-filter-tips a[data-type='1']").length > 0) {
                        $(".takens-filter-tips a[data-type='1']").parent().replaceWith($(filterTmpl.format(groupTitle,1,window.OELang.filterTipsGroup.format(groupTitle))));
                    }else{
                        //添加筛选提示
                        $(".takens-filter-tips ul").append($(filterTmpl.format(groupTitle,1,window.OELang.filterTipsGroup.format(groupTitle))));
                    }

                    showFilterTips();
                    getCurrentGrid().setGroup(gids);
                    specifiedGroupBox.close();
                });
            }
        });

        //分组，成绩，多级下拉菜单
        $('.btns-container').on('click', 'ul.grouping a', function (e) {
            var e = e || window.event;
            e.preventDefault();
            e.stopPropagation();

            var a = $(this);
            var groupid = Number(a.data('groupid'));
            if (groupid < 0) return;
            //添加data-gid
            $(".btns-container span.group-filter").data('gid',groupid);
            //如果存在就移除
            if($(".takens-filter-tips a[data-type='1']").length > 0) {
                $(".takens-filter-tips a[data-type='1']").parent().replaceWith($(filterTmpl.format(a.attr("title"),1,window.OELang.filterTipsGroup.format(a.attr("title")))));
            }else{
                //添加筛选提示
                $(".takens-filter-tips ul").append($(filterTmpl.format(a.attr("title"),1,window.OELang.filterTipsGroup.format(a.attr("title")))));
            }

            showFilterTips();
            getCurrentGrid().setGroup(groupid);

        }).on('click','ul.grouping a.specified-group i.fa-plus-square-o',function(e){
            e.preventDefault();
            e.stopPropagation();
            var self = $(this);

            var parentA = self.parent('a');
            var isFather = parentA.data('father');
            var gid = parentA.data('groupid');


            if(isFather){
                selectGroupId = gid;
                currentTable = 0;
                specifiedGroupTreeInst = specifiedGroupTreeInst ||  $.createGroupTree(treeEl2, specifiedGroupSearchEl, null, treeOptions2, token);
                specifiedGroupTreeInst.refresh ();
                specifiedGroupBox.open();
            }
        }).on('click', 'ul.scorerange a.score-range', function (e) {
            e.preventDefault();//防止链接打开url
            e.stopPropagation();//阻止 click 事件冒泡到父元素
            var a = $(this);
            var rangeid = Number(a.data('rid'));
            if (rangeid < 0) return;
            var rangestart = Number(a.data('start'));
            var rangeend = Number(a.data('end'));
            //添加data
            $(".btns-container span.score-filter").data('start',rangestart);
            $(".btns-container span.score-filter").data('end',rangeend);
            //如果存在就移除
            if($(".takens-filter-tips a[data-type='2']").length > 0) {
                $(".takens-filter-tips a[data-type='2']").parent().replaceWith($(filterTmpl.format(a.attr("title"),2,window.OELang.filterTipsScore.format(a.attr("title")))));
            }else {
                //添加分组筛选提示
                $(".takens-filter-tips ul").append($(filterTmpl.format(a.attr("title"),2,window.OELang.filterTipsScore.format(a.attr("title")))));
            }
            showFilterTips();
            getCurrentGrid().setScoreRange(rangestart, rangeend);

        }).on('click', 'a.customized-range', function (e) {
            e.preventDefault();
            e.stopPropagation();
            var start = parseFloat($("#customized-range-start").val());
            var end = parseFloat($("#customized-range-end").val());
            if(start < 0 || end <= 0 || isNaN(end) || isNaN(start) || start > 9999 || end > 9999){
                NW.messageBox(window.OELang.notice, window.OELang.valueShouldLargeThanZero);
                return;
            }
            if(end<start) {
                NW.messageBox(window.OELang.notice, window.OELang.endMoreThanStart);
                return;
            }
            //添加data
            $(".btns-container span.score-filter").data('start',start);
            $(".btns-container span.score-filter").data('end',end);
            //如果提示存在就移除
            if($(".takens-filter-tips a[data-type='2']").length > 0) {
                $(".takens-filter-tips a[data-type='2']").parent().replaceWith($(filterTmpl.format(window.OELang.scoreToScore.format(start, end),2,window.OELang.filterTipsScore.format(window.OELang.scoreToScore.format(start, end)))));
            }else {
                //添加分组筛选提示window.OELang.scoreToScore.format(start, end)
                $(".takens-filter-tips ul").append($(filterTmpl.format(window.OELang.scoreToScore.format(start, end),2,window.OELang.filterTipsScore.format(window.OELang.scoreToScore.format(start, end)))));
            }
            showFilterTips();
            getCurrentGrid().setScoreRange(start, end);
        }).on('click', 'a.add-score-range', function (e) {
            e.preventDefault();
            e.stopPropagation();
            var start = parseInt($("#customized-range-start").val());
            var end = parseInt($("#customized-range-end").val());
            if(start < 0 || end <= 0 || isNaN(end) || isNaN(start) || start > 9999 || end > 9999){
                NW.messageBox(window.OELang.notice, window.OELang.valueShouldLargeThanZero);
                return;
            }
            if(end<start) {
                NW.messageBox(window.OELang.notice, window.OELang.endMoreThanStart);
                return;
            }
            var d = {
                eid: eid,
                start: start,
                end: end
            }
            d[token] = 1;

            $.post(window.YKS.addScoreRange, d).done(function (rdata) {
                rdata = $.parseJSON(rdata);
                if (rdata.status == "error") {
                    NW.messageBox(window.OELang.notice, rdata.msg);
                } else {
                    var tmpl = '<li>' +
                        '<a class="score-range" href="javascript:;" data-rid="{0}" data-start="{1}" data-end="{2}" title="{3}">' +
                        '{4}' +
                        '<span type="button" class="btn btn-default pull-right remove-score-range">{5}</span>' +
                        '</a>' +
                        '</li>'
                    $('ul li input#customized-range-start').before($(tmpl.format(rdata.rid, start, end, window.OELang.scoreToScore.format(start, end),window.OELang.scoreToScore.format(start, end), window.OELang.removeScoreRange)));
                }
            })
        }).on('click', '.remove-score-range', function (e) {
            e.preventDefault();
            e.stopPropagation();
            var a= $(this).parent();
            var rid = Number(a.data('rid'));
            var d = {};
            d.rid = rid;
            d[token] = 1;
            $.post(window.YKS.deleteScoreRange, d).done(function (rdata) {
                rdata = $.parseJSON(rdata);
                if (rdata.status == "error") {
                    NW.messageBox(window.OELang.notice, rdata.msg);
                } else {
                    a.addClass("hidden");
                }
            })
        }).on('click','a.field-menu-item',function (e) {
            e.preventDefault();
            e.stopPropagation();
            var multiSearchValue = $(this).data("items");
            var multiSearchFid = $(this).data("fid");
            //添加data
            $(this).parents("span").data("fid",multiSearchFid);
            $(this).parents("span").data("value",multiSearchValue);
            //如果提示存在就移除
            if($(".takens-filter-tips a[data-fid='{0}']".format(multiSearchFid)).length > 0) {
                $(".takens-filter-tips a[data-fid='{0}']".format(multiSearchFid)).parent().replaceWith($(multiFilterTmpl.format(multiSearchValue,5,multiSearchFid,multiSearchValue)));
            }else{
                //添加分组筛选提示window.OELang.scoreToScore.format(start, end)
                $(".takens-filter-tips ul").append($(multiFilterTmpl.format(multiSearchValue,5,multiSearchFid,multiSearchValue)));
            }
            showFilterTips();
            //遍历，
            var multiSearchValues = [];
            var multiSearchFids = [];
            $("span.field-dropdown-menu").each(function (){
                if($(this).data("value") != "" && $(this).data("fid") != 0) {
                    multiSearchValues.push($(this).data("value"));
                    multiSearchFids.push($(this).data("fid"));
                }
            });
            getCurrentGrid().multiMenuSearch(multiSearchValues.join(";"),multiSearchFids.join(","));

        }).on("click","ul.ranking a",function(e) {
            e.preventDefault();
            e.stopPropagation();
            $(this).parents("span").data("type",$(this).data("type"));
            getFilterValues();
            //如果提示存在就移除
            if($(".takens-filter-tips a[data-type='6']").length > 0) {
                $(".takens-filter-tips a[data-type='6']").parent().replaceWith($(filterTmpl.format($(this).attr("title"),6,window.OELang.filterTipsRanking.format($(this).attr("title")))));
            }else {
                //添加分组筛选提示window.OELang.scoreToScore.format(start, end)
                $(".takens-filter-tips ul").append($(filterTmpl.format($(this).attr("title"),6,window.OELang.filterTipsRanking.format($(this).attr("title")))));
            }
            showFilterTips();
            getCurrentGrid().setRanking(rankingType);

        });
        $("button.search-filter-btn").on('click',function(event){
            var searchValue = $("input[name='search']").val();
            var searchId = parseInt($('select.qtype-filter').val());
            var searchType = $('select.qtype-filter').find("option:selected").data("type");
            var searchLabel = $('select.qtype-filter').find("option:selected").text();
            //添加data
            $('select.qtype-filter').find("option:selected").data("search",searchValue);

            //如果提示存在就替换
            var searchTipsObj = $(".takens-filter-tips a[data-type='4'][data-t='{0}'][data-value='{1}']".format(searchType,searchId));
            if(searchTipsObj.length > 0) {
                if(searchValue != "") {
                    searchTipsObj.parent().replaceWith($(searchFilterTmpl.format(searchValue,searchType,searchId, window.OELang.filterLabelAndValue.format(searchLabel,searchValue))));
                }else {
                    searchTipsObj.parent().remove();
                }
            }else{
                //添加分组筛选提示window.OELang.scoreToScore.format(start, end)
                if(searchValue != "") {
                    $(".takens-filter-tips ul").append($(searchFilterTmpl.format(searchValue,searchType,searchId,window.OELang.filterLabelAndValue.format(searchLabel,searchValue))));
                }

            }
            showFilterTips();
            getFilterValues();
            getCurrentGrid().search(tfSearchValues.join(','),sfSearchValues.join(','));


            var offset = $('.takens-filter-tips a[title="{0}"]'.format(searchValue)).offset();
            var flyer = $('<img class="u-flyer" src="/components/com_exams/assets/img/stu-dashboard-wrong-hover.png"/>');
            flySearch(event,offset,flyer,$(this))

        });


        var gridReloadAll = function () {
            var currentGrid = getCurrentGrid();
            var isReload = false;
            if(currentGrid.groupid != gidSearch) {
                currentGrid.groupid = gidSearch;
                isReload = true;
            }
            if(currentGrid.tfSearchValues != tfSearchValues.join(",")) {
                currentGrid.tfSearchValues = tfSearchValues.join(",");
                isReload = true;
            }
            if(currentGrid.sfSearchValues != sfSearchValues.join(",")) {
                currentGrid.sfSearchValues = sfSearchValues.join(",");
                isReload = true;
            }
            if(currentGrid.startTime != timeStart){
                currentGrid.startTime = timeStart;
                isReload = true;
            }
            if(currentGrid.endTime != timeEnd){
                currentGrid.endTime = timeEnd;
                isReload = true;
            }
            if(currentGrid.rangeStart != rangeStartSearch) {
                currentGrid.rangeStart = rangeStartSearch;
                isReload = true;
            }
            if(currentGrid.rangeEnd != rangeEndSearch) {
                currentGrid.rangeEnd = rangeEndSearch;
                isReload = true;
            }
            if(currentGrid.multiSearchText != searchValues.join(';')) {
                currentGrid.multiSearchText = searchValues.join(';');
                isReload = true;
            }
            if(currentGrid.multiFid != searchFids.join(',')) {
                currentGrid.multiFid = searchFids.join(',');
                isReload = true;
            }
            if(isReload) {
                currentGrid.reload();
            }
        }

        $(".lists").on("shown.bs.tab", function(e){
            var target = $(e.target).parent("li");
            getFilterValues();

            if(target.hasClass("finished-tab")){
                if(!finishedTakensGrid){
                    //var AjaxLoad = function (target, status, onSetup, startTime, endTime)
                    finishedTakensGrid = new AjaxLoad($("#takens-list-finished"), "finished", function(e){
                        setupUI("#taken-finished")();
                    }, timeStart,timeEnd,gidSearch,rangeStartSearch,rangeEndSearch,searchValues.join(';'),searchFids.join(','),tfSearchValues.join(','),sfSearchValues.join(','));

                    var bestRank = finishedTakensGrid.grid.getTableWrapper().find(".row:first").find(".table-group-actions");
                    var openBestRank = "<div class='yks-cb operation-btn best-rank' title='"+window.OELang.bestRankOpenTips+"' style='margin-top: 2px'><input type='checkbox' name='openBestRank' id='openRank' /><label for='openRank'>"+window.OELang.bestRankTips+"</label></div>"
                    $(openBestRank).appendTo(bestRank);
                }else{
                    gridReloadAll();
                }
            }else if(target.hasClass('doing-tab')){
                if(!doingTakensGrid){
                    doingTakensGrid = new AjaxLoad($("#takens-list-doing"), "pending", function(){
                        setupUI("#taken-doing")();
                        if(datatype == "exam"){
                            var grid = doingTakensGrid.getGrid();
                            if(!isArchive){
                                var groupActions = grid.getTableWrapper().find(".row:first").find(".table-group-actions");
                                groupActions.append($("#force-submit-actions").css("display","inline-block"));
                            }
                        }
                    }, $(".btns-container span.datetime-range").data('start'), $(".btns-container span.datetime-range").data('end'),gidSearch,rangeStartSearch,rangeEndSearch,searchValues.join(';'),searchFids.join(','),tfSearchValues.join(','),sfSearchValues.join(','))
                }else{
                    gridReloadAll();
                }
            }else if(target.hasClass('rewards-tab')){
                if(!rewardsGrid){
                    rewardsGrid = new AjaxLoad($("#rewards-item-list"), "rewards", function(e){
                    }, timeStart,timeEnd,gidSearch,rangeStartSearch,rangeEndSearch,searchValues.join(';'),searchFids.join(','),tfSearchValues.join(','),sfSearchValues.join(','));
                }else{
                    gridReloadAll();
                }
            }else if(target.hasClass('ranks-tab')){
                if(!ranksGrid){
                    ranksGrid = new AjaxLoad($("advance-ranks"),"ranks",function (e) {
                    },timeStart,timeEnd,gidSearch,rangeStartSearch,rangeEndSearch,searchValues.join(';'),searchFids.join(','),tfSearchValues.join(','),sfSearchValues.join(','))
                }else{
                    gridReloadAll();
                }
            }

        })
        //使用 Javscript 来启用标签页
        $('a[href="#taken-finished"]').tab('show');


        $("input[name='search']").bind('keypress',function(event){
            if(event.keyCode === 13){
                var searchValue = $("input[name='search']").val();
                var searchId = parseInt($('select.qtype-filter').val());
                var searchType = $('select.qtype-filter').find("option:selected").data("type");
                var searchLabel = $('select.qtype-filter').find("option:selected").text();
                //添加data
                $('select.qtype-filter').find("option:selected").data("search",searchValue);

                //如果提示存在就替换
                var searchTipsObj = $(".takens-filter-tips a[data-type='4'][data-t='{0}'][data-value='{1}']".format(searchType,searchId));
                if(searchTipsObj.length > 0) {
                    if(searchValue != "") {
                        searchTipsObj.parent().replaceWith($(searchFilterTmpl.format(searchValue,searchType,searchId, window.OELang.filterLabelAndValue.format(searchLabel,searchValue))));
                    }else {
                        searchTipsObj.parent().remove();
                    }
                }else{
                    //添加分组筛选提示window.OELang.scoreToScore.format(start, end)
                    if(searchValue != "") {
                        $(".takens-filter-tips ul").append($(searchFilterTmpl.format(searchValue,searchType,searchId,window.OELang.filterLabelAndValue.format(searchLabel,searchValue))));
                    }
                    // else {
                    //     searchTipsObj.parent().remove();
                    // }
                }
                showFilterTips();
                getFilterValues();
                getCurrentGrid().search(tfSearchValues.join(','),sfSearchValues.join(','));

                var offset = $('.takens-filter-tips a[title="{0}"]'.format(searchValue)).offset();
                var flyer = $('<img class="u-flyer" src="/components/com_exams/assets/img/stu-dashboard-wrong-hover.png"/>');
                flySearch(event,offset,flyer,$('.search-container input[name="search"]'))
            }
        });


        //NW.buildCheck();

        var deleteTakens = function (tids, grid) {
            if(tids.length<1) return;

            var data={};
            data.tids = tids.join(',');
            data[token] = 1;

            Metronic.blockUI({
                message: window.OELang.loading,
                target: grid.gettableContainer(),
                overlayColor: 'none',
                cenrerY: true,
                boxed: true
            });

            $.post(window.YKS.deleteTakens, data).done(function (result) {
                result = $.parseJSON(result);
                Metronic.alert({
                    type: result.status == 'success'?'success':'danger',
                    icon: result.status == 'success'?'info':'error',
                    message: result.status == 'success'?window.OELang.deleteSuccessfully:window.OELang.withoutDeletePermission,
                    container: grid.getTableWrapper(),
                    place: 'prepend',
                    closeInSeconds: 5
                });
                grid.getDataTable().ajax.reload();
                Metronic.unblockUI(grid.gettableContainer());
            }).fail(function (result) {
                Metronic.alert({
                    type: 'danger',
                    icon: 'warning',
                    message: window.OELang.deleteFailed,
                    container: grid.getTableWrapper(),
                    place: 'prepend'
                });
                Metronic.unblockUI(grid.gettableContainer());
            })
        }

        //用表单提交并跳转
        var standardPost = function(url,args){
            var body = $(document.body),
                form = $("<form method='post'></form>"),
                input;
            form.attr({"action":url});
            $.each(args,function(key,value){
                input = $("<input type='hidden'>");
                input.attr({"name":key});
                input.val(value);
                form.append(input);
            });

            form.appendTo(document.body);
            form.submit();
            document.body.removeChild(form[0]);
        }

        var getSelectValues = function () {
            var tabId = $(".tab-pane.active").attr("id");
            //makeArray将一个类数组对象转换为真正的数组对象。
            //不加tabid全选获取到的是两个tab的值
            var vals = $.makeArray($("#"+tabId+" .checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function (value) {
                return value > 0;
            });
            return vals;
        }

        var exportBox = function (title,number,content,callback){
            var template = $("#exportTips").text();
            var jbox = new jBox("Modal",{
                title: title,
                content:template.format(content),
                closeButton: false,
                width:376,
                height:254,
                onCreated:function(){
                    $("a[href='#cancel']").click(function(e){
                        e.preventDefault();
                        jbox.destroy();
                    })
                    $("a[href='#recheck']").click(function(e){
                        e.preventDefault();
                        jbox.destroy();
                        if(number>0){
                            $(".group-checkable").click();
                        }
                    })
                    $("a[href='#confirm']").click(function(e){
                        e.preventDefault();
                        callback()
                        jbox.destroy();
                    })
                },
                onCloseComplete:function(){
                    jbox.destroy();
                }
            })
            jbox.open();
        }

        //导出考试记录
        $(".btns-container").on('click','a.exportexamdetails',function(e){
            //导出已考完，未考完，和缺考的人的记录
            e.preventDefault();
            var iscn = $(this).parents(".btns-container").hasClass("iscn")
            if($(this).hasClass("norights")){
                $.CE.needContact(window.OELang.exportAllDetailTips,iscn);
                return;
            }
            if($(".btns-container").hasClass('hasungradedpaper')){
                NW.messageBox( window.OELang.notice, window.OELang.ungradedPaperTips);
                return;
            }
            var href= $(this).attr("href");
            //表单传递数据，并且跳转
            standardPost(href,{});


        }).on("click", "a.exporttaken", function(e){
            e.preventDefault();
            var vals = getSelectValues();
            var allowExportTakenCount = $('a.exporttaken').data("allow");
            var href = $(this).attr("href");
            var exportTotal = 0;
            if(vals.length > 0){
                exportTotal = vals.length;
            }else{
                exportTotal = getCurrentGrid().getGrid().getDataTable().page.info().recordsTotal;
            }
            var iscn = $(this).parents(".btns-container").hasClass("iscn")
            if(allowExportTakenCount != 0 && exportTotal > allowExportTakenCount){
                $.CE.needContact(window.OELang.exportTips.format(exportTotal,allowExportTakenCount),iscn);
                return;
            }
            if($(this).hasClass("hasnorecords")){
                NW.messageBox( window.OELang.notice, window.OELang.hasNoExamrecords);
                return;
            }
            if($(".btns-container").hasClass('hasungradedpaper')){
                NW.messageBox( window.OELang.notice, window.OELang.ungradedPaperTips);
                return;
            }
            var openBestRank = $("input[name='openBestRank']").prop("checked")?1:0;
            formSubmitData.openBestRank = openBestRank;
            if(vals.length > 0){
                getFilterValues();
                standardPost(href,formSubmitData);
            }else{
                exportBox($(this).html(),exportTotal,window.OELang.exportExcelTips.format(exportTotal),function(){
                    getFilterValues();
                    standardPost(href,formSubmitData);
                })
            }
        }).on("click", "a.exportstuanswers", function(e){
            e.preventDefault();
            if(getCurrentGrid() != finishedTakensGrid){
                NW.messageBox( window.OELang.notice, window.OELang.exportStudentsAnswerTips);
                return;
            }
            var iscn = $(this).parents(".btns-container").hasClass("iscn")
            if($(this).hasClass("norights")){
                $.CE.needContact(window.OELang.exportAnswerTips,iscn);
                return;
            }

            if($(this).hasClass("cannotexport")) {
                // $.CE.canNotExportStuAnswers(window.OELang.canNotExportStuAnswersDesc);
                NW.messageBox( window.OELang.notice, window.OELang.canNotExportStuAnswersDesc);
                return;
            }
            // title, content, callback, okText
            if($(this).hasClass("hasnorecords")){
                NW.messageBox( window.OELang.notice, window.OELang.hasNoExamrecords);
                return;
            }
            if($(".btns-container").hasClass('hasungradedpaper')){
                NW.messageBox( window.OELang.notice, window.OELang.ungradedPaperTips);
                return;
            }
            var href= $(this).attr("href");
            if($(this).hasClass("preandselect")){
                NW.messageBox( window.OELang.notice, window.OELang.preAndRandomExportTips, function(e){
                    getFilterValues();
                    //表单传递数据，并且跳转
                    standardPost(href,formSubmitData);
                }, window.OELang.continueExport);
                return;
            }

            var vals = getSelectValues();
            var href = $(this).attr("href");
            if(vals.length > 0){
                getFilterValues();
                standardPost(href,formSubmitData);
            }else{
                var exportTotal = getCurrentGrid().getGrid().getDataTable().page.info().recordsTotal;
                exportBox($(this).html(),exportTotal,window.OELang.exportExcelTips.format(exportTotal),function(){
                    getFilterValues();
                    standardPost(href,formSubmitData);
                })
            }
        }).on("click", "a.exporttopdf", function(e){
            e.preventDefault();
            var href= $(this).attr("href");
            var maxExport = $(this).data("max");
            var iscn = $(this).parents(".btns-container").hasClass("iscn")
            if($(this).hasClass("norights")){
                $.CE.needContact(window.OELang.exportReportPdfTips,iscn);
                return;
            }
            if(getCurrentGrid() != finishedTakensGrid){
                NW.messageBox( window.OELang.notice, window.OELang.exportStudentsAnswerTips);
                return;
            }
            //getFilterValues()需要在hasClass('hasungradedpaper')前面
            var vals = getSelectValues();
            if(vals.length == 0){
                var exportTotal = getCurrentGrid().getGrid().getDataTable().page.info().recordsTotal;
                exportBox($(this).html(),exportTotal,window.OELang.exportPDFTips.format(exportTotal,maxExport),function(){
                    getFilterValues();
                    formSubmitData.exportTotal = exportTotal;
                    if($(".btns-container").hasClass('hasungradedpaper')){
                        NW.messageBox( window.OELang.notice, window.OELang.ungradedPaperTips);
                        return;
                    }
                    standardPost(href,formSubmitData);
                })
                return;
            }
            getFilterValues();
            if($(".btns-container").hasClass('hasungradedpaper')){
                NW.messageBox( window.OELang.notice, window.OELang.ungradedPaperTips);
                return;
            }
            //表单传递数据，并且跳转
            formSubmitData.exportTotal = vals.length==0?getCurrentGrid().getGrid().getDataTable().page.info().recordsTotal:vals.length;
            standardPost(href,formSubmitData);
        }).on("click",'a.exportreportstopdf',function(e){
            e.preventDefault();
            var href= $(this).attr("href");
            var maxExport = $(this).data("max");
            if(getCurrentGrid() != finishedTakensGrid){
                NW.messageBox( window.OELang.notice, window.OELang.exportStudentsAnswerTips);
                return;
            }
            var iscn = $(this).parents(".btns-container").hasClass("iscn")
            if($(this).hasClass("norights")){
                $.CE.needContact(window.OELang.exportAnswersPdfTips,iscn);
                return;
            }

            //是否自定义文件名
            var isNeedCustomFileName = new jBox('Confirm',{
                title: window.OELang.isCustomFileName,
                confirmButton: window.OELang.customize,
                cancelButton: window.OELang.default,
                closeButton: "title",
                content: window.OELang.isCustomFileNameTips,
                confirm: function(){
                    fileNameBox.open();
                },
                cancel: function(){
                    standardPost(href,formSubmitData);
                },
                onCloseComplete:function(){
                    isNeedCustomFileName.destroy();
                }
            })

            //添加文件名弹出框var box
            var fileNameBox = new jBox('Modal', {
                title: window.OELang.exportReportsFileNameSelectorTitle,
                trigger: 'click',
                onCreated: function () {
                    this.setContent($("#file_name_selector").text());
                    $("#file_name_selector_left").accordion();
                    $("#file_name_selector_left li").draggable({
                        zIndex: 999999 ,
                        appendTo: "body",
                        helper: "clone",
                        drag:function(event,ui){
                            ui.helper.css('list-style-type','none');
                        }
                    });
                    $( "#file_name_selector_right ol" ).droppable({
                        activeClass: "ui-state-default",
                        hoverClass: "ui-state-hover",
                        accept: ":not(.ui-sortable-helper)",
                        drop: function( event, ui ) {
                            $( this ).find( ".placeholder" ).remove();
                            $( "<li data-type='{0}' data-value='{1}'>{2}<i class='fa fa-times' aria-hidden='true'></i></li>" .format(ui.draggable.data("type"),ui.draggable.val(),ui.draggable.text())).appendTo( this );
                            ui.draggable.remove();
                            var fileNameArray = [];
                            $("#file_name_selector_right ol.ui-droppable li").each(function (e) {
                                // fileName.push($(this).data("value"));
                                fileNameArray.push($(this).text());
                            });
                            var fileNameString = window.OELang.currentFileName.format(fileNameArray.join('-'));
                            $('.file_name_tips').text(fileNameString);
                        }
                    }).sortable({
                        items: "li:not(.placeholder)",
                        sort: function() {
                            // 获取由 droppable 与 sortable 交互而加入的条目
                            // 使用 connectWithSortable 可以解决这个问题，但不允许您自定义 active/hoverClass 选项
                            $( this ).removeClass( "ui-state-default" );

                        },
                        update:function(event, ui ){
                            var fileNameArray = [];
                            $("#file_name_selector_right li").each(function (e) {
                                // fileName.push($(this).data("value"));
                                if($(this).text() != ''){
                                    fileNameArray.push($(this).text());
                                }
                            });
                            var fileNameString = fileNameArray.join('-')+".pdf"
                            $('.file_name_tips').text(fileNameString);
                        }
                    });

                    $('#file_name_selector_right ol').on('click','i.fa',function(e){
                        e.preventDefault();
                        e.stopPropagation();
                        var parentLi = $(this).parent();
                        var dataType = parentLi.data('type');
                        var dataValue = parentLi.data('value');
                        var text = parentLi.text();
                        //添加draggale才可以拖动
                        $("<li data-type='{0}' value='{1}'>{2}</li>".format(dataType,dataValue,text)).draggable({
                            appendTo: "body",
                            helper: "clone"
                        }).appendTo("#file_name_selector_left ul");
                        parentLi.remove();
                        var fileNameArray = [];
                        $("#file_name_selector_right li").each(function (e) {
                            // fileName.push($(this).data("value"));
                            if($(this).text() != ''){
                                fileNameArray.push($(this).text());
                            }
                        });
                        var fileNameString = fileNameArray.join('-')+".pdf"
                        $('.file_name_tips').text(fileNameString);
                    });

                    $('.file_name_selector_button').on('click', 'button[name="confirm"]', function (e) {
                        getFilterValues();
                        standardPost(href,formSubmitData);
                    }).on('click','button[name="cancel"]',function(e){
                        fileNameBox.close();
                        fileNameBox.destroy();
                    });
                },
                onCloseComplete:function(){
                    fileNameBox.destroy();
                }
            });

            var vals = getSelectValues();
            if(vals.length == 0){
                var exportTotal = getCurrentGrid().getGrid().getDataTable().page.info().recordsTotal;
                exportBox($(this).html(),exportTotal,window.OELang.exportPDFTips.format(exportTotal,maxExport),function(){
                    getFilterValues();
                    formSubmitData.exportTotal = exportTotal;
                    if($(".btns-container").hasClass('hasungradedpaper')){
                        NW.messageBox( window.OELang.notice, window.OELang.ungradedPaperTips);
                        return;
                    }
                    var leftLi = $('select.qtype-filter').find("option").length;
                    if(leftLi> 0) {
                        isNeedCustomFileName.open();
                    }else{
                        standardPost(href,formSubmitData);
                    }
                })
                return;
            }

            //getFilterValues()需要在hasClass('hasungradedpaper')前面
            getFilterValues();
            formSubmitData.exportTotal = vals.length==0?getCurrentGrid().getGrid().getDataTable().page.info().recordsTotal:vals.length;
            if($(".btns-container").hasClass('hasungradedpaper')){
                NW.messageBox( window.OELang.notice, window.OELang.ungradedPaperTips);
                return;
            }
            var leftLi = $('select.qtype-filter').find("option").length;

            if(leftLi> 0) {
                isNeedCustomFileName.open();
            }else{
                standardPost(href,formSubmitData);
            }

        }).on("click", "a.clear-all-records", function (e) {
            e.preventDefault();
            var href= $(this).attr("href");
            showConfirmDialog($(this).attr("data-confirm"), function (resp) {
                if( resp == "yes" ){
                    window.location.href = href;
                }
            })
        }).on("click","a[href='#delete-takens']",function (e) {
            e.preventDefault();

            var id = $(".tab-pane.active").attr("id"), target, grid;
            if(id=="taken-finished"){
                target = "#taken-finished";
                grid = finishedTakensGrid.getGrid();
            }else if(id=="taken-doing"){
                grid = doingTakensGrid.getGrid();
                target = "#taken-doing";
            }else if(id=="rewards-list"){
                grid = rewardsGrid.getGrid();
                target = "#rewards-list";
            }else if(id=="show-ranks"){
                grid = ranksGrid.getGrid();
                target = "#show-ranks";
            }

            if ($(target).find(".checked").length < 1){
                Metronic.alert({
                    type: 'success',
                    icon: 'error',
                    message: window.OELang.pleaseSelectFirst,
                    container: grid.getTableWrapper(),
                    place: 'prepend'
                });
                return;
            }

            showConfirmDialog($(this).attr("data-confirm"), function (resp) {
                if(resp == "yes"){
                    var vals = $.makeArray($(target).find(".checked")).map(function (checked, index, a) {
                        return $(checked).find("input").val();
                    }).filter(function(value){
                        return value > 0;
                    });

                    deleteTakens(vals, grid);
                }
            })
        }).on('click',"a.print-score",function (e) {
            //打印成绩
            e.preventDefault();
            var href= $(this).attr("href");
            if($(this).hasClass("hasnorecords")){
                NW.messageBox( window.OELang.notice, window.OELang.hasNoExamrecords);
                return;
            }
            getFilterValues();
            //表单传递数据，并且跳转
            standardPost(href,formSubmitData);
        }).on('click',"a.print-transcripts",function (e) {
            //打印所选考生的成绩单
            e.preventDefault();
            var href= $(this).attr("href");
            if($(this).hasClass("hasnorecords")){
                NW.messageBox( window.OELang.notice, window.OELang.hasNoExamrecords);
                return;
            }
            getFilterValues();
            //表单传递数据，并且跳转
            standardPost(href,formSubmitData);
        }).on('click',"a[href='#downloadfiles']",function(e){
            //附件下载
            e.preventDefault();
            var vals = getSelectValues();
            var open = $(this).data("open");
            if(vals.length <= 0){
                NW.messageBox( window.OELang.notice, window.OELang.pleaseSelectFiles);
                return;
            }
            vals = vals.join(",")
            var data = {
                eid:eid,
                tids:vals
            }
            data[token] = 1
            $.ajax({
                url:window.YKS.downFiles,
                type:"POST",
                data:data,
                success:function(data){
                    try {
                        var rdata = $.parseJSON(data);
                    }catch (e) {
                        var rdata = {
                            status:"error",
                            msg : e
                        }
                    }
                    if(rdata.status == "ok"){
                        window.location.href = open
                    }else{
                       alert(rdata.msg)
                    }
                }
            })
        })

        var viewTakenDetails = function(detailsURL){
            if(!ispc()){
                window.open(detailsURL, "_blank");
                return false;
            }
            $("#view_result")[0].src = detailsURL;

            var w = window.innerWidth*0.9,
                h = window.innerHeight*0.9;

            var box = new jBox('Modal', {
                maxWidth: 1100,
                maxHeight: 750,
                width: w,
                height: h,
                content: $("#view_result_container"),
            });
            box.open();
        }

        $(".lists").on("click", "a[data-type='details']", function(e){
            e.preventDefault();
            var self = $(this);
            viewTakenDetails(self.attr("href"))
            return false;
        }).on("click", "a[data-type='delete']", function (e) {
            e.preventDefault();
            var self = $(this);
            showConfirmDialog(self.attr("data-confirm"), function (resp) {
                if(resp == "yes"){
                    deleteTakens([self.attr("data-tid")]);
                }
            })
        }).on("click", "a[data-type='fixtaken']", function(e){
            function showConfirmReviewDialog(content, callback){
                callback = callback === undefined? function(){} : callback;

                var clicked = false;
                var dialog = NW.showDialog( content, [
                    {
                        label: window.OELang.startToCorrectError,
                        onClick: function(){
                            clicked = true;
                            dialog.close();
                            callback.call(this, 'yes');
                        }
                    },
                    {
                        label: window.OELang.giveUpTheOperation,
                        primary: true,
                        onClick: function(){
                            clicked = true;
                            dialog.close();
                            callback.call(this, 'no');
                        }
                    }
                ], window.OELang.notice)
                dialog.onFinish = function () {
                    if(!clicked){
                        callback.call(dialog, 'no');
                    }
                }
                return dialog;
            }
            e.preventDefault();
            var self = $(this);
            showConfirmReviewDialog(window.OELang.reviewConfirmTip, function(resp){
                if(resp == "yes"){
                    window.location.href = self.attr("href");
                }
            })
        }).on("click", "a[href='#forcesubmit']", function (e) {
            e.preventDefault();
            var tid = $(this).data("tid"),
                finishRatio = Number($(this).data("finish-ratio")),
                detailsURL = $(this).data("detail-url");

            var forceSubmit = function(){
                var jbox = new jBox("Modal", {
                    title: window.OELang.takenSubmiting,
                    content: "<i class='fa fa-spin fa-spinner fa-3x'></i>"
                });
                var data = {
                    tid: tid
                }
                data[token] = 1;
                $.post(window.YKS.forceSubmit, data).done(function(d){
                    var data = $.parseJSON(d);
                    if(data.status == "ok"){
                        jbox.close();
                        finishedTakensGrid.reload();
                        doingTakensGrid.reload();
                        if(isAdvance){
                            rewardsGrid.reload();
                            ranksGrid.reload();
                        }
                        messageBox(window.OELang.title, window.OELang.takenSubmited, function(){
                            viewTakenDetails(detailsURL);
                        })
                    }else{
                        jbox.setContent(  window.OELang.examQuestions.rePloginlease + "<br/>"+data.error )
                    }
                }).fail(function (e) {
                    jbox.setContent( window.OELang.examQuestions.rePloginlease + "<br/>"+e )
                })
                jbox.open();
            }

            if(finishRatio < 80){
                showConfirmDialog(window.OELang.forceConfirmTip.format(finishRatio+"%"), function(resp){
                    if(resp=="yes"){
                        forceSubmit();
                    }
                })
            }else{
                forceSubmit()
            }
        }).on("click", "a[href='#continue']", function(e){
            e.preventDefault();
            var eid = $(this).data("eid"),
                tid = $(this).data("tid"),
                data = {
                    eid: eid,
                    tid: tid
                },
                jbox;

            data[token] = 1;

            var onLoaded = function(data){
                jbox.setContent(data);
                var clipboard = new Clipboard('a.copydata');
                clipboard.on('success', function(e) {
                    var jbox = new jBox("Tooltip", {
                        content: window.OELang.copiedToClipboard,
                        target: $(e.trigger)
                    }).open();
                    setTimeout(function(){jbox.close()}, 1000);
                });
            }

            jbox = new jBox("Modal", {
                "maxWidth": 600,
                "ajax": {
                    setContent: false,
                    url: window.YKS.getManualContinueDoitURL,
                    data: data,
                    success: onLoaded
                }
            })
            jbox.open();
        }).on("click", "a[data-type='transcripts']", function(e){
            e.preventDefault();
            var src = $(this).attr('href');
            var tmp = '<iframe frameborder="0" src="{0}" width="100%" height="500"></iframe>'.format(src);

            var dialog = NW.showDialog( tmp, [], $(this).text(), {
                width: 700,
                height: 600
            });
        });


        function forceSubmit(action, value){
            var tmpl = '<div class="progress batch-submit-progress">'+
                '<div class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" aria-valuenow="45" aria-valuemin="0" aria-valuemax="100" style="width: 5%">'+
                '<span class="sr-only">5% Complete</span>'+
                '</div>'+
                '</div>' +
                '<div>{0}</div><div>{1}</div>';
            tmpl = tmpl.format(window.OELang.forceSubmitingTip, window.OELang.finishedPercent.format('<span id="batch-finished">10</span>'));
            var dialog = NW.showDialog(tmpl, [], window.OELang.forceSubmiting, {
                closeOnEsc: false,
                closeOnClick:false,
                closeButton: false
            });


            var eid = $("#force-submit-actions").data("eid");

            if(value instanceof  Array){
                value = value.join(",");
            }

            var setProgress = function(percent){
                $("#batch-finished").text(percent);
                $(".progress.batch-submit-progress > .progress-bar").css("width", "{0}%".format(percent));
            }
            var process = function(start, limit){
                var data = {
                    start: start,
                    limit: limit,
                    action: action,
                    value: value,
                    eid: eid
                }
                data[token] = 1;
                $.post(window.YKS.batchSubmit, data).done(function(rdata){
                    rdata = $.parseJSON(rdata);
                    if( rdata.status == "ok"){
                        if( rdata.action == "continue" ){
                            var percent = rdata.percent;
                            setProgress(percent);
                            process(start+limit, limit);
                        }else{
                            setProgress(100);
                            NW.messageBox( window.OELang.notice, window.OELang.forceSubmited, function () {
                               window.location.reload();
                            });
                        }
                    }else{
                        NW.messageBox( window.OELang.notice, rdata.error );
                    }
                })
            }
            process(0, 30);
        }


        $("#taken-doing").on("click", "a[href='#force-submit-selected']", function(e){
            var checkedValues = NW.getCheckValues($("#taken-doing"));
            if( checkedValues.length <=0 ){
                NW.messageBox( window.OELang.notice, window.OELang.pleaseSelectFirst );
                return;
            }

            NW.showConfirmDialog(window.OELang.forceSubmitConfirm.format(checkedValues.length), function(resp){
                if(resp=="yes"){
                    forceSubmit('tids', checkedValues);
                }
            })
        }).on("click", "a[href='#force-submit-finishratio']", function(e){
            NW.messageBox(window.OELang.notice, window.OELang.featureInTest);
        }).on("click", "a[href='#force-submit-leavetime']", function(e){
            NW.messageBox(window.OELang.notice, window.OELang.featureInTest);
        }).on("click","a[href='#delete-all-pending-exams']",function(e){
            //删除所有考试中试卷
            var addEndOne = Math.round(Math.random()*10);
            var addEndTwo = Math.round(Math.random()*10);

            var self = $(this);
            var deleteTips = window.OELang.sureToDeleteAllDoingExams.format(addEndOne,addEndTwo);
            var deletingTips = self.data("deleting");
            var dongExamsNum = parseInt(self.data("doing"));
            NW.showConfirmDialog(deleteTips, function(resp){
                if(resp == "yes"){
                    var sum = $('.delete-exam-math input[name="sum"]').val();
                    if(sum == null || sum != (addEndOne+addEndTwo)){
                        NW.messageBox(window.OELang.notice, window.OELang.enterTheCorrectAnswer);
                        return;
                    }

                    var tmpl = '<div style="min-width: 400px;">' +
                        '<div class="progress check-duplicate-progress">' +
                        '<div class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" aria-valuenow="45" aria-valuemin="0" aria-valuemax="100" style="width: 15%">' +
                        '<span class="sr-only">5% Complete</span>' +
                        '</div>' +
                        '</div>' +
                        '<div>{0}</div>' +
                        '</div>';
                    tmpl = tmpl.format(deletingTips);
                    var dialog = NW.showDialog(tmpl, [], self.text(), {
                        closeOnEsc: false,
                        closeOnClick: false,
                        closeButton: false
                    });
                    var setPercent = function (p) {
                        $(".check-duplicate-progress > .progress-bar").css("width", '{0}%'.format(p))
                    };
                    var start = 0, limit = 600, page = 1,totalPages = 1;
                    var loadData = function(s,l){
                        var data = {
                            eid: eid,
                            start: s,
                            limit: l
                        };
                        data[token] = 1;
                        $.post(window.YKS.deleteAllPending,data).done(function(rData){
                            var result = $.parseJSON(rData);
                            if(result.status == "available"){
                                page++;
                                if(totalPages == 1){
                                    setPercent(page * 100 / result.pages);
                                    totalPages = result.pages;
                                }else{
                                    setPercent(page * 100 / totalPages);
                                }
                                loadData(s,l);
                            }else if(result.status == "finished"){
                                setPercent(100);
                                NW.messageBox( window.OELang.notice, window.OELang.deletedAndReload, function () {
                                    window.location.reload();
                                });

                            }else{
                                NW.messageBox( window.OELang.notice, result.error );
                                dialog.close();
                            }
                        }).fail(function(rData){

                        })
                    }
                    loadData(start, limit);
                }
            })
        }).on("click","a[href='#force-submit-all-pending-exams']",function(e){
            //强制提交所有考试中试卷
            var self = $(this);
            NW.showConfirmDialog(window.OELang.forceSubmitAllPendingConfirm, function(resp){
              if(resp == "yes"){
                  var tmpl = '<div class="progress batch-submit-progress">'+
                      '<div class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" aria-valuenow="45" aria-valuemin="0" aria-valuemax="100" style="width: 5%">'+
                      '<span class="sr-only">5% Complete</span>'+
                      '</div>'+
                      '</div>' +
                      '<div>{0}</div><div>{1}</div>';
                  tmpl = tmpl.format(window.OELang.forceSubmitingTip, window.OELang.finishedPercent.format('<span id="batch-finished">10</span>'));
                  var dialog = NW.showDialog(tmpl, [], window.OELang.forceSubmiting, {
                      closeOnEsc: false,
                      closeOnClick:false,
                      closeButton: false
                  });


                  var eid = $("#force-submit-actions").data("eid");


                  var setProgress = function(percent){
                      $("#batch-finished").text(percent);
                      $(".progress.batch-submit-progress > .progress-bar").css("width", "{0}%".format(percent));
                  }
                  var start = 0, limit = 1, page = 1,totalPages = 1;
                  var process = function(start, limit){
                      var data = {
                          start: start,
                          limit: limit,
                          // action: action,
                          eid: eid
                      }
                      data[token] = 1;
                      $.post(window.YKS.batchSubmitAll, data).done(function(rdata){
                          rdata = $.parseJSON(rdata);
                          if( rdata.status == "ok"){
                              if( rdata.action == "continue" ){
                                  page++;
                                  if(totalPages == 1){
                                      totalPages = rdata.pages;
                                      setProgress(page * 100 / rdata.pages);

                                  }else{
                                      setProgress(page * 100 / totalPages);
                                  }
                                  process(start, limit);
                              }else{
                                  setProgress(100);
                                  NW.messageBox( window.OELang.notice, window.OELang.forceSubmited, function () {
                                      window.location.reload();
                                  });
                              }
                          }else{
                              NW.messageBox( window.OELang.notice, rdata.error );
                          }
                      })
                  }
                  process(start, limit);
              }
            })

        })
    }


    /**
     * 设置控制面板
     */
    function setupDashboardPage() {
        $(document).on("click", "a[href='#resend-ative-mail']", function (e) {
            e.preventDefault();

            var id = Metronic.alert({
                type: 'success',
                icon: 'info',
                message: '<span class="sending-active-mail"><i class="fa fa-spinner fa-spin"></i>'+window.OELang.sendingEmail+'</span>',
                container: $("#system-message-container"),
                place: 'prepend'
            });

            var href = $(this).attr("data-href");
            $.get(href, {}).done(function () {
                $(".sending-active-mail").html('<i class="fa fa-check" aria-hidden="true"></i>'+window.OELang.sendedEmail);

                setTimeout(function() {
                    $('#' + id).slideUp(400);
                }, 1000);
            })

        })
        return {
            showNotice: function (msgs) {
                if( msgs.length<=0 ) return;
                for(var i=0; i<msgs.length; i++ ){
                    new jBox('Notice', {
                        content: msgs[i].message,
                        maxWidth: 360,
                        attributes: {
                            x: 'right',
                            y: 'bottom'
                        },
                        animation: "flip",
                        color: "green"
                    }).open();
                }
            }
        }
    }

    function editValue(value, callback, title, placeHolder){
        var tmpl = '<div style="min-height:80px"><input type="text" id="{0}" value="{2}" name="edit-value" class="form-control" placeholder="{1}"/></div>',
            id = Date.now(),
            btnID = 'btnsure{0}'.format(id);
        tmpl = tmpl.format( id, placeHolder, value );
        var sureClick = function(){
            if( $.trim( $('#'+id).val() ) == '' ){
                $('#'+id).focus();
                return;
            }
            callback(true, $('#'+id).val())
            dialog.close();
        }
        var dialog = NW.showDialog(
            tmpl, [
                {
                    label: window.OELang.cancel,
                    onClick: function(){
                        dialog.close();
                        callback(false, '');
                    }
                },
                {
                    label: window.OELang.sure,
                    id: btnID,
                    onClick: sureClick,
                    primary: true
                }
            ], title?title:window.OELang.edit
        );
        $('#'+id).focus().on("keydown", function(e){
            if( e.keyCode == 13 ){
                sureClick();
            }
        })
    }


    function setupExamSettingsPage(iscn, token,isAdvance,eid){
        $(".accordion-toggle").addClass('closed');
        $(".accordion-toggle").next().hide();
        $(".accordion-toggle").click(function () {
            if ($(this).hasClass('closed')) {
                $(this).removeClass('closed').addClass('open').next().show("normal");
            } else {
                $(this).removeClass('open').addClass('closed').next().hide("normal");
            }

        });
        $(".accordion-toggle a").click(function (e) {
            e.stopPropagation();//stop sub links toggling divs
        });

        $('.showTooltip').tooltipsy({
            offset: [10, 0],
            show: function (e, $el) {
                $el.css({
                    'left': parseInt($el[0].style.left.replace(/[a-z]/g, '')) + 50 + 'px',
                    'opacity': '0.0',
                    'display': 'block'
                }).animate({
                    'left': parseInt($el[0].style.left.replace(/[a-z]/g, '')) - 50 + 'px',
                    'opacity': '1.0'
                }, 300);
            },
            hide: function (e, $el) {
                $el.slideUp(100);
            },
            css: {
                'padding': '10px',
                'max-width': '200px',
                'color': '#303030',
                'background-color': '#FCFAA9', //#f5f5b5
                'border': '1px solid #deca7e',
                '-moz-box-shadow': '0 0 10px rgba(0, 0, 0, .5)',
                '-webkit-box-shadow': '0 0 10px rgba(0, 0, 0, .5)',
                'box-shadow': '0 0 10px rgba(0, 0, 0, .5)',
                'text-shadow': 'none'
            }
        });


        var options = {
            plugins: 'bbcode',
            toolbar: "bold,italic,underline,strike,color,size,center|orderedlist,bulletlist,table|link,image,youtube|superscript,subscript,pastetext|source",
            emoticonsEnabled: false,
            resizeEnabled: true,
            disablePasting: false,
            enablePasteFiltering: true,
            bbcodeTrim: true,
            style: '/components/com_exams/scedit/jquery.sceditor.default.min.css',
            autoUpdate: true,
            height: 90,
            width: 600
        }

        if(iscn){
            options['locale'] = "zh-cn";
        }
        $('textarea').sceditor(options);

        $(".daterangepicker input").datetimepicker({
            isRTL: Metronic.isRTL(),
            format: $(".daterangepicker").attr("data-date-format"),
            autoclose: true,
            todayBtn: true,
            startDate: "2013-02-14 10:00",
            pickerPosition: (Metronic.isRTL() ? "bottom-right" : "bottom-left"),
            minuteStep: 5
        });

        $("#select_theme").on("click", function () {
            var self = $(this);
            var w=$(window).width();
            if(w<450)
            {
                w=330;
            }
            else if(w<800)
            {
                w=430;
            }else if(w<1170){
                w=800;
            }else{
                w=1170;
            }
            var jbox = new jBox('Modal', {
                width: w,
                height: 500,
                title: self.html(),
                ajax: {
                    url: self.attr("data-url"),
                    reload: false,
                    complete: function () {
                        $(".select-theme li").hover(function(){
                            $('.fire',this).show();
                            $('.fire_bt',this).show();
                        },function(){
                            $('.fire',this).hide();
                            $('.fire_bt',this).hide();
                        });
                        $(".fire_bt").on("click", function () {
                            var theme = $(this).parent().attr("v");
                            $("#theme").val(theme);
                            $("#theme_img").attr("src", $(this).parent().attr("s"));
                            jbox.close();
                        });
                    }
                }
            }).open();
            return false;
        });

        // $(".select-theme li").hover(function(){
        //     $('.fire, .fire_bt').show();
        // },function(){
        //     $('.fire, .fire_bt',this).hide();
        // });


        $("input[name='authentication']").change(function () {
            var self = $(this), val = self.val();
            if (val == "group") {
                var count = $('#open_face_recognition').data("count");
                $("#authentication_gid").show("normal");

                $('.face-recognition-tips').addClass("got");
                if(count>0){
                    $('#open_face_recognition').removeAttr("disabled");
                }
                $('span.face-recognition-tips-text').html(window.OELang.faceRecognitionLeftTips);

                //收集信息项提示
                $("#examGetStudentInformationTips").text(window.OELang.getGroupStudentInformationTip);
                //收起收集信息项
                $('.fields-panel').slideUp();
                $("a[href='#getinfo']").find("span").html(window.OELang.expandTips);
                $("a[href='#getinfo']").find("img").addClass("flipy");
            } else {
                $("#authentication_gid").hide("normal");

                $('.face-recognition-tips').removeClass("got");
                $('#open_face_recognition').attr("disabled",true);
                $('span.face-recognition-tips-text').html(window.OELang.specifiedGroupCanUseFaceRecognition);

                //收集信息项提示
                $("#examGetStudentInformationTips").text(window.OELang.getStudentInformationTip);
                //展示收集信息项
                $('.fields-panel').slideDown();
                $("a[href='#getinfo']").find("span").html(window.OELang.collapsTips);
                $("a[href='#getinfo']").find("img").removeClass("flipy");
            }

            if(val == 'license'){
                $("#license_action").show("normal");
            } else {
                $("#license_action").hide("normal");
            }

            if(val == 'student'){
                $("#authentication_sid").show("normal");
            } else {
                $("#authentication_sid").hide("normal");
            }
        });
        $("input[name='exam-question-time-limit']").change(function(){
            var self = $(this),val = self.val();
            if(val == "exam"){
                $("#exam-question-time-limit-exam").show("normal");
                $('input[name="question_limit_time"]').val(0);
            }else{
                $("#exam-question-time-limit-exam").hide("normal");
            }
            if(val == "question"){
                $("#exam-question-time-limit-question").show("normal");
                $('input[name="time_limit"]').val(30);
            }else{
                $("#exam-question-time-limit-question").hide("normal");
            }
        })

        $("#license_action").on('click', 'a[href="#regenerate"]', function(e){
            var len = 4;
            var $chars = '1234567890';
            var maxPos = $chars.length;
            var license = '';
            for (i = 0; i < len; i++) {
                license += $chars.charAt(Math.floor(Math.random() * maxPos));
            }
            $("input[name='authentication_license']").val(license);
            $("#license_action .license").html($("#license_action").data("tip").format(license))
            $("#license_action .copydata").attr("data-clipboard-text", license);
        })
        Sortable.create(document.getElementById('available_fields'), {
            group: {
                name: "available_fields",
                pull: 'clone'
            },
            filter: '.disabled',
            sort:false
        });

        function updateSelectedFields() {
            var val = [];
            $("#selected_fields").find("li").each(function (index, mi) {
                val.push({
                    fid: $(mi).attr("data-id")
                })
            });
            $("input[name='exam_fields']").val(JSON.stringify(val));
        }

        /**
         * 信息项从selected_fields移除
         * @param evt
         * @param li
         */
        function removeSelectedFieldsItem(evt, li) {
            var item;
            if (evt != null && li == null) {
                item = evt.item; // get dragged item
            } else if (evt == null && li != null) {
                item = li[0];
            }
            // item && item.parentNode.removeChild(item);
            var dataid = $(item).attr("data-id");
            if ($("#selected_fields").find("li[data-id='" + dataid + "']")){//判断选中列表中是否有该项，有则删除
                $("#selected_fields").find("li[data-id='" + dataid + "']").remove();
            }
            if ($("#available_fields").find("li[data-id='" + dataid + "']")){//判断可选列表中该项的样式是否为已选样式，是则删除样式
                if ($("#available_fields").find("li[data-id='" + dataid + "']").hasClass("disabled"))
                    $("#available_fields").find("li[data-id='" + dataid + "']").removeClass("disabled");
            }
            updateSelectedFields();
        }

        /**
         * 检查selected_fields li的个数是否超过限制，并弹出提示
         * @param evt
         * @param li item信息项
         * @return boolean true可以添加 false不能添加
         */
        function checkSelectedFieldsLength(evt, li) {
            var sf_ul = $("#selected_fields");
            var count;
            var length = li == null ? sf_ul.find("li").length : sf_ul.find("li").length + 1;
            var proType = sf_ul.attr("data-producttype").toLowerCase();//产品类型，在线or局域网
            if (proType == "onlineexammaker") {//在线
                count = sf_ul.attr("data-collections");
                if (count != -1 && length > count) {
                    removeSelectedFieldsItem(evt, li);
                    $.CE.showPrompt(window.OELang.needToUpgrad,window.OELang.collectionNeedUpgradeDesc,window.YKS.upgradeURL,window.OELang.upgradeNow);
                    // $.CE.newShowCollectionPrompt();
                    return false;
                }
            } else if (proType == "lanexammaker") {//局域网
                var isReged = Boolean(parseInt(sf_ul.attr("data-isreged")));//是否激活
                var isExpired = Boolean(parseInt(sf_ul.attr("data-isexpired")));//是否过期
                count = 2;
                if (!isReged && !isExpired) {//没注册 没过期
                    if (length > count) {
                        removeSelectedFieldsItem(evt, li);
                        $.CE.showPrompt(window.OELang.needToUpgrad,window.OELang.collectionNeedUpgradeDesc,window.YKS.upgradeURL,window.OELang.upgradeNow);
                        // $.CE.newShowCollectionPrompt();
                        return false;
                    }
                } else if (!isReged && isExpired) {//没注册 过期
                    removeSelectedFieldsItem(evt, li);
                    $.CE.showPrompt(window.OELang.needToBuy,window.OELang.needToBuyPrompt,window.YKS.needBuyURL,window.OELang.buyNow);
                    // $.CE.newShowCollectionPrompt();
                    return false;
                }
            }
            return true;
        }

        var selectedFields = Sortable.create(document.getElementById('selected_fields'), {
            animation: 150, // ms, animation speed moving items when sorting, `0` — without animation
            group: {
                name: "selected_fields",
                put: ["available_fields"]
            },
            filter: '.js-remove',
            // 在已选列表点击关闭item
            onFilter: function (evt) {
                // new jBox('Confirm', {
                //     confirmButton: window.OELang._delete,
                //     cancelButton: window.OELang.cancel,
                //     content: window.OELang.confirmDeleteField,
                //     confirm: function () {
                //         var item = selectedFields.closest(evt.item); // get dragged item
                //         item && item.parentNode.removeChild(item);
                //         var dataid = $(item).attr("data-id");
                //         $("#available_fields").find("li[data-id='" + dataid + "']").removeClass("disabled");
                //         updateSelectedFields();
                //     },
                //     cancel: function () {
                //     },
                //     title: window.OELang.confirmDeleteField
                // }).open();
                NW.showCustomConfirmDialog(window.OELang.confirmDeleteField,window.OELang._delete,window.OELang.cancel,window.OELang.confirmDeleteField,function(resp){
                    if(resp == "yes"){
                        var item = selectedFields.closest(evt.item); // get dragged item
                        item && item.parentNode.removeChild(item);
                        var dataid = $(item).attr("data-id");
                        $("#available_fields").find("li[data-id='" + dataid + "']").removeClass("disabled");
                        updateSelectedFields();
                    }
                })

            },
            // 拖动添加item
            onAdd: function (/**Event*/evt) {
                if (checkSelectedFieldsLength(evt, null)) {
                    var itemEl = evt.item;  // dragged HTMLElement
                    var item = $(itemEl), needDeleteItem;
                    var id = item.attr('data-id');
                    $("#available_fields").find("li[data-id='" + id + "']").addClass("disabled");
                    var sameCount = 0;
                    $("#selected_fields").find("li").each(function (index, mi) {
                        if ($(mi).attr("data-id") == id) {
                            sameCount++;
                            if (mi != item) {
                                needDeleteItem = mi;
                            }
                        }
                        ;
                    });
                    if (sameCount > 1) {
                        var el = needDeleteItem;
                        el && el.parentNode.removeChild(el);
                    }
                    updateSelectedFields();
                }
            },
            onUpdate: function (evt) {
                updateSelectedFields();
            }
        });

        $("input[name='authentication']").on('change',function(){
            var fields = $("input[name='exam_fields']").val()
            fields = JSON.parse(fields)
            if($(this).val() == 'group'){
                if(fields.length == 1 && fields[0].fid == 1){
                    $("#selected_fields").find('li[data-id=1]').remove();
                    $("#available_fields").find("li[data-id=1]").removeClass("disabled");
                    updateSelectedFields();
                }
            }else if(fields.length == 0){
                var li = $("#available_fields").find("li[data-id=1]")
                $("#selected_fields").append($(li.clone()));
                li.addClass("disabled");
                updateSelectedFields();
            }
        })

        $(".fields.selected").on("click", 'a[href="#preview"]', function(e){
            e.preventDefault();
            var src = window.YKS.previewCollection;
            var fids = $("#selected_fields").find("li").map(function(){ return $(this).data('id') }).get();
            src += '&eid={0}&fids={1}'.format( $(this).data('eid'), fids.join(',') );
            var tmp = '<iframe frameborder="0" src="{0}" width="100%" height="500"></iframe>'.format(src);

            var opt = $.extend({}, options, {
                title: $(this).text(),
                width: 1000,
                height: 600,
                maxWidth: 1000,
                content: tmp,
                onCloseComplete: function () {
                    this.destroy();
                }
            });

            var jbox = new jBox("Modal", opt);
            jbox.open();
        })
        $("#available_fields").on("click", "i.fa-plus-circle", function (e) {
            var parentLi = $(this).parent();
            if (checkSelectedFieldsLength(null, parentLi)) {
                if (parentLi.hasClass("disabled")) return;
                $("#selected_fields").append($(parentLi.clone()));
                parentLi.addClass("disabled");
                updateSelectedFields();
            }
        }).on("click", "i.js-remove", function (e) {
            e.preventDefault();
            e.stopPropagation();
            if ($(this).hasClass("public-field")) return;
            if ($(this).hasClass("fa-spinner")) return;
            var parentLi = $(this).parent();
            var self = $(this);
            self.removeClass("fa-remove").addClass("fa-spinner fa-spin");
            var data = {
                fid: parentLi.data("id")
            }
            data[$("#available_fields").data("token")] = 1;
            $.post(window.YKS.deleteField, data)
                .done(function (d) {
                    var data = $.parseJSON(d);
                    if (data.status == "ok") {
                        parentLi.remove();
                    } else {
                        alert(data.error);
                    }
                })
                .fail(function (d) {
                    alert(d);
                });
        }).on("click", "i.fa-edit", function (e) {
            e.preventDefault();
            e.stopPropagation();
            if ($(this).hasClass("public-field")) return;
            var li = $(this).parents("li");

            editExamField(li.data("id"));
        }).on('click', 'li', function(e) {
            var self = $(this);
            // var parentLi = $(this).parent();
            if (checkSelectedFieldsLength(null, self)) {
                if (self.hasClass("disabled")) return;
                $("#selected_fields").append($(self.clone()));
                self.addClass("disabled");
                updateSelectedFields();
            }
        })





        function editExamField(fid){
            var LevelItem = function(id, label){
                this.id = id;
                this.label = label;
                this.selected = false;
            }
            var TreeLevel = function(){
                this.label = '';
                this.child = null;
                this.selectedKey = ''; //不是没有父级
                this.items = {};
                this.parent = null;
                this.selectedItem = null;
            }
            TreeLevel.prototype = {
                getItemById: function(id){
                    var lists = this.items[this.selectedKey];
                    var item = null;
                    for(var i=0; i<lists.length; i++){
                        if( lists[i].id == id ){
                            item = lists[i];
                            break;
                        }
                    }
                    return item;
                },
                getItemByIndex: function(index){
                    var lists = this.items[this.selectedKey];
                    if(index<0 || index >= lists.length ) return null;
                    return lists[index];
                },
                checkShouldShowTip: function(){
                    if( this.items.hasOwnProperty(this.selectedKey) && this.items[this.selectedKey].length > 0 ){
                        $(this.selector).find("ul.items > span.items-none-tip").remove();
                    }else if( $(this.selector).find("ul.items > span.items-none-tip").length == 0 ) {
                        $(this.selector).find("ul.items").append($('<span class="items-none-tip">{0}</span>'.format(window.OELang.examFieldsNoItemsTip)))
                    }
                },
                selectKey: function(key){
                    if( this.selectedKey == key ) return;

                    $(this.selector).find("ul.items > li").remove();
                    this.selectedKey = key;
                    if( this.items.hasOwnProperty(this.selectedKey) ){
                        this.render();
                        if( this.items[this.selectedKey].length> 0 ){
                            this.selectItem( this.items[this.selectedKey][0] );
                        }
                    }else{
                        this.checkShouldShowTip();
                        if(this.child) this.child.selectKey('none');
                    }
                },
                addItem: function(label){
                    if( !this.items.hasOwnProperty(this.selectedKey) ) this.items[this.selectedKey] = [];
                    var getId = function() {
                        var id = Date.parse(new Date()),
                            res = "",
                            chars = '0123456789abcdefghijklmnopqrstuvwxyz'.split(''),
                            n =  3;
                        for(var i = 0; i < n ; i ++) {
                            var idx = Math.ceil(Math.random()*35);
                            res += chars[idx];
                        }
                        return id + res;
                    }

                    return this.items[this.selectedKey].push(new LevelItem(getId(), label))-1;
                },
                removeItem: function(item){
                    if( typeof  item == 'string') item = this.getItemById(item);
                    var lists = this.items[this.selectedKey];
                    if( lists.indexOf(item) < 0 ) return;
                    lists.splice( lists.indexOf(item), 1 );
                    this.render();
                    this.checkShouldShowTip();
                },
                remove: function(){
                    $(this.selector).remove();
                },
                render: function(){
                    //执行key不变的渲染
                    $(this.selector).find("ul.items > li").remove();
                    var lists = this.items[this.selectedKey];
                    var html = lists.map(function(item){
                        return '<li class="{2}" data-id="{0}" title="{3}">{1}</li>'.format(item.id, item.label, item.selected?'selected':'', window.OELang.dragToSortTip);
                    }).join('\n');
                    $(this.selector).find('ul.items').html(html);
                },
                setSelectedItemById: function(id){
                    this.selectItem(this.getItemById(id));
                },
                selectItem: function(item){
                    this.selectedItem = item;
                    if( this.selectedItem ){
                        var lists = this.items[this.selectedKey];
                        for(var i=0; i<lists.length; i++){
                            lists[i].selected =  lists[i] == this.selectedItem;
                        }
                        if( this.child ){
                            this.child.selectKey(this.selectedItem.id);
                        }

                        //更新dom
                        $(this.selector).find("ul.items > li").removeClass("selected");
                        $(this.selector).find("ul.items > li[data-id='{0}']".format(this.selectedItem.id)).addClass("selected");
                    }
                },
                updateLabel: function(label){
                    this.label = label;
                    $(this.selector).find("span.name").html(label);
                },
                initDom: function(selector){
                    this.selector = selector;
                    var treeLevel = this;

                    if( this.parent ){
                        this.selectedKey = '';
                    }

                    $(selector).on('click', 'span.name', function(e){
                        if($(this).hasClass('editing')) return;
                        var self = $(this);
                        editValue($(this).text(), function(ok, val){
                            if( ok && val != ''){
                                self.html(val);
                                treeLevel.label = val;
                            }
                            self.removeClass('editing');
                        }, '', window.OELang.enterContentPlease);

                    }).on('click', 'span.actions i', function(e){
                        var action = $.trim( $(this).attr('class').replace('fa', '').replace('fa-', '') );

                        switch(action){
                            case 'edit':
                                if( treeLevel.selectedItem ){
                                    editValue( treeLevel.selectedItem.label, function(ok, val){
                                        if( ok && val != '' ){
                                            treeLevel.selectedItem.label = val;
                                            treeLevel.render();
                                        }
                                    }, '', window.OELang.enterContentPlease)
                                }else{
                                    NW.messageBox( window.OELang.notice, window.OELang.pleaseSelectFirst);
                                }

                                break;
                            case 'plus':
                                editValue('', function(ok, val){
                                    if( ok && val !='' ){
                                        var index = treeLevel.addItem(val);
                                        treeLevel.checkShouldShowTip();
                                        treeLevel.render();
                                        treeLevel.selectItem(treeLevel.getItemByIndex(index));
                                    }
                                }, '', window.OELang.enterContentPlease)
                                break;
                            case 'trash':
                                if( treeLevel.selectedItem ){
                                    NW.showConfirmDialog(window.OELang.areYouSureToDelete.format( treeLevel.selectedItem.label ), function(resp){
                                        if( resp == 'yes'){
                                            treeLevel.removeItem( treeLevel.selectedItem );
                                        }
                                    })
                                }else{
                                    NW.messageBox( window.OELang.notice, window.OELang.pleaseSelectFirst);
                                }
                                break;
                            case 'angle-right':
                                if($('.field-lists-group .list').length >= 3 ){
                                    NW.messageBox( window.OELang.notice, window.OELang.onlySupportTreeLevelTip );
                                    return;
                                }
                                if( treeLevel.child ) return;

                                var childLevel = new TreeLevel();
                                childLevel.label = window.OELang.editSelectFieldTip;
                                treeLevel.child = childLevel;
                                childLevel.parent = treeLevel;
                                TreeLevel.renderTree(childLevel);
                                if(treeLevel.selectedItem){
                                    childLevel.selectKey(treeLevel.selectedItem.id);
                                }
                                break;
                            case 'angle-left':
                                if( treeLevel.child ){
                                    NW.messageBox( window.OELang.notice, window.OELang.pleaseFirstDeleteChild);
                                }else{
                                    NW.showConfirmDialog(window.OELang.areYouSureToDelete.format( treeLevel.label ), function(resp){
                                        if( resp == 'yes'){
                                            var p = treeLevel.parent;
                                            p.child = null;
                                            treeLevel.remove();
                                        }
                                    })

                                }
                                break;
                        }
                    }).on('click', 'ul.items > li', function(e){
                        var id = $(this).data('id');
                        treeLevel.setSelectedItemById(id);
                    })


                    var onSortUpdated = function(evt){
                        var itemEl = evt.item,
                            newIndex = evt.newIndex,
                            oldIndex = evt.oldIndex;
                        var item = treeLevel.getItemById($(itemEl).data('id'));
                        var lists = treeLevel.items[treeLevel.selectedKey];
                        lists.splice( lists.indexOf(item), 1);
                        lists.splice( newIndex, 0, item );
                    }

                    Sortable.create($(this.selector).find("ul.items")[0], {
                        handle: 'li',
                        animation: 150,
                        onUpdate:onSortUpdated
                    });
                },
                toJson: function(){
                    var treeToObject = function(tree){
                        var obj = {};
                        obj.label = tree.label;
                        obj.items = tree.items;
                        if( tree.child ){
                            obj.child = treeToObject( tree.child );
                        }
                        return obj;
                    }
                    return JSON.stringify(treeToObject(this));

                }
            }

            TreeLevel.renderTree = function(tree){
                var tmp = $("#field-lists-list-template").text();
                tmp = tmp.format(tree.label, '<span class="items-none-tip">{0}</span>'.format(window.OELang.examFieldsNoItemsTip));
                var dom = $($.trim(tmp));
                $(".field-lists-group").append(dom);
                tree.initDom(dom);
            }

            TreeLevel.loadFromJson = function(jsonObject){
                var dom = $('field-lists-group');

                var levels = [];
                var loadLevel = function(json){
                    var level = new TreeLevel();
                    if(json.hasOwnProperty('label')){
                        level.label = json.label;
                    }else{
                        level.label = window.OELang.editSelectFieldTip;
                    }
                    if(json.hasOwnProperty('items')) level.items = json.items;
                    if(json.hasOwnProperty('child') && json.child ){
                        level.child = loadLevel(json.child);
                        level.child.parent = level;
                    }
                    levels.push(level);
                    return level;
                }
                var parentLevel = loadLevel(jsonObject);
                for(var i=levels.length-1; i>=0; i--){
                    TreeLevel.renderTree(levels[i]);
                }
                return parentLevel;
            }

            var addbtn = $("a[href='#add-new-field']");
            var treeLevel;
            var dialog = NW.showDialog('', [],  $("a[href='#add-new-field']").attr("data-title"), {
                ajax: {
                    url: $("a[href='#add-new-field']").attr("data-url"),
                    data: {
                        fid: fid,
                    },
                    reload: true,
                    complete: function(){
                        var currentValue = $.parseJSON( $("#currentValue").text() );
                        treeLevel = TreeLevel.loadFromJson(currentValue);
                        treeLevel.selectKey('np');
                        dialog.dialog.position();
                    }
                },
                width: 800,
                onCreated: function(){
                    $(".jBox-content").on('click', "button[type='button']", function(){
                        dialog.close();
                    }).on('submit', "#field-edit-form", function(e){
                        e.preventDefault();

                        if (addbtn.attr("data-authority") != 1){
                            $.CE.showPrompt(window.OELang.needToUpgrad,window.OELang.needUpgradeDesc,window.YKS.upgradeURL,window.OELang.upgradeNow);
                            return false;
                        }else{
                            var submitbtn = $(".jBox-content").find("button[type='submit']");
                            submitbtn.append('<i class="fa fa-spin fa-spinner"></i>').prop("disabled", true);
                            var saveUrl = $("a[href='#add-new-field']").attr("data-saveurl");
                            $("input[name='select-data']").val( treeLevel.toJson() );
                            $.post(saveUrl,
                                $("#field-edit-form").serialize(), function (data) {
                                    data = $.parseJSON(data);
                                    if (data.status != 'ok') {

                                    } else {
                                        if(fid>0){

                                        }else{
                                            var h = $("#new-field-template").text();
                                            h = $.trim(h.format(data.fid, data.label));
                                            //修复信息项达到收集个数后可通过添加新的自定义信息项添加信息项的bug
                                            var sf_ul = $("#selected_fields");
                                            var count = sf_ul.attr("data-collections");
                                            if (count == -1 || sf_ul.find("li").length < count) {
                                                $(h).insertBefore($("#available_fields li.new-field")).addClass("disabled");
                                                $(h).appendTo($("#selected_fields"));
                                                updateSelectedFields();
                                            } else {//修复添加自定义信息收集项一次添加两个bug
                                                $(h).insertBefore($("#available_fields li.new-field"));
                                            }
                                        }

                                        dialog.close();
                                    }
                                });
                        }
                        return false;
                    }).on("click", 'input.exam-type-radio', function(e){
                        var val = $(this).val(), fieldLabel = $("input[name='field_label']").val();
                        $(".exam-type").hide();
                        $(".exam-field-"+val).show();

                        if(val == 'select' && !treeLevel.child && fieldLabel!='' ) treeLevel.updateLabel(fieldLabel);
                        dialog.dialog.position();
                    }).on("change", "input[name='field_label']", function(e){
                        if($('input.exam-type-radio:checked').val() == 'select'){
                            if( !treeLevel.child ){
                                treeLevel.updateLabel( $(this).val() );
                            }
                        }
                    }).on("input","input[name='field_label']",function(){
                        CM.checkInputLength($(this),20);
                        var len = CM.getInputLength($(this));
                        $('.title-length-tips').html("{0}/20".format(len));
                    })
                }
            })
        }

        $("#available_fields").on("click", "a[href='#add-new-field']", function(e){
            e.preventDefault();
            editExamField(0);
        });

        //获取微信头像和昵称权限判断
        $(document).on("change", "#need_wechart_login", function (e) {
            var self = $(this);
            if (self.attr("data-authority") != 1) {
                self.removeAttr("checked");
                // $.CE.showNeedUpgrade();
                $.CE.showPrompt(window.OELang.needToUpgrad,window.OELang.needUpgradeDesc,window.YKS.upgradeURL,window.OELang.upgradeNow);
            }
        }).on("change", "select[name='question_per_page']", function (e) {
            var val = Number( $(this).val() );
            var click2Next = $("input[name='click2next']"),
                click2NextGroup = click2Next.parents(".field-group");
            if(val==1){
                click2Next.val(1)
                click2NextGroup.slideDown();
            }else{
                click2NextGroup.slideUp();
                click2Next.val(0).prop("checked", false);
            }
        })

        //关注微信公众号考试权限判断
        $(document).on("change", "#subscript_wechart_first", function (e) {
            var self = $(this);
            if (self.attr("data-authority") == 1) {
                if (self.attr("data-mpaccount") == 0) {
                    self.removeAttr("checked");

                    var token = self.data("token");
                    AuthorizeWechat(token, function(success){
                        if(success){
                            $("#subscript_wechart_first").attr("data-mpaccount", 1).prop("checked", true);
                        }else{
                            alert(self.attr("data-haventbind"))
                        }
                    });
                }
            } else {
                self.removeAttr("checked");
                // $.CE.showNeedUpgrade();
                $.CE.showPrompt(window.OELang.needToUpgrad,window.OELang.needUpgradeDesc,window.YKS.upgradeURL,window.OELang.upgradeNow);
            }
        }).on('change', 'select#resume_time_after_break', function(e){
            if( $(this).val() == 0 ){
                NW.messageBox( window.OELang.notice, window.OELang.resumeTestAfterBreakTimeInfiniteTip);
            }
        })


        function getScoreRanges(name) {
            var scoreRanges = $("input[name='"+name+"']").val();
            if(scoreRanges==""){
                scoreRanges=[];
            } else{
                scoreRanges = JSON.parse(scoreRanges);
            }
            return scoreRanges;
        }
        function getOffsetX(target,e) {
            var offsetX, offsetY, w = target.find(".score-slider").width();
            offsetX = e.clientX - target.find(".score-slider").offset().left;
            if( offsetX <0 ) offsetX = 0;
            if( offsetX > target.find(".score-slider").width() ) offsetX = w;

            return offsetX;
        }

        function generateScoreRangeTemp(tmpID,point, range, tip) {
            var tmp = $("#"+tmpID).text();
            tmp = tmp.format(point, range, tip);
            return $.trim(tmp);
        }

        function updateScoreRangeTitle(item,scoreRanges) {
            var stmp = "{0}% - {1}%";
            for(i=0;i<scoreRanges.length; i++){
                var range = scoreRanges[i];
                // var rangeDom = $(".score-range-item[data-point='"+range.point+"']");
                var rangeDom = $("."+item+"[data-point='"+range.point+"']");
                if( i == 0 ){
                    rangeDom.find("span.item-score v").html(stmp.format(0, range.point));
                }else{
                    rangeDom.find("span.item-score v").html(stmp.format(scoreRanges[i-1].point+1, range.point));
                }
            }
        }

        function addScoreRange(point, value, init,list,itemID,valueName){
            init = init===undefined?false:init;
            if(point<=0||point>100) return;
            if(!init && point == 100) return;

            var scoreRanges = getScoreRanges(valueName);
            if(!init && valueName == "integral-ranges" && scoreRanges.length==1){
                //检测是否开启了考试得积分
                $("input[name='enable_integral_range']").attr("checked","checked")
            }
            var insertIndex = 0;
            for(i=0; i<scoreRanges.length; i++){
                var range = scoreRanges[i];
                if( range.point < point ){
                    if( i < scoreRanges.length -1 ){
                        if( scoreRanges[i+1].point > point ){
                            insertIndex = i+1;
                            break;
                        }
                    }else{
                        insertIndex = i+1;
                    }
                }else{
                    break;
                }
            }

            var item = {
                point: point,
            }
            if(valueName == "score-ranges"){
                item.tip = value;
            }else if(valueName == "integral-ranges"){
                if(value === "") value = 0
                item.integral = Number(value);
            }
            scoreRanges.splice(insertIndex, 0, item);
            var start = insertIndex==0?0:scoreRanges[insertIndex-1].point,
                end = point;
            var tmp = generateScoreRangeTemp(itemID+"-template",point, "{0}% - {1}%".format(start, end), value);
            tmp = $(tmp);
            if(insertIndex==0){
                if($('.'+itemID).length==0){
                    $("."+list).append(tmp);
                }else{
                    tmp.prependTo($("."+list));
                }
            }else{
                tmp.insertAfter($("."+list+" ."+itemID+":nth-child("+insertIndex+")"))
            }

            $("input[name='"+valueName+"']").val(JSON.stringify(scoreRanges));

            tmp.find("textarea").val(value).sceditor(options);
            if(point == 100){
                if(valueName == "score-ranges"){
                    tmp.find("a[href='#delete-score-item']").attr("disabled", "disabled");
                }else if(valueName == "integral-ranges"){
                    tmp.find("a[href='#delete-score-item']").attr("disabled", "disabled");
                }
            }

            updateScoreRangeTitle(itemID,scoreRanges);
        }

        function canAddScoreRangePoint(point,valueName){
            if(point<=0||point>=100) return false;
            var scoreRanges = getScoreRanges(valueName);
            for(i =0; i<scoreRanges.length; i++){
                if(scoreRanges[i].point == point) return false;
            }
            return true;
        }
        function addSlideHandle(target,point){
            var tmp = '<span class="slider-handle zoom-transition" insertable="" data-value="{0}" style="left: {0}%;"></span>';
            tmp = tmp.format(point);
            $(tmp).appendTo(target.find(".slider-wrap"));
        }

        //分数分段
        $(document).on("mousemove", "#slider-comments", function(e){
            $(".slider-wrap .handle-hint").show();
            var offsetX = getOffsetX($(this),e), w = $(".score-slider").width();
            var hint = $(".slider-wrap .handle-hint");
            hint.css("left", offsetX+"px").attr("data-title", hint.attr("data-tiptitle").format(Math.ceil(offsetX*100/w)));
        }).on("click", "#slider-comments", function(e){
            var offsetX = getOffsetX($(this),e), w = $(".score-slider").width(),
                v = Math.ceil(offsetX*100/w);
            if(!canAddScoreRangePoint(v,"score-ranges")) return;
            $(".slider-wrap .handle-hint").hide();
            addSlideHandle($(this),v);
            addScoreRange(v,"",false,"score-range-lists","score-range-item","score-ranges");
        }).on("mouseout", "#slider-comments", function(e){
            $(".slider-wrap .handle-hint").hide();
        })

        $(document).on("change", "input[name='availabel']", function(e){
            if($(this).attr("data") == 1){
                $("#availabel-time-settings").fadeIn();
            }else{
                $("#availabel-time-settings").fadeOut();
            }
        }).on("change", "#show_view_score_code", function(e){
            if($("#show_view_score_code:checked").attr("data") ==1 ){
                $("#info-show-when-search").fadeIn();
            }else{
                $("#info-show-when-search").fadeOut();
            }
        }).on("change", "input[name='show_from_date'], input[name='show_until_date']", function(e){
            if($(this).attr("data")==""){
                $(this).val( new Date().Format("yyyy-MM-dd hh:mm") )
            }
        })

        $(".score-range-lists").on("click", "a[href='#delete-score-item']", function (e) {
            e.preventDefault();
            if($(this).attr("disabled")) return;
            var item = $(this).parents(".score-range-item"),
                point = item.attr("data-point");
            var scoreRanges = getScoreRanges("score-ranges");
            item.remove();
            $('span.slider-handle[data-value="'+point+'"]').remove();
            for( i=0; i<scoreRanges.length; i++){
                var range = scoreRanges[i];
                if( range.point == point ){
                    scoreRanges.splice(i, 1);
                    break;
                }
            }
            updateScoreRangeTitle("score-range-item",scoreRanges);
            $("input[name='score-ranges']").val(JSON.stringify(scoreRanges));
        })

        //积分设置
        $(document).on("mousemove", "#slider-integral", function(e){
            $(this).find(".slider-wrap .handle-hint").show();
            var offsetX = getOffsetX($(this),e), w = $(this).find(".score-slider").width();
            var hint = $(this).find(".slider-wrap .handle-hint");
            hint.css("left", offsetX+"px").attr("data-title", hint.attr("data-tiptitle").format(Math.ceil(offsetX*100/w)));
        }).on("click", "#slider-integral", function(e){
            if(!$("#auth_group").prop("checked")){
                alert(window.OELang.openIntegralTips)
                return
            }
            var offsetX = getOffsetX($(this),e), w = $(this).find(".score-slider").width(),
                v = Math.ceil(offsetX*100/w);
            if(!canAddScoreRangePoint(v,"integral-ranges")) return;
            $(this).find(".slider-wrap .handle-hint").hide();
            addSlideHandle($(this),v);
            addScoreRange(v,0,false,"integral-range-lists","integral-range-item","integral-ranges");
        }).on("mouseout", "#slider-integral", function(e){
            $(this).find(".slider-wrap .handle-hint").hide();
        })

        $(".integral-range-lists").on("click", "a[href='#delete-score-item']", function (e) {
            e.preventDefault();
            if($(this).attr("disabled")) return;
            var item = $(this).parents(".integral-range-item"),
                point = item.attr("data-point");
            var scoreRanges = getScoreRanges("integral-ranges");
            item.remove();
            $('span.slider-handle[data-value="'+point+'"]').remove();
            for( i=0; i<scoreRanges.length; i++){
                var range = scoreRanges[i];
                if( range.point == point ){
                    scoreRanges.splice(i, 1);
                    break;
                }
            }
            updateScoreRangeTitle("integral-range-item",scoreRanges);
            $("input[name='integral-ranges']").val(JSON.stringify(scoreRanges));
        })

        function onValidateSubmit() {
            //更新scoreRange文字
            var scoreRanges = getScoreRanges("score-ranges");
            for(var i=0;i<scoreRanges.length; i++){
                var range = scoreRanges[i];
                var item = $(".score-range-item[data-point='"+range.point+"']");
                range.tip = item.find("textarea").val();
            }
            $("input[name='score-ranges']").val(JSON.stringify(scoreRanges));

            var integralRanges = getScoreRanges("integral-ranges");
            for(var i=0;i<integralRanges.length; i++){
                var range = integralRanges[i];
                var item = $(".integral-range-item[data-point='"+range.point+"']");
                range.integral = item.find("input[name='integralValue']").val();
            }
            $("input[name='integral-ranges']").val(JSON.stringify(integralRanges));
        }

        /**
         * 保存设置方法
         * @param type 1保存，0预览，预览不保存到数据库
         * @returns {boolean}
         */
         function saveSettingsFun(type) {
            var selectedGroup = $("#choose-group-1  select").val();
            var selectedGroupCheck = $("input[name='tab_auth_groups']").is(":checked");
            var selectedStudent = $("#choose-students-1  select").val();
            var selectedStudentCheck = $("input[name='tab_auth_students']").is(":checked");
            if($("input[name='authentication']:checked").val()=='group' && (!selectedGroupCheck && !selectedStudentCheck || !selectedGroup && !selectedStudent)){
                NW.messageBox(window.OELang.notice,window.OELang.selectGroupOrStudent, function(){
                    $("html,body").animate({scrollTop: $("#authentication_gid  select").offset().top}, 800);
                })
                return;
            }

            //检查开始时间和结束时间是否符合要求
            var availabel = $("input[name='availabel']:checked").attr("data");
            var from_date = new Date( $("input[name='show_from_date']").val() ).getTime(),
                end_date = new Date( $("input[name='show_until_date']").val() ).getTime();

            if( end_date <= from_date && availabel == 1 ){
                NW.messageBox(window.OELang.notice, $("#availabel-time-settings").data("start-lg-end-tip"), function(){
                    $("html,body").animate({scrollTop: $("#availabel-time-settings").offset().top-100}, 800);
                })
                return;
            }else if(availabel == 2) {
                $("input[name='show_from_date']").val( new Date().Format("yyyy-MM-dd hh:mm"));
                $("input[name='show_until_date']").val( $("input[name='show_from_date']").val());
            }

            var form = document.getElementById('exam-form');
            if(!type){
                //预览
                form.preview.value = 1;
                // form.target = "_blank";
                form.task.value = "exam.preview";
            }else {
                if(isAdvance == true){
                    form.task.value = "advance.save";
                }else{
                    form.task.value = "exam.save";
                }
                if($('input[name="save_as_default"]').prop('checked')) {
                    var newElement = document.createElement("input");
                    newElement.setAttribute("type","hidden");
                    newElement.name = "save_as_default";
                    newElement.value = 1;
                    form.appendChild(newElement);
                }

            }


            var targetBtn;
            if(type) {
                targetBtn = $(".btnSave");
                targetBtn.append('<i class="fa fa-spin fa-spinner"></i>').addClass('disabled');
            }else {
                targetBtn = $(".previewBtn");
                targetBtn.append('<i class="fa fa-spin fa-spinner"></i>').addClass('disabled');
            }
            if(!isAdvance){
                onValidateSubmit();
            }

            var cat_sug = [];
            $('.cat-sug-sett-item').each(function (i) {
                var $this = $(this);
                var cid = Number($this.data('cid'));
                var score_line = Number($this.find('.cat-score-line').val());
                var good_sug = $this.find('.cat-sug-good').val().trim();
                var bad_sug = $this.find('.cat-sug-bad').val().trim();
                if (cid < 0) return true;
                if (score_line === NaN || score_line < 0 || score_line > 100) score_line = 60;
                cat_sug[i] = {
                    cid: cid,
                    score_line: score_line,
                    good_sug: good_sug,
                    bad_sug: bad_sug
                }
            });
            $('#cat_sug').val(JSON.stringify(cat_sug));

            //奖励设置
            var rewards_enable = $("input[name='reward_enabled']").prop("checked");
            var reward_type = $("input[name='reward_type']:checked").val();
            var rewards_count = $("input[name='rewards_count']").val();
            var rewards_amount = $("input[name='rewards_amount']").val();
            var rewards_created_type = $("input[name='rewards_create']").val();
            var rewards_probability = $("input[name='rewards_probability']").val();

            var is_ok = true;
            if(reward_type==0){
                if(rewards_count*0.3>rewards_amount){
                    is_ok = false;
                    NW.messageBox(window.OELang.notice,window.OELang.randomRedLowestTips.format(Number(rewards_count*0.3).toFixed(2)),function(){
                        $("input[name='rewards_amount']").val("");
                    })
                }else if(rewards_count*200<rewards_amount){
                    is_ok = false;
                    NW.messageBox(window.OELang.notice,window.OELang.exportExamRewardsMaxFailed,function(){
                        $("input[name='rewards_amount']").val("");
                    })
                }
            }else{
                if(rewards_amount<0.3){
                    is_ok = false;
                    NW.messageBox(window.OELang.notice,window.OELang.randomRedLowestTips.format(Number(rewards_count*0.3).toFixed(2)),function(){
                        $("input[name='rewards_amount']").val("");
                    })
                }else if(200<rewards_amount){
                    is_ok = false;
                    NW.messageBox(window.OELang.notice,window.OELang.exportExamRewardsMaxFailed,function(){
                        $("input[name='rewards_amount']").val("");
                    })
                }
            }
            //检查次数
            var times_type = $("input[name='times_type']:checked").val()
            var times_1 = $("input[name='reward_times_1']").val()
            var times_2 = $("input[name='reward_times_2']").val()
            if((times_type == 1 && (times_1 <=0 || times_1 ==""))||(times_type == 2 && (times_2 <=0 || times_2 ==""))){
                NW.messageBox(window.OELang.notice,window.OELang.rewardTimesTips);
                is_ok = false;
            }

            if(!is_ok){
                targetBtn.find(".fa-spinner").remove();
                targetBtn.removeClass("disabled");
                return false;
            }
            function submitExamData() {
                var formData = new FormData(form);
                formData.append("eid", eid);
                var formUrl = window.YKS.preview;
                $.ajax({
                    type:"POST",
                    url:formUrl,
                    data:formData,
                    dataType: 'JSON',
                    cache: false,
                    processData:false,
                    contentType:false,
                    success:function(data){
                        var status = data.status;
                        if(status == "ok"){
                            var box = new jBox("Modal", {
                                id: "exam-preview-jbox",
                                width: $(window).width() * 0.9,
                                title: window.OELang.previewRegister,
                                height: $(window).height() * 0.9,
                                "ajax": {
                                    url: window.YKS.previewUrl,
                                    data:{
                                        eid:eid
                                    }
                                },
                                onCreated: function () {

                                },
                                onCloseComplete:function(e){

                                    box.destroy();
                                }
                            })
                            box.open();
                        }
                        targetBtn.find(".fa-spinner").remove();
                        targetBtn.removeClass("disabled");

                    }
                });
            }
            if(!rewards_enable || rewards_created_type == 0){
                if(!type){
                    submitExamData();
                }else {
                    form.submit();
                }
            }else{
                if(rewards_count <= 0){
                    NW.messageBox(window.OELang.notice,window.OELang.rewardCountIsNull);
                    targetBtn.find(".fa-spinner").remove();
                    targetBtn.removeClass("disabled");
                    return;
                }
                if(rewards_amount <= 0){
                    NW.messageBox(window.OELang.notice,window.OELang.rewardRedAmountTips);
                    targetBtn.find(".fa-spinner").remove();
                    targetBtn.removeClass("disabled");
                    return;
                }
                if(rewards_probability <= 0){
                    NW.messageBox(window.OELang.notice,window.OELang.rewardRedProTips);
                    targetBtn.find(".fa-spinner").remove();
                    targetBtn.removeClass("disabled");
                    return;
                }
                var amount_total = rewards_amount;
                if(reward_type == 1){
                    amount_total = rewards_amount*rewards_count;
                }
                amount_total = Number(amount_total).toFixed(2);
                $.ajax({
                    url:window.YKS.checkExamCash,
                    data:{
                        amount:amount_total,
                        eid:eid
                    },
                    success:function(data){
                        rdata = $.parseJSON(data);
                        if(rdata.status != "ok"){
                            NW.messageBox(window.OELang.notice,rdata.msg);
                            targetBtn.find(".fa-spinner").remove();
                            targetBtn.removeClass("disabled");
                        }else{
                            if(!type){
                                submitExamData();
                            }else {
                                form.submit();
                            }
                        }
                    }
                })
            }

            form.preview.value = 0;
            // form.target = "";
        }

        $(".btnSave").bind("click", function (e) {
            e.preventDefault();
            saveSettingsFun(1);
        });

        $(".previewBtn").bind("click", function (e) {
            e.preventDefault();
            saveSettingsFun(0);

        });

        $(".releaseBtn").bind("click", function (e) {
            e.preventDefault();

            var selectedGroup = $("#authentication_gid  select").val();
            var selectedStudent = $("#authentication_sid  select").val();
            //var selectedGroup = $("#selectGroup").val();
            // console.log(selectedGroup);
            // console.log("heh");
            // return false;
            if($("input[name='authentication']:checked").val()=='group' && ( !selectedGroup || selectedGroup == '' ) ){
                NW.messageBox(window.OELang.notice, $("#authentication_gid  select").data('placeholder'), function(){
                    $("html,body").animate({scrollTop: $("#authentication_gid  select").offset().top}, 800);
                })
                return;
            }

            if($("input[name='authentication']:checked").val()=='student' && ( !selectedStudent || selectedStudent == '' ) ){
                NW.messageBox(window.OELang.notice, $("#authentication_sid  select").data('placeholder'), function(){
                    $("html,body").animate({scrollTop: $("#authentication_sid  select").offset().top}, 800);
                })
                return;
            }

            //检查开始时间和结束时间是否符合要求
            var availabel = $("input[name='availabel']:checked").attr("data");
            var from_date = new Date( $("input[name='show_from_date']").val() ).getTime(),
                end_date = new Date( $("input[name='show_until_date']").val() ).getTime();

            if( end_date <= from_date && availabel == 1 ){
                NW.messageBox(window.OELang.notice, $("#availabel-time-settings").data("start-lg-end-tip"), function(){
                    $("html,body").animate({scrollTop: $(".availabel-time").offset().top-100}, 800);
                })
                return;
            }else if(availabel == 2) {
                $("input[name='show_from_date']").val( new Date().Format("yyyy-MM-dd hh:mm"));
                $("input[name='show_until_date']").val( $("input[name='show_from_date']").val());
            }

            var form = document.getElementById('exam-form');
            form.task.value = "exam.release";
            if($('input[name="save_as_default"]').prop('checked')) {
                var newElement = document.createElement("input");
                newElement.setAttribute("type","hidden");
                newElement.name = "save_as_default";
                newElement.value = 1;
                form.appendChild(newElement);
            }


            $(this).append('<i class="fa fa-spin fa-spinner"></i>').addClass('disabled');
            var self = $(this);
            if(!isAdvance){
                onValidateSubmit();
            }
            var cat_sug = [];
            $('.cat-sug-sett-item').each(function (i) {
                var $this = $(this);
                var cid = Number($this.data('cid'));
                var score_line = Number($this.find('.cat-score-line').val());
                var good_sug = $this.find('.cat-sug-good').val().trim();
                var bad_sug = $this.find('.cat-sug-bad').val().trim();
                if (cid <= 0) return true;
                if (score_line === NaN || score_line < 0 || score_line > 100) score_line = 60;
                cat_sug[i] = {
                    cid: cid,
                    score_line: score_line,
                    good_sug: good_sug,
                    bad_sug: bad_sug
                }
            });
            $('#cat_sug').val(JSON.stringify(cat_sug));

            //奖励设置
            var rewards_enable = $("input[name='reward_enabled']").prop("checked");
            var reward_type = $("input[name='reward_type']:checked").val();
            var rewards_count = $("input[name='rewards_count']").val();
            var rewards_amount = $("input[name='rewards_amount']").val();
            var rewards_created_type = $("input[name='rewards_create']").val();
            var rewards_probability = $("input[name='rewards_probability']").val();

            var is_ok = true;
            if(reward_type==0){
                if(rewards_count*0.3>rewards_amount){
                    is_ok = false;
                    NW.messageBox(window.OELang.notice,window.OELang.randomRedLowestTips.format(Number(rewards_count*0.3).toFixed(2)),function(){
                        $("input[name='rewards_amount']").val("");
                    })
                }else if(rewards_count*200<rewards_amount){
                    is_ok = false;
                    NW.messageBox(window.OELang.notice,window.OELang.exportExamRewardsMaxFailed,function(){
                        $("input[name='rewards_amount']").val("");
                    })
                }
            }else{
                if(rewards_amount<0.3){
                    is_ok = false;
                    NW.messageBox(window.OELang.notice,window.OELang.randomRedLowestTips.format(Number(rewards_count*0.3).toFixed(2)),function(){
                        $("input[name='rewards_amount']").val("");
                    })
                }else if(200<rewards_amount){
                    is_ok = false;
                    NW.messageBox(window.OELang.notice,window.OELang.exportExamRewardsMaxFailed,function(){
                        $("input[name='rewards_amount']").val("");
                    })
                }
            }
            //检查次数
            var times_type = $("input[name='times_type']:checked").val()
            var times_1 = $("input[name='reward_times_1']").val()
            var times_2 = $("input[name='reward_times_2']").val()
            if((times_type == 1 && (times_1 <=0 || times_1 ==""))||(times_type == 2 && (times_2 <=0 || times_2 ==""))){
                NW.messageBox(window.OELang.notice,window.OELang.rewardTimesTips);
                is_ok = false;
            }
            if(!is_ok){
                $(".releaseBtn").find(".fa-spinner").remove();
                $(".releaseBtn").removeClass("disabled");
                return false;
            }
            if(!rewards_enable || rewards_created_type == 0){
                submitData();
            }else{
                if(rewards_count <= 0){
                    NW.messageBox(window.OELang.notice,window.OELang.rewardCountIsNull);
                    $(".releaseBtn").find(".fa-spinner").remove();
                    $(".releaseBtn").removeClass("disabled");
                    return;
                }
                if(rewards_amount <= 0){
                    NW.messageBox(window.OELang.notice,window.OELang.rewardRedAmountTips);
                    $(".releaseBtn").find(".fa-spinner").remove();
                    $(".releaseBtn").removeClass("disabled");
                    return;
                }
                if(rewards_probability <= 0){
                    NW.messageBox(window.OELang.notice,window.OELang.rewardRedProTips);
                    $(".releaseBtn").find(".fa-spinner").remove();
                    $(".releaseBtn").removeClass("disabled");
                    return;
                }
                var amount_total = rewards_amount;
                if(reward_type == 1){
                    amount_total = rewards_amount*rewards_count;
                }
                amount_total = Number(amount_total).toFixed(2);
                $.ajax({
                    url:window.YKS.checkExamCash,
                    data:{
                        amount:amount_total,
                        eid:eid
                    },
                    success:function(data){
                        rdata = $.parseJSON(data);
                        if(rdata.status != "ok"){
                            NW.messageBox(window.OELang.notice,rdata.msg);
                            $(".releaseBtn").find(".fa-spinner").remove();
                            $(".releaseBtn").removeClass("disabled");
                        }else{
                            submitData();
                        }
                    }
                })
            }

            function submitData(){
                NW.showCustomConfirmDialog(window.OELang.notice, window.OELang.releaseNow, window.OELang.releaseLater, window.OELang.isReleaseTheExam,function(resp) {
                    if (resp == "yes") {
                        var formData = new FormData(form);
                        formData.append("eid", eid);
                        var formUrl = window.YKS.releaseUrl;
                        $.ajax({
                            type:"POST",
                            url:formUrl,
                            data:formData,
                            dataType: 'JSON',
                            cache: false,
                            processData:false,
                            contentType:false,
                            success:function(data){
                                var status = data.status;
                                if(status == "ok"){
                                    $('input[name="release"]').val(1);
                                    $("#jBox-overlay").remove();
                                    var shareBox = new jBox("Modal", {
                                        "id":"share-box",
                                        maxWidth:958,
                                        maxHeight:615,
                                        minWidth:772,
                                        closeButton: false,
                                        "ajax": {
                                            setContent: false,
                                            url: window.YKS.briefExam,
                                            data: {eid: eid,releaseSuccessfully:1},
                                            success:function(rdata){
                                                shareBox.setContent(rdata);
                                                $(".btn-close-share").on("click",function(e){
                                                    shareBox.close();
                                                })
                                                $("button.generate-license").on("click", function (e) {
                                                    var eid = $(this).attr("data-eid");
                                                    var data = {
                                                        eid: eid
                                                    };
                                                    data[token] = 1;

                                                    var loading = $('<i class="fa fa-spinner fa-spin fa-2x"></i>');
                                                    $(this).prepend(loading);
                                                    $(this).attr("disabled", "disabled");
                                                    var self = $(this);

                                                    $.post(window.YKS.reGenerateExamLicense, data).done(function (data) {
                                                        data = $.parseJSON(data);
                                                        loading.remove();
                                                        self.removeAttr("disabled");

                                                        if (data.status == "ok") {
                                                            self.parents(".license-code").find("pre").text(data.license);
                                                            self.siblings().filter("button.copydata").attr("data-clipboard-text", data.license);
                                                            $("#exams-list .license-title").text(window.OELang.licenseValue.format(data.license));
                                                        }
                                                    }).fail(function (data) {
                                                        loading.remove();
                                                        self.removeAttr("disabled");
                                                    })
                                                });
                                                $("#foreign-share-btn-group").on("click","span",function(e){
                                                    e.preventDefault();
                                                    e.stopPropagation();
                                                    var self = $(this);
                                                    var url = self.data("url");
                                                    var dataDest = self.data("dest");
                                                    if(dataDest == "googleplus"){
                                                        window.open('https://plus.google.com/share?url='+encodeURIComponent(url));
                                                    }else if(dataDest == "facebook"){
                                                        window.open('https://www.facebook.com/sharer/sharer.php?u='+encodeURIComponent(url));
                                                    }else if(dataDest == "twitter"){
                                                        window.open('https://twitter.com/home?status='+encodeURIComponent(url));
                                                    }

                                                })
                                                $(".close-btn").on("click",function(){
                                                    shareBox.close();
                                                })
                                            }
                                        },
                                        onCloseComplete:function(e){
                                            $('.sosh-pop').remove();
                                            shareBox.destroy();
                                        }
                                    });
                                    shareBox.open();
                                }
                                $(".releaseBtn").find(".fa-spinner").remove();
                                $(".releaseBtn").removeClass("disabled");
                            }
                        });
                    }else {
                        $(".releaseBtn").find(".fa-spinner").remove();
                        $(".releaseBtn").removeClass("disabled");
                    }

                })
            }

        });

        return {
            initScoreRange: function(ranges){
                $("input[name='score-ranges']").val('');
                ranges = ranges ===undefined?[]:ranges;
                if(ranges.length <= 1){
                    addScoreRange(100, '', true,"score-range-lists","score-range-item","score-ranges");
                }else{
                    ranges.sort(function(a,b){
                        return a.point - b.point;
                    })
                    var have100 = false;
                    ranges = ranges.filter(function(item){
                        if( item.point == 100){
                            if(!have100){
                                have100 = true;
                                return true;
                            }
                            return false;
                        }
                        return true;
                    })
                    for(var i=0; i<ranges.length; i++){
                        addScoreRange(ranges[i].point, ranges[i].tip, true,"score-range-lists","score-range-item","score-ranges");
                        if(ranges[i].point!=100) addSlideHandle($("#slider-comments"),ranges[i].point);
                    }
                }
            },

            initIntegralRange: function(ranges){
                $("input[name='integral-ranges']").val('');
                ranges = ranges ===undefined||ranges===0?[]:ranges;
                if(ranges.length <= 1){
                    addScoreRange(100, '', true,"integral-range-lists","integral-range-item","integral-ranges");
                }else{
                    ranges.sort(function(a,b){
                        return a.point - b.point;
                    })
                    var have100 = false;
                    ranges = ranges.filter(function(item){
                        if( item.point == 100){
                            if(!have100){
                                have100 = true;
                                return true;
                            }
                            return false;
                        }
                        return true;
                    })
                    for(var i=0; i<ranges.length; i++){
                        addScoreRange(ranges[i].point, ranges[i].integral, true,"integral-range-lists","integral-range-item","integral-ranges");
                        if(ranges[i].point!=100) addSlideHandle($("#slider-integral"),ranges[i].point);
                    }
                }
            },

            initScoreRangePoints: function(ranges){
                $("input[name='score-ranges-points']").val('');
                ranges = ranges ===undefined?[]:ranges;
                if(ranges.length <= 1){
                    addScoreRangePoints(100, '', true);
                }else{
                    ranges.sort(function(a,b){
                        return a.point - b.point;
                    })
                    var have100 = false;
                    ranges = ranges.filter(function(item){
                        if( item.point == 100){
                            if(!have100){
                                have100 = true;
                                return true;
                            }
                            return false;
                        }
                        return true;
                    })
                    for(var i=0; i<ranges.length; i++){
                        addScoreRangePoints(ranges[i].point, ranges[i].tip, true);
                        if(ranges[i].point!=100) addSlideHandlePoints(ranges[i].point);
                    }
                }
            }
        }
    }

    
    /**
     * 试题编辑界面
     */
    function setupEditQuestionPage(iscn, token) {
        var lastSelectQtid = $(".question-type-list").data("last-qtid");
        var $quesEditCtn = $('#questionContainer');
        $quesEditCtn.on('click', 'a[action="optionSelect"]', function (e) {
            e = e || window.event;
            e.preventDefault();
            var type = $(this).attr("type"), prefix = $(this).attr("prefix"),
                maxOption = parseInt($(this).attr("maxoption")), index = $(this).attr("index"),
                liId = prefix + index;
            if (type == "singleSelect") {
                $("#right_answer").val(index);
                $("li[id^='"+prefix+"']").removeClass("selected");
                $("#" + prefix + index).addClass("selected");
            } else {
                var a = [];
                if ($("#right_answer").val() != '')
                    a = $("#right_answer").val().split(",")
                if ($("#" + prefix + index).hasClass("selected")) {
                    $("#" + prefix + index).removeClass("selected");
                    a.splice(a.indexOf(index), 1);
                } else {
                    $("#" + prefix + index).addClass("selected");
                    a.push(index);
                }
                $("#right_answer").val(a.join(","));
            }
        });
        $quesEditCtn.on('click', 'a[href="#addnewanswer"]', function(e){
            e = e || window.event;
            e.preventDefault();
            e.stopPropagation();
            var $a = $(e.target),
                parent = $a.parent(),
                index = Number($("input[name='anscounts']").val()),
                idx = $("input[name='jform[ansids]']").val().split(','),
                charv = String.fromCharCode(65 + idx.length),
                tmp = $("#newanswertmp").text();

            $("input[name='anscounts']").val(index+1);
            tmp=tmp.format(charv, index);

            idx.push(index);
            $("input[name='jform[ansids]']").val(idx.join(','));
            var target = $('<div class="form-group answers"></div>').insertBefore(parent).html(tmp);
            initTextAreaEdit(target.find("textarea"));

            //add answer right options
            var lastOption = $("a[action='optionSelect']").last(),
                prefix = lastOption.attr("prefix"),
                outHtml = lastOption[0].outerHTML,
                newAOption = $(outHtml);

            newAOption.attr("index", index);
            newAOption.html("("+charv+")");
            //newAOption.on("click", optionClickFun);

            var newLiOption = $("<li id='"+prefix+index+"'></li>")
                .insertAfter(lastOption.parent()).append(newAOption);

            //if(prefix === 'multipleChoiceOp' || prefix === "multipleResponseOp"){
                //增加一个选项分数
                var opsTmpl = $(".option-score").last()[0].outerHTML;
                var newOps = $(opsTmpl);
                newOps.children().first().find("b").html("("+charv+")");
                newOps.find("input").attr("name", "jform[ops_score_"+index+"]");
                $(".option-scores").append(newOps);
            //}

            //增加选项删除按钮
            var $ops = $('.form-group.answers');
            $ops.each(function (i, dom) {
                var $opi = $(dom);
                var $ebg = $opi.children('.edit-btn-group');
                var $i = $ebg.find('i.fa-trash');
                if ($i.length === 0) {
                    $i = $('<i class="fa fa-trash fa-lg" aria-hidden="true" title="' + window.OELang._delete + '"></i>');
                    $ebg.append($i);
                }
                $opi.children('textarea').attr('id', 'ans' + i);
            });
        });
        $quesEditCtn.on('click', 'a[href="#addnewblank"]', function(e){
            e = e || window.event;
            e.preventDefault();
            e.stopPropagation();
            var self = $(this),
                parent = $(this).parent(),
                idx = $("input[name='jform[ansids]']").val().split(','),
                index = Math.max.apply(null, idx) + 1,
                charv = String.fromCharCode(65 + index),
                tmp = $("#blankanstmp").text();
            tmp = tmp.format(charv, index);
            idx.push(index);
            $("input[name='jform[ansids]']").val(idx.join(','));
            $('<div class="form-group answers"></div>').insertBefore(parent).html(tmp);

            var $cinput = $('input[name="anscounts"]'), count = parseInt($cinput.val());
            $cinput.val(count += 1);

            var $ops = $('.form-group.answers');
            $ops.each(function (i, dom) {
                var $opi = $(dom);
                var $ebg = $opi.find('.edit-btn-group');
                var $trash = $ebg.find('i.fa-trash'), $up = $ebg.find('i.fa-arrow-up'),
                    $down = $ebg.find('i.fa-arrow-down');
                if ($up.length === 0 || $down.length === 0 || $trash.length === 0) {
                    $ebg.append($('<i class="fa fa-arrow-up fa-lg" aria-hidden="true" title="' + window.OELang.moveUp + '"></i>&ensp;' +
                        '<i class="fa fa-arrow-down fa-lg" aria-hidden="true" title="' + window.OELang.moveDown + '"></i>&ensp;' +
                        '<i class="fa fa-trash fa-lg" aria-hidden="true" title="' + window.OELang._delete + '"></i>'))
                }
                $opi.children('textarea').attr('id', 'ans' + i);
            });
            upBlankTotalScore();
        });
        var upBlankTotalScore = function () {
            $("#points").val($("input[id^='ans_score']").map(function(){
                return Number($(this).val())
            }).get().reduce(function(acc, val){
                return acc+val
            }));
        };
        $quesEditCtn.on("change", "input[id^='ans_score']", function (e) {
            upBlankTotalScore();
        });
        $quesEditCtn.on("click", ".edit-btn-group i.fa-trash", function(e){
            e = e || window.event;
            e.preventDefault();
            e.stopPropagation();
            var $target = $(e.target), $fbop = $target.closest('.fillinblank-option'),
                $cinput = $('input[name="anscounts"]'), count = parseInt($cinput.val());
            var mincount = $fbop.length > 0 ? 1 : 2;
            if (count <= mincount) return;
            var $op = $target.closest('.answers'),
                $input = $('input[name="jform[ansids]"]'),
                aids = $input.val().split(',');
            $op.remove();
            $cinput.val(count -= 1);
            aids.pop();
            $input.val(aids.join(','));
            var $ops = $('.form-group.answers');
            if ($fbop.length > 0) {//填空题
                $ops.each(function (i, dom) {
                    var $opi = $(dom);
                    $opi.children('.answer_heading').find('h5').text('(' + String.fromCharCode(65 + i) + ')');
                    var $ainput = $opi.children('.fillinblank-option').find('input.fillinblank-blank');
                    var $asinput = $opi.children('.fillinblank-option').find('input.fillinblank-blank-answer');
                    $ainput.attr('id', 'ans' + i);
                    $ainput.attr('name', 'jform[ans' + i + ']');
                    $asinput.attr('id', 'ans_score_' + i);
                    $asinput.attr('name', 'jform[ans_score_' + i + ']');
                    if (count <= mincount) {
                        $opi.find('.edit-btn-group').empty();
                    }
                });
                //触发change事件，更新填空题总分
                upBlankTotalScore();
            } else {//选择题
                $ops.each(function (i, dom) {
                    var $opi = $(dom);
                    $opi.children('.answer_heading').find('h5').text('(' + String.fromCharCode(65 + i) + ')');
                    $opi.children('textarea').attr('id', 'ans' + i);
                    if (count <= mincount) {
                        $opi.children('.edit-btn-group').find('i.fa-trash').remove();
                    }
                });
                $('.option-scores').children('.option-score:last-of-type').remove();
                $('ul.TestAnswer').children('li:last-of-type').remove();
                //因删除选项导致选项顺序改变，移除原有的已选正确选项
                $('ul.TestAnswer').children('li').removeClass('selected');
                $('#right_answer').val('');
            }
        });

        /*===选项移动功能=== xiguzai 2017.12.13*/
        $quesEditCtn.on('click', '.edit-btn-group i.fa-arrow-up, .edit-btn-group i.fa-arrow-down', function (e) {
            e = e || window.event;
            e.preventDefault();
            e.stopPropagation();
            var $target = $(e.target);
            if (!$target.hasClass('fa-arrow-up') && !$target.hasClass('fa-arrow-down')) return;
            var $top = $target.closest('.answers');
            if ($target.hasClass('fa-arrow-up')) {
                var $pop = $top.prev('.answers');
                if ($pop.length > 0) {
                    $pop.before($top);
                }
            } else if ($target.hasClass('fa-arrow-down')) {
                var $nop = $top.next('.answers');
                if ($nop.length > 0) {
                    $nop.after($top);
                }
            }
            var $fbop = $target.closest('.fillinblank-option');
            var $ops = $('.form-group.answers');
            if ($fbop.length > 0) {//填空题
                $ops.each(function (i, dom) {
                    var $opi = $(dom);
                    $opi.children('.answer_heading').find('h5').text('(' + String.fromCharCode(65 + i) + ')');
                    var $ainput = $opi.children('.fillinblank-option').find('input.fillinblank-blank');
                    var $asinput = $opi.children('.fillinblank-option').find('input.fillinblank-blank-answer');
                    $ainput.attr('id', 'ans' + i);
                    $ainput.attr('name', 'jform[ans' + i + ']');
                    $asinput.attr('id', 'ans_score_' + i);
                    $asinput.attr('name', 'jform[ans_score_' + i + ']');
                });
            } else {//选择题
                $ops.each(function (i, dom) {
                    var $opi = $(dom);
                    $opi.children('.answer_heading').find('h5').text('(' + String.fromCharCode(65 + i) + ')');
                    $opi.children('textarea').attr('id', 'ans' + i);
                });
                //因移动选项导致选项顺序改变，移除原有的已选正确选项
                $('ul.TestAnswer').children('li').removeClass('selected');
                $('#right_answer').val('');
            }
            var $sceditor = $top.children('textarea');
            $sceditor.sceditor('instance').destroy();
            initTextAreaEdit($sceditor);
        });
        /*===选项移动功能=== xiguzai 2017.12.13*/

        var parseKeywordsValues = function(){
            var json = $("input[name='jform[keywords]']").val();
            try{
                var keywords = JSON.parse(json);
                if(keywords){
                    for(var i=0; i<keywords.length; i++){
                        $($(".keyword-template").html().trim().format(keywords[i].keyword, keywords[i].score)).appendTo($(".keywords-list"))
                    }
                }
            }catch (e){

            }
        }
        var updateKeywordsValue = function(){
            var keywords = [];
            $(".keywords-list .keyword > .info").each(function(){
                keywords.push({
                    keyword: $(this).find("span:first-child").text(),
                    score: Number($(this).find("span:last-child > b").text())
                })
            })
            $("input[name='jform[keywords]']").val(JSON.stringify(keywords));
        }
        var updateScore = function(){
            var score = 0;
            $(".keywords-list .keyword > .info span:last-child > b").each(function(){
                score += Number($(this).text());
            })
            $("#points").val(score<0?1:score);
        }
        var getStringLength = function(string){
            var length = 0;
            var reg = /[\u4e00-\u9fa5]{1}/g,
                notReg = /\w{1}/g;
            var Cn = string.match(reg);
            var En = string.match(notReg);
            if(Cn){
                length = length + Cn.length*2;
            }
            if(En){
                length = length + En.length
            }
            return length;
        }
        var keywordDialog = function(dom){
            var dialog = NW.showDialog(
                $("#keyword-editor").html(), [
                    {
                        label: window.OELang.cancel,
                        onClick: function(){
                            dialog.close();
                        }
                    },
                    {
                        label: window.OELang.sure,
                        id: 'add-keyword',
                        onClick: function(){
                            var keyword = $(".jBox-content input[name='essay-keyword']").val(),
                                score = Number($(".jBox-content input[name='essay-score']").val());
                            if(getStringLength(keyword) > 20){
                                NW.messageBox(window.OELang.notice,window.OELang.inputMaxLengthTips.format(20))
                                return
                            }
                            if(keyword !="" && score > 0 ){
                                if(dom){
                                    dom.find(".info span:first-child").text(keyword);
                                    dom.find(".info span:last-child > b").text(score);
                                }else{
                                    $($(".keyword-template").html().trim().format(keyword, score)).appendTo($(".keywords-list"))
                                }

                                //更新分数
                                updateScore();
                                dialog.close();
                                updateKeywordsValue();
                            }else{
                                $(".jBox-content input[name='essay-keyword']").focus();
                                if(score<=0){
                                    $(".jBox-content input[name='essay-score']").focus();
                                }
                            }
                        },
                        primary: true
                    }
                ], window.OELang.edit
            );
            if(dom){
                $(".jBox-content input[name='essay-keyword']").val(dom.find(".info span:first-child").text())
                $(".jBox-content input[name='essay-score']").val(Number(dom.find(".info span:last-child > b").text()));
            }
        }

        $quesEditCtn.on("click", "button.add-essay-keyword", function(e){
            /**问答题关键字--2018.2.26**/
            keywordDialog(null);
        }).on("click", ".keyword > .action > .edit", function(e){
            keywordDialog($(this).parents(".keyword"));
        }).on("click", ".keyword > .action > .delete", function(e){
            $(this).parents(".keyword").remove();
            updateKeywordsValue();
            updateScore();
        })

        var initTextAreaEdit = function (ids) {
            if (!ids || ids == "")
                return;

            var option = {
                plugins: 'bbcode',
                toolbar: "bold,italic,underline,strike,color,size|orderedlist,bulletlist,table|link,unlink|image|superscript,subscript,pastetext|source",
                emoticonsEnabled: false,
                resizeEnabled: true,
                disablePasting: false,
                enablePasteFiltering: false,
                bbcodeTrim: true,
                parserOptions:{
                    removeEmptyTags:false,
                },
                style: $("#questionedit_form").data("sceditstyle"),
                autoUpdate: true
            };
            if(iscn){
                option["locale"] = "zh-cn";
            }
            $(ids).sceditor(option);
        }

        var validateFormdata = function () {
            function scrollTo(target) {
                $('html, body').animate({
                    scrollTop: target.offset().top
                }, 500);
            }
            var qtitle = $("#question").val(),
                a0 = $("#ans0").val(),
                a1 = $("#ans1").val(),
                a2 = $("#ans2").val(),
                a3 = $("#ans3").val(),
                answers=$("textarea[id^='ans']"),
                ra = $("#right_answer").val(),
                qtid = Number($("#qtid").val());


            if ($.trim(qtitle).length == 0) {
                alert($("#questionedit_form").data("notitle"));
                scrollTo($("#question").parent());
                $("#question").sceditor('instance').focus();
                return false;
            }

            if(qtid<0){
                alert("");
            }
            if(qtid == 4) { //fill in the blank
                answers = $("input[id^='ans']");
                var haveOneAnswer = false;
                answers.each(function (index, el) {
                    haveOneAnswer = haveOneAnswer || $(el).val() != '';
                });
                if (!haveOneAnswer) {
                    alert($("#questionedit_form").data("lessanswer"));
                    scrollTo($("#ans0").parent());
                    return false;
                }
            }else if(qtid==5){
                if($("#autograde").is(":checked")){
                    //检查关键字数量
                    if($(".keywords-list .keyword").length <=0){
                        alert($(".keywords-list").data("nokeywords"));
                        scrollTo($(".keywords-list"));
                        $("button.add-essay-keyword").click();
                        return false;
                    }
                }
            }else if ([3, 6].indexOf(qtid) > -1 ) {

            } else {
                if(answers.length>4){
                    var haveEmpty = false;
                    $("textarea[id^='ans']").each(function(index, el){
                        if($(el).val().trim()==""){
                            var index = Number( $(el).attr("id").replace("ans", "") );
                            if( index < 3 ){
                                //only checks the first three
                                alert($("#questionedit_form").data("couldnotbeempty"));
                                scrollTo($(el).parent());
                                $("#"+$(el).attr("id")).sceditor('instance').focus();
                                haveEmpty = true;
                                return false;
                            }

                        }
                    });
                    if(haveEmpty) return false;
                }else{
                    if ($.trim(a0).length == 0) {
                        alert($("#questionedit_form").data("inputa"));
                        scrollTo($("#ans0").parent());
                        $("#ans0").sceditor('instance').focus();
                        return false;
                    }
                    if ($.trim(a1).length == 0) {
                        alert($("#questionedit_form").data("inputb"));
                        scrollTo($("#ans1").parent());
                        $("#ans1").sceditor('instance').focus();
                        return false;
                    }
                }
            }

            if (qtid != 4 && qtid!=5 && qtid != 6 && $.trim(ra).length == 0) {
                alert($("#questionedit_form").data("selectright"));
                scrollTo($("#right_answer").parent());
                return false;
            }

            if(qtid == 6) {
                if($('#questionedit_form .package-child-question').find(".child-question").length <= 0) {
                    alert(window.OELang.atLeastAddOneChildQuestion);
                    return false;
                }
            }

            var hasEmptyAnswer = false;
            $("textarea[id^='ans']").each(function(index, el){
                if($(el).val().trim()==""){
                    var index = Number( $(el).attr("id").replace("ans", "") );
                    alert(window.OELang.questionsAnswerCouldNotBeEmpty);
                    scrollTo($(el).parent());
                    $("#"+$(el).attr("id")).sceditor('instance').focus();
                    hasEmptyAnswer = true;
                    return false;
                }
            });
            if(hasEmptyAnswer) return false;


            return true;
        }

        var questionTypeSelected = function () {
            $("#questionContainer").html("");
            $("#questionContainer").html(jQuery("#question" + lastSelectQtid).html());
            $($("#question")[0]).focus();


            if (window.QuestionCatids) {
                $("#catid").html(window.QuestionCatids);
            }

            initTextAreaEdit("textarea");
            initQuestionLabel(".question-labels-selector");
            parseKeywordsValues();
        }

        var initQuestionLabel = function (ids) {
            if (!ids || ids == "")
                return;
            var labelData = $('input[name="labeldata"]').val();

            var labelData = JSON.parse(labelData)
            var noRestultTips = $(ids).data("noresult");
            var strOverTips = $(ids).data("overlength");
            var eventSelect = $(ids).select2({
                data:labelData,
                tags:true,
                maximumInputLength:20,
                placeholder: 'Select an option',
                language:{
                    noResults:function(){
                        return noRestultTips;
                    },
                    inputTooLong:function(){
                        return strOverTips;
                    }
                },
                createTag:function(params){
                    var term = $.trim(params.term);
                    if(term === ''){
                        return null;
                    }
                    // if(term.length > 20){
                    //     alert(strOverTips);
                    //     return false;
                    // }
                    return{
                        id:term,
                        text:term,
                        newTag:true
                    }
                }
            });
            $('span.select2-selection.select2-selection--multiple').on("click",function(e){
                $('input.select2-search__field').addClass("valid");
                $('input.select2-search__field.valid').focus();
            })

            //当前选择的标签
            var currentSelectLabelId = -1;
            var currentSelectLabelText = "";
            eventSelect.on("select2:selecting",function(e){
                currentSelectLabelId = e.params.args.data.id;
                currentSelectLabelText = e.params.args.data.text;

            })

            eventSelect.on("select2:select",function(e){
                var dataArray = $(ids).select2('data');

                var selectedLabels = [];
                var labelsShow = [];

                for(var i =0;i < dataArray.length; i++){
                    var text = dataArray[i].text;
                    var id = dataArray[i].id;

                    if(id <= 3 && id > 0 && id !== currentSelectLabelId && currentSelectLabelId <= 3 && currentSelectLabelId > 0) continue;

                    labelsShow.push(id);
                    if(text === id){
                        id= "0";
                    }
                    selectedLabels.push({
                        id: id,
                        text: text
                    })

                }
                eventSelect.val(null).trigger("change");
                eventSelect.val(labelsShow).trigger("change");
                $('input[name="jform[qlabels]"]').val(JSON.stringify(selectedLabels));
                prominentSystemLabel();

            })
            eventSelect.on("select2:unselect",function(e){
                var dataArray = $(ids).select2('data');
                var selectedLabels = [];
                for(var i =0;i < dataArray.length; i++){
                    var text = dataArray[i].text;
                    var id = dataArray[i].id;
                    if(text === id){
                        id= "0";
                    }
                    selectedLabels.push({
                        id: id,
                        text: text
                    })
                }
                $('input[name="jform[qlabels]"]').val(JSON.stringify(selectedLabels))
                prominentSystemLabel();
            })

            var prominentSystemLabel = function () {
                var labelTitle1 = $(ids).data("simpletext");
                var labelTitle2 = $(ids).data("mediumtext");
                var labelTitle3 = $(ids).data("difficulttext");
                $('.select2-selection__rendered .select2-selection__choice[title="{0}"]'.format(labelTitle1)).addClass("system-label");
                $('.select2-selection__rendered .select2-selection__choice[title="{0}"]'.format(labelTitle2)).addClass("system-label");
                $('.select2-selection__rendered .select2-selection__choice[title="{0}"]'.format(labelTitle3)).addClass("system-label");

                $('.select2-selection__rendered .select2-selection__choice[title="{0}"]'.format(labelTitle1)).find(".select2-selection__choice__remove").addClass("system-label-remove");
                $('.select2-selection__rendered .select2-selection__choice[title="{0}"]'.format(labelTitle2)).find(".select2-selection__choice__remove").addClass("system-label-remove");
                $('.select2-selection__rendered .select2-selection__choice[title="{0}"]'.format(labelTitle3)).find(".select2-selection__choice__remove").addClass("system-label-remove");
            }

            //初始化
            var selectLabelId = JSON.parse($('input[name="selectlabeldata"]').val());
            if(selectLabelId.length > 0){
                $(ids).val(selectLabelId); // Select the option with a value of '1'
                $(ids).trigger('change'); // Notify any JS components that the value changed
            }
            prominentSystemLabel();

            $(".labels-container").on("click","a.btn",function(evt){
                var currentId = $(this).data("id");
                var currentText = $(this).data("text");
                var dataArray = $(ids).select2('data');
                var selectedLabels = [];
                var labelsShow = [];

                if(dataArray.length == 0){
                    labelsShow.push(currentId);
                    selectedLabels.push({
                        id: currentId,
                        text: currentText
                    })
                }else{
                    var hasSysLabel = false;
                    var isChangeLabel = false;
                    for(var i =0;i < dataArray.length; i++){
                        var text = dataArray[i].text;
                        var id = parseInt(dataArray[i].id);

                        if(id <= 3 && id > 0 && id !== currentId && currentId <= 3 && currentId > 0){
                            labelsShow.push(currentId);
                            selectedLabels.push({
                                id: currentId,
                                text: currentText
                            })
                            hasSysLabel = true;
                            isChangeLabel = true;
                            continue;
                        }else if(id <= 3 && id > 0 && id === currentId && currentId <= 3 && currentId > 0){
                            isChangeLabel = true;
                            continue;
                        }
                        if(isNaN(id)){

                            labelsShow.push(text);
                        }else{
                            labelsShow.push(id);
                        }
                        if(text === id){
                            id= "0";
                        }
                        selectedLabels.push({
                            id: id,
                            text: text
                        })
                    }
                    if(!hasSysLabel && !isChangeLabel){
                        labelsShow.push(currentId);
                        selectedLabels.push({
                            id: currentId,
                            text: currentText
                        })
                    }
                }

                eventSelect.val(null).trigger("change");
                eventSelect.val(labelsShow).trigger("change");
                $('input[name="jform[qlabels]"]').val(JSON.stringify(selectedLabels));
                prominentSystemLabel();
            })
        }

        $(".question-type-list ul li").bind("click", function () {
            $(".question-type-list ul li[qtid='" + lastSelectQtid + "']").removeClass("selected");
            lastSelectQtid = jQuery(this).attr("qtid");
            $(".question-type-list ul li[qtid='" + lastSelectQtid + "']").addClass("selected");
            $("#qtid").val(lastSelectQtid);
            questionTypeSelected();
            return false;
        });

        $(document).on("change", 'input[name="jform[param][option_have_score]"]', function (e) {
            if($(this).is(':checked')){
                $(".option-scores").slideDown(500);
                var value = 0;
                $("input[name^='jform[ops_score_']").map(function(){
                    var v = Number($(this).val());
                    if(Number($("#qtid").val()) == 1){
                        value =  v>value?v:value;
                    }else{
                        value += v;
                    }
                })
                $("#points").attr("readonly", true).val(value);
            }else{
                $(".option-scores").slideUp(500);
                $("#points").attr("readonly", false);
            }
        }).on("change", 'input[name^="jform[ops_score_"]', function (e) {
            var value = 0;
            $("input[name^='jform[ops_score_']").map(function(){
                var v = Number($(this).val());
                //选项分数不能<0
                if(v < 0){
                    $(this).val(1);
                    alert(window.OELang.optionScoreShouldBeGreaterThanZero);
                }
                if(Number($("#qtid").val()) == 1){
                    value =  v>value?v:value;
                }else{
                    value += v;
                }
            })
            $("#points").val(value);
        }).on("click", ".child-operator > a[href='#edit']", function(e){
            e.preventDefault();
            var packageQuestion = $(this).parents('.package-child-question'),
                qid = packageQuestion.data('child-qid'),
                qtype = packageQuestion.data("qtype");

            EditQuestion(qid, function( qid, qtitle, qcate, point){
                $.get(window.YKS.questionRaw, {qid: qid}).done(function(rdata){
                    $(".package-child-question[data-child-qid='{0}']".format(qid)).find(".child-question").html(rdata);
                    $(".package-child-question[data-child-qid='{0}']".format(qid)).data("points", point);
                    var totalPoints = 0;
                    $('#questionContainer').find('.package-child-question').each(function(){
                        var points = Number($(this).data('points'));
                        if($(this).hasClass('new-package-child')){
                        }else {
                            totalPoints += points;
                        }
                    })
                    if($('#questionContainer').find('.package-child-question').length > 0 ) {
                        $('#questionContainer').find('#points').val(totalPoints);
                    }
                })
            }, {
                filterqtype: qtype
            })
        }).on("click", ".child-operator > a[href='#delete']", function(e){
            var packageQuestion = $(this).parents('.package-child-question'),
                cqid = packageQuestion.data('child-qid'),
                qid = packageQuestion.data('pqid'),
                qtype = packageQuestion.data("qtype");
            var clicker = $(this);

            e.preventDefault();
            NW.showConfirmDialog( window.OELang.areYouSureToDelete.format(packageQuestion.find(".ques-title").text().substr(0, 10)), function(resp){
                if(resp == 'yes'){
                    var options = $("input#{0}".format('child-questions-ids')).val();
                    options = options.split(',').map(function(item){
                        return Number(item);
                    })
                    if( options.indexOf(cqid) > -1 ) options.splice( options.indexOf(cqid), 1 );
                    $(".package-child-question[data-child-qid='{0}']".format(cqid)).slideUp(1000, function(){
                        $(this).remove();
                    })
                    $("input#{0}".format('child-questions-ids')).val(options.join(','));
                }
            })
        }).on("click", ".package-child-question  > a[href='#new']", function(e){
            e.preventDefault();
            var packageQuestion = $(this).parents('.package-child-question'),
                pqid = packageQuestion.data('pqid'),
                qtype = packageQuestion.data("qtype");

            EditQuestion(0, function( qid, qtitle, qcate, point ){
                $.get(window.YKS.questionRaw, {qid: qid}).done(function(rdata){
                    var tmp = '<div class="package-child-question" data-pqid="{0}" data-child-qid="{1}" data-qtype="{2}" data-points="{6}">' +
                        '   <div class="child-question">' +
                        '       {3}' +
                        '   </div>' +
                        '   <div class="child-operator">' +
                        '       <a href="#edit" class="btn btn-default">{4}</a>' +
                        '       <a href="#delete" class="btn btn-default">{5}</a>' +
                        '   </div>' +
                        '</div>';
                    $(tmp.format(pqid, qid, qtype, rdata, window.OELang.edit, window.OELang._delete, point)).insertBefore(packageQuestion).hide().slideDown();

                    var options = $("input#{0}".format('child-questions-ids')).val();
                    if(options == ''){
                        options = [];
                    }else{
                        options = options.split(',').map(function(item){
                            return Number(item);
                        })
                    }

                    options.push(qid);
                    $("input#{0}".format('child-questions-ids')).val(options.join(','));


                    var totalPoints = 0;
                    $('#questionContainer').find('.package-child-question').each(function(){
                        var points = Number($(this).data('points'));
                        if($(this).hasClass('new-package-child')){
                        }else {
                            totalPoints += points;
                        }
                    })
                    if($('#questionContainer').find('.package-child-question').length > 0 ) {
                        $('#questionContainer').find('#points').val(totalPoints);
                    }
                })
            }, {
                filterqtype: qtype
            })
        })
        //**from表单控件**//
        var validator = $('#questionedit_form').validate({
            debug: true,
            onkeyup: false,
            onclick: false,
            errorElement: 'p',
            errorPlacement: function(error, element) {
                // Append error within linked label
                $(element).closest('.answers').append(error);
            }
        });

        //****//
        $("#savelink").bind("click", function () {
            if (!validator.form()) return;
            if (validateFormdata()) {
                NW.makeLoading($(this));
                var form = document.getElementById('questionedit_form');
                form.task.value = Number($("#questionedit_form").data("qid")) == 0 ? "question.save2new" : "question.save";
                form.submit();
            }
            return false;
        });

        questionTypeSelected();

        $('#questionContainer').on('click', '#edit-medias i.fa-trash', function (e) {
            var b = confirm(window.OELang.deleteMediaFileConfirmPrompt);
            if (b) {
                var $target = $(e.target);
                var $media = $target.parent();
                $media.remove();
                var $input = $('<input type="hidden" name="jform[dfiles][]" value="' + $media.data('url') + '"/>');
                $('#medias-deleted').append($input);
            }
        });

        $('#questionContainer').on('click', '#add-media-file', function () {
            var jbox, file;
            var $content = $('#upload-file-dialog');
            var $confirm = $content.find('input[name="confirm"]');
            var $cancel = $content.find('input[name="cancel"]');
            //var $open = $content.find('span[name="open"]');
            var $uri = $content.find('input[name="uri"]');
            var $mf = $content.find('#media-file');
            var addMediaItemEl = function (url) {
                var $medias = $('#medias');
                var $mi = $('<div class="form-group media-item"></div>');
                var $label = $('<label>' + window.OELang.media + ($medias.children('.media-item').length + 1) + ':</label>');
                var $input = $('<input type="hidden" name="jform[param][files][]" value="' + url + '">');
                var $i = $('<i class="fa fa-trash" aria-hidden="true"></i>');
                $mi.append($label);
                if (/^\S+\.mp3$/.test(url)) {
                    var $ac = $('<div class="audio-container"></div>');
                    var $audio = $('<audio src="' + url + '" controls>' + window.OELang.browserNotSupportAudioPrompt + '</audio>');
                    $ac.append($audio);
                    $mi.addClass('audio-item');
                    $mi.append($ac);
                } else if (/^\S+\.mp4/.test(url)) {
                    var $vc = $('<div class="video-container"></div>');
                    var $video = $('<video src="' + url + '" controls>' + window.OELang.browserNotSupportVideoPrompt + '</video>');
                    $vc.append($video);
                    $mi.addClass('video-item');
                    $mi.append($vc);
                }
                $mi.attr('data-url', url);
                $mi.append($input);
                $mi.append($i);
                $medias.append($mi);
            };
            return function (e) {
                var e = e || window.event;
                e.preventDefault();
                e.stopPropagation();
                if (!jbox) {
                    jbox = new jBox('Modal', {
                        title: window.OELang.addMedia,
                        content: $content,
                        width: 566,
                        height: 312,
                        closeButton: 'title',
                        closeOnEsc: true,
                        onOpen: function () {
                            $uri.val('');
                            file = null;
                            NW.makeUnLoading($confirm);
                        }
                    });
                    $confirm.on('click', function () {
                        var uri = $uri.val().trim();
                        if (uri === '') {
                            jbox.close();
                            return;
                        } else if (!/(\.mp3|mp4)$/i) {
                            alert(window.OELang.linkOrFileMimeTypeErr);
                            return;
                        }
                        NW.makeLoading($confirm);
                        if (/^http(s)?:\/\/\S+(\.mp3|\.mp4)$/i.test(uri)) {
                            addMediaItemEl(uri);
                        } else {
                            if (file && file.submit !== undefined) {
                                file.submit();//接下来的处理程序跳转到fileupload done or fail and always
                            }
                        }
                        jbox.close();
                    });
                    $cancel.on('click', function () {
                        jbox.close();
                    });
                    $mf.fileupload({
                        url: 'index.php?option=com_exams&task=Uploader.mediaFileUpload',
                        dataType: 'json',
                        formData: [{
                            name: token,
                            value: 1
                        }],
                        add: function (e, data) {
                            if (data.files[0].size > 2097152) {
                                alert(window.OELang.uploadErrFileSizeLimitPrompt.replace('%s', ' 2M'));
                                return;
                            }
                            var mime = data.files[0].type;
                            if(['audio/mp3', 'video/mp4'].indexOf(data.files[0].type) <0 ){
                                alert(window.OELang.mediaFileSupportPrompt);
                                return;
                            }
                            file = data;
                            $uri.val(file.files[0].name);
                        },
                        done: function (e, data) {
                            var result = data.result;
                            if (result.code === 0) {
                                addMediaItemEl(result.url);
                            } else {
                                alert(result.message);
                            }
                        },
                        fail: function(e, data) {
                            alert(window.OELang.uploadFileFailPrompt)
                        },
                        always: function(e, data) {
                            jbox.close();
                            NW.makeUnLoading($confirm);
                        }
                    });
                }
                jbox.close();
                jbox.open();
            };
        }());

        //**填空题选择按空得分的分数限制**//
        $quesEditCtn.on("click", "input[name='jform[param][blankhavescore]']", function () {
            if($(this).is(":checked")){
                $quesEditCtn.find('#points').attr('readonly','readonly');
            }else{
                $quesEditCtn.find('#points').removeAttr('readonly');
            }
        });
        //****//
    }


    /**
     * 分类管理界面
     */
    function setupCategoriesPage(token){
        var examCategoryGrid = $.nAjaxTable($("#exam-categories"), window.YKS.listcategroies, {
            type:1
        });
        var questionCategoryGrid = $.nAjaxTable($("#question-categories"), window.YKS.listcategroies, {
            type:2
        });

        $("#categories-list").on("click", "a[href='#edit']", function (e) {
            e.preventDefault();

            var catid = $(this).attr("catid");
            var holder = $("span[catid='" + catid + "'");


            if( $(this).hasClass("editing")){
                holder.find("input").focus();
                return;
            }

            $(this).addClass("editing");

            var value = holder.text();
            var self = $(this);
            holder.html("<input class='form-control' style='display:inline; width:300px' value='" + value + "' /> <a class='btn green' href='#ok'>"+window.OELang.modify+"</a> <a class='btn btn-default' href='#cancel'>"+window.OELang.cancel+"</a>");
            holder.find("a[href='#ok']").click(function (evt) {
                evt.preventDefault();
                self.removeClass("editing");
                $(this).html(window.OELang.modifing);
                $(this).attr("disabled", "disabled");

                var data = {
                    catid: catid,
                    title: holder.find("input").val()
                };
                data[token] = 1;
                $.post(window.YKS.modifyCategory, data , function (data) {
                    holder.html(holder.find("input").val());
                });
            });
            holder.find("a[href='#cancel']").click(function (e) {
                e.preventDefault();
                holder.html(value);
                self.removeClass("editing");
            });
        }).on("click", "a[href='#delete']", function (e) {
            e.preventDefault();
            var self = $(this),
                catid = $(this).attr("catid"),
                pTr = self.parents("tr"),
                category = pTr.children("td:eq(2)").text();

            var box = new jBox('Confirm', {
                content: window.OELang.deleteCategory.format(category),
                confirmButton: window.OELang._delete,
                cancelButton: window.OELang.cancel,
                confirm: function () {
                    var data={
                        catid: catid
                    }
                    data[token] = token;
                    self.append($('<i class="fa fa-spin fa-spinner"></i>'));
                    $.post( window.YKS.deleteCategory, data, function (data) {
                        if(data=='ok'){
                            self.parents('tr').remove();
                            box.close();
                        }else{
                            alert(data);
                        }
                    });
                },
                cancel: function () {
                    box.close();
                }
            }).open();
        });
        $(".portlet-body").on("click", "a[href='#newcate']", function(e){
            e.preventDefault();
            var table = $(".tab-pane.active").find("table").find("tbody"),
                catetype = $("#catetab").find("li.active").attr("type");
            var editor = $("<tr><td></td><td></td><td><input class='form-control' style='display:inline; width:300px' /> <a class='btn green' href='#ok'>"+window.OELang.add+"</a> <a class='btn btn-default' href='#cancel'>"+window.OELang.cancel+"</a></td><td></td><td></td>");
            var insertto = table.find("tr:first-child");
            if(insertto.length<1){
                editor.appendTo(table);
            }else{
                editor.insertBefore(insertto);
            }

            editor.find("input").focus();
            editor.find("a[href='#ok']").click(function (evt) {
                evt.preventDefault();
                $(this).html(window.OELang.adding);
                $(this).attr("disabled", "disabled");
                editor.find("a[href='#cancel']").attr("disabled", "disabled");
                var data = {
                    catetype: catetype,
                    title: editor.find("input").val()
                }
                data[token]=1;
                $.post( window.YKS.addCategory, data, function (data) {
                    data = $.parseJSON(data);
                    if( data.status == "ok" ){

                        if( catetype == "1" ){
                            examCategoryGrid.getDataTable().ajax.reload();
                        }else{
                            questionCategoryGrid.getDataTable().ajax.reload();
                        }
                    }else{
                        alert(data.msg)
                    }
                });
            });
            editor.find("a[href='#cancel']").click(function (e) {
                e.preventDefault();
                editor.remove();
            });
        }).on("click", "a[href='#deletecates']", function(e){
            e.preventDefault();
            var catetype = $("#catetab").find("li.active").attr("type");
            var targets = Number(catetype)==1?"tab_exam":"tab_question";
            targets = $("#"+targets).find(".checked");

            if (targets.length < 1){
                Metronic.alert({
                    type: 'success',
                    icon: 'error',
                    message: window.OELang.pleaseSelectFirst,
                    container: $("#categories-list"),
                    place: 'prepend',
                    closeInSeconds: 3
                });
                return;
            }

            var vals = $.makeArray(targets).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function(value){
                return value > 0;
            });

            new jBox("Confirm", {
                confirmButton: window.OELang._delete,
                cancelButton: window.OELang.cancel,
                content: window.OELang.deleteSelectedCategories,
                confirm: function () {

                    var data={};
                    data.catid = vals.join(',');
                    data[token] = 1;
                    $.post(window.YKS.deleteCategories, data).done(function (result) {
                        result = $.parseJSON(result);
                        if(result.status == 'success'){
                            if( catetype == "1" ){
                                examCategoryGrid.getDataTable().ajax.reload();
                            }else{
                                questionCategoryGrid.getDataTable().ajax.reload();
                            }
                        }else{
                            Metronic.alert({
                                type: 'danger',
                                icon: 'error',
                                message: result.msg,
                                container: $("#categories-list"),
                                place: 'prepend',
                                closeInSeconds: 5
                            });
                        }
                    }).fail(function (result) {
                        Metronic.alert({
                            type: 'danger',
                            icon: 'warning',
                            message: window.OELang.deleteQuestionsFailed,
                            container: $("#categories-list"),
                            place: 'prepend'
                        });
                    })
                }
            }).open();

        })
        NW.buildCheck();
    }


    function setupFixTaken(){
        var updateSummary = function(){
            var gotscore = 0,
                rights = 0,
                wrongs = 0,
                totalscore = Number($(".total-scores").text()),
                reviewedCount = 0;

            $("div.question").map(function () {
                var q = $(this),
                    qid = q.data("qid"),
                    score= Number(q.data('score')),
                    originscore = Number(q.data('originscore')),
                    reviewdscore = Number(q.data('reviewdscore')),
                    fixscore= Number(q.data('fixscore')),
                    right = q.hasClass("right"),
                    origin = q.data("origin"),
                    reviewd = q.data("reviewd");

                if(reviewdscore != -1){
                    originscore = reviewdscore;
                    reviewedCount++;
                }

                if(fixscore==-1){
                    gotscore += originscore;
                }else{
                    gotscore += fixscore;
                }
                rights += right?1:0;
                wrongs += right?0:1;

            });
            $(".answer-rights").html(rights);
            $(".answer-wrong").html(wrongs);
            $(".scores").html(gotscore);
            $(".reviewed-count").html(reviewedCount);
            $(".score-ratio").html((gotscore*100/totalscore).toFixed(1) + "%");
        }
        var lock = false;
        $(".reviewd-btn").on("click", function(e){
            lock = true;
            var that = $(this).parent();
            var score = Number(that.data("score"));
            var originscore = Number(that.data("originscore"));
            var reviewdscore = Number(that.data("reviewdscore"));
            var qtid = Number(that.data("qtid"));
            var init_score = Number(that.data("initscore"));
            var origin = that.data("origin");
            //如果是理解题，另一种纠错判分
            if(qtid == 6){
                var input = that.find('div[class^="diy-score"]');
                input.css('top',$(this).position().top+38);
                input.css('left',$(this).position().left);
                input.css('display','block');
            }else{
                var fix_score;
                if(that.hasClass("right")){
                    fix_score = 0;
                }else{
                    fix_score = score;
                }
                if(!that.data("isreviewd") && reviewdscore!=-1){
                    fix_score = init_score;
                }
                that.data("fixscore",fix_score);
                var originscore_temp= originscore;
                var origin_temp = origin;
                if(reviewdscore != -1){
                    originscore = reviewdscore;
                    var origin =reviewdscore==score?"right":"wrong";
                    that.data("origin",origin);
                }
                reviewdscore = fix_score;
                var qid = that.data("qid");
                var reviewd = that.data("reviewd");
                if(reviewd == "false" || reviewd == false){
                    that.addClass("changed");
                    that.data("reviewd","true");
                }
                var reviewdIsRight = false;
                if(fix_score == score){
                    reviewdIsRight = true;
                    that.removeClass("wrong").addClass("right")
                    that.find("blockquote").removeClass("wrong").addClass("right")
                    $("li[data-qid='"+qid+"']").removeClass("wrong").addClass("right")
                }else{
                    that.removeClass("right").addClass("wrong")
                    that.find("blockquote").removeClass("right").addClass("wrong")
                    $("li[data-qid='"+qid+"']").removeClass("right").addClass("wrong")
                }
                that.find('span[id^="pointsscored"]').html(fix_score);
                that.find('p[class^="originScore"]').html(originscore);
                that.find('p[class^="reviewdScore"]').html(fix_score);
                that.data("reviewdresult",reviewdIsRight==true?"wrong":"right");
                var reviewd_result = that.find('div[class^="have-reviewed"]');
                that.find('span[id^="pointsscored"]').html(fix_score);
                if(!that.data("isreviewd") && init_score == fix_score){
                    that.removeClass("changed");
                    that.data("reviewd","false");
                    that.data("reviewdscore",-1);
                    that.data("origin",origin_temp);
                    that.data("originscore",originscore_temp);
                    reviewd_result.css('display','none');
                    $("li[data-qid='"+qid+"']").children("img").css("display","none");
                }else{
                    if(originscore == score){
                        that.find('img[class^="originRight"]').attr("src","/components/com_exams/assets/img/fix-right.png");
                    }else{
                        that.find('img[class^="originRight"]').attr("src","/components/com_exams/assets/img/fix-wrong.png");
                    }
                    if(reviewdIsRight){
                        that.find('img[class^="reviewdRight"]').attr("src","/components/com_exams/assets/img/fix-right.png");
                    }else{
                        that.find('img[class^="reviewdRight"]').attr("src","/components/com_exams/assets/img/fix-wrong.png");
                    }
                    if(!that.hasClass("changed")){
                        that.addClass("changed");
                    }
                    $("li[data-qid='"+qid+"']").children("img").css("display","block");
                    that.data("originscore",originscore);
                    that.data("reviewdscore",reviewdscore);
                    $(this).css('display','none');
                    reviewd_result.css('display','block');
                }
                var alert = $(".alert");
                alert.css('top',that.position().top+144);
                alert.css('left',(that.width())/2+100);
                alert.animate({opacity:1},500)
                setTimeout(function(){
                    alert.animate({opacity:0},1000);
                },3000);
                updateSummary();
            }

        })
        $('.fix-submit').on('click', function() {
            lock = true;
            var that = $(this).parents('.question');
            var score = Number(that.data("score"));
            var originscore = Number(that.data("originscore"));
            var reviewdscore = Number(that.data("reviewdscore"));
            var init_score = Number(that.data("initscore"));
            var fix_score = $(this).prev().val();
            var origin = that.data("origin");
            var qtid = Number(that.data("qtid"));
            if(fix_score == ""){
                $(".diy-score").css('display','none');
            }else{
                fix_score = Number(fix_score);
                if(isNaN(fix_score) || (fix_score!=0&&fix_score == "") || fix_score<0 || fix_score>score){
                    NW.messageBox(window.OELang.notice,window.OELang.pleaseReenterIt.format(score))
                    $(this).prev().val('');
                }else{
                    if(fix_score<0){
                        NW.messageBox(window.OELang.notice,window.OELang.pleaseReenterIt)
                    }
                    if(fix_score == (reviewdscore==-1?originscore:reviewdscore)){
                        that.find('div[class^="diy-score"]').css('display','none')
                    }else{
                        that.data("fixscore",fix_score);
                        var originscore_temp= originscore;
                        var origin_temp = origin;
                        if(reviewdscore != -1){
                            originscore = reviewdscore;
                            var origin = reviewdscore==score?"right":"wrong";
                            that.data("origin",origin);
                        }
                        reviewdscore = fix_score;
                        var qid = that.data("qid");
                        var reviewd = that.data("reviewd");
                        if(reviewd == "false" || reviewd == false){
                            that.addClass("changed");
                            that.data("reviewd","true");
                        }
                        var reviewdIsRight = false;
                        if(fix_score == score){
                            reviewdIsRight = true;
                            that.removeClass("wrong").addClass("right")
                            that.find("blockquote").removeClass("wrong").addClass("right")
                            $("li[data-qid='"+qid+"']").removeClass("wrong").addClass("right")
                        }else{
                            that.removeClass("right").addClass("wrong")
                            that.find("blockquote").removeClass("right").addClass("wrong")
                            $("li[data-qid='"+qid+"']").removeClass("right").addClass("wrong")
                        }
                        that.find('p[class^="originScore"]').html(init_score);
                        that.find('p[class^="reviewdScore"]').html(fix_score);
                        that.data("reviewdresult",reviewdIsRight==true?"wrong":"right");
                        var reviewd_result = that.find('div[class^="have-reviewed"]');
                        if(!that.data("isreviewd") && init_score == fix_score){
                            that.removeClass("changed");
                            that.data("reviewd","false");
                            that.data("reviewdscore",-1);
                            that.data("origin",origin_temp);
                            that.data("originscore",originscore_temp);
                            reviewd_result.css('display','none');
                            $("li[data-qid='"+qid+"']").children("img").css("display","none");
                        }else{
                            if(init_score == score){
                                that.find('img[class^="originRight"]').attr("src","/components/com_exams/assets/img/fix-right.png");
                            }else{
                                that.find('img[class^="originRight"]').attr("src","/components/com_exams/assets/img/fix-wrong.png");
                            }
                            if(reviewdIsRight){
                                that.find('img[class^="reviewdRight"]').attr("src","/components/com_exams/assets/img/fix-right.png");
                            }else{
                                that.find('img[class^="reviewdRight"]').attr("src","/components/com_exams/assets/img/fix-wrong.png");
                            }
                            if(!that.hasClass("changed")){
                                that.addClass("changed");
                            }
                            $("li[data-qid='"+qid+"']").children("img").css("display","block");
                            that.data("originscore",originscore);
                            that.data("reviewdscore",reviewdscore);
                            that.find('span[class^="reviewd-btn"]').css('display','none');
                            reviewd_result.css('display','block');
                        }
                        if(qtid != 6){
                            that.find('span[id^="pointsscored"]').html(fix_score);
                        }
                        $(this).parent().css('display','none');
                        that.find('span[class^="reviewd-btn"]').css('display','none');
                        that.find('span[class^="have-reviewed"]').addClass('result-display');
                        var alert = $(".alert");
                        alert.css('top',that.position().top+160);
                        alert.css('left',(that.width())/2+100);
                        alert.animate({opacity:1},500)
                        setTimeout(function(){
                            alert.animate({opacity:0},1000);
                        },3000);
                        updateSummary();
                    }
                }
            }
        })

        $(".fix-submit").mousedown(function(){
            event.preventDefault();
        })

        $(".fix_score").blur(function(){
            $(".diy-score").css('display','none');
            $(".fix-btn").css("display","inline-block");
            $('.score strong').css("display","inline-block");
        })
        $('.score strong').on('click', function (event) {
            var that = $(this).parents('.question');
            var qtid = Number(that.data("qtid"));
            if(qtid != 6 && qtid != 1 && qtid != 3){
                var qid = that.data("qid");
                var input = that.find('div[class^="diy-score"]');
                input.css('top',$(this).position().top);
                input.css('left',$(this).position().left-50);
                input.css('display','block');
                $(".fix_score").focus();
                $(this).css("display","none");
            }
        })
        $('.score strong').mouseover(function (){
            var that = $(this).parents('.question');
            var qtid = Number(that.data("qtid"));
            if(qtid != 6 && qtid != 1 && qtid != 3){
                $(this).attr("title","点击设置分数")
            }
        })

        $(".question").mouseover(function(){
            if(!lock){
                $(this).find('span[class^="reviewd-btn"]').css('display','block');
                $(this).find('div[class^="have-reviewed"]').css('display','none');
            }

        })
        $(".question").mouseleave(function(){
            $(this).find('span[class^="reviewd-btn"]').css('display','none');
            var a = $(this).data('reviewd');
            if(a == true || a  == "true"){
                $(this).find('div[class^="have-reviewed"]').css('display','block');
            }
            lock = false;
        })

        $(".fix_score").keypress(function(e) {
            if (e.keyCode == 13) {
                e.preventDefault();
            }
        })
        var oTop = $(".summary").offset().top,
            oLeft = $(".summary").offset().left;
        var Top = ispc()?150: (window.screen.height - 100);
        if(!ispc()) oTop -= $(".summary").height();

        $(window).scroll(function(){
            var sTop = $(this).scrollTop();
            if(ispc()){
                if( sTop + Top >= oTop ){
                    $(".summary").css({"position":"fixed","top":Top, "left":oLeft });
                }else{
                    $(".summary").css({"position":"static"});
                    oTop = $(".summary").offset().top
                    oLeft = $(".summary").offset().left;
                }
            }else{
                if( sTop + Top < oTop ){
                    $(".summary").css({"position":"fixed","top":Top, "left":0 });
                }else{
                    $(".summary").css({"position":"static"});
                }
            }

        })

        $("ul.list").on("click", "li", function (e) {
            var qid = $(this).data("qid");
            $('html, body').animate({
                scrollTop: $(".question[data-qid='"+qid+"']").offset().top-300
            }, 500);
        })

        $("#fixtaken-form").submit(function(e){
            var fixdata = [];
            $("div.question").map(function () {
                var q = $(this),
                    qid = q.data("qid"),
                    right = q.hasClass("right"),
                    origin = q.data("origin"),
                    fixscore = Number(q.data("fixscore")),
                    reviewdscore = Number(q.data("reviewdscore")),
                    originscore = Number(q.data("initscore"));
                fixdata.push({
                    qid:qid,
                    right:right?1:0,
                    origin: origin=="right"?1:0,
                    score:fixscore==-1?(reviewdscore==-1?originscore:reviewdscore):fixscore,
                    originscore:originscore,
                })
            })
            $("input[name='fixdata']").val(JSON.stringify(fixdata));
            $("button[type='submit']").append($('<i class="fa fa-spin fa-spinner"></i>')).prop("disabled", true)
        });

        $(".fix-record").mouseover(function(){
            $(".tag").html($(this).data('title'));
            if($(this).data('title').length>26){
                $(".tag").css('top',$(this).position().top-65);
            }else{
                $(".tag").css('top',$(this).position().top-45);
            }
            $(".tag").css('left',$(this).position().left-120);
            $(".tag").css('display','block');
        })
        $(".fix-record").mouseleave(function(){
            $(".tag").css('display','none');
        })
        $(".back-to-previous").click(function(){
            window.history.back();
        })
    }
    /** 纠错功能 end **/


    function setupTasks(token) {
        var params = {}, grid, interval=0;
        params[token] = 1;
        grid = $.nAjaxTable($("#tasks-lists"), window.YKS.listTasks, params, {
            dataTable: {
                "ordering":false,
            },
            onSuccess:function (grid, data) {
                if(interval>0 && data.processing<=0){
                    clearInterval(interval);
                    interval = 0;
                }

            }
        });
        var setUpDraw = function(){
            $(".tooltip-test").jBox('Tooltip',{
                theme: 'TooltipDark',
                delayClose:1,
                getContent:'title'
            })
        }
        grid.getDataTable().on("draw.dt",setUpDraw);


        NW.buildCheck($("#tasks-lists"));

            interval = setInterval(function(){
                grid.getDataTable().ajax.reload();
            }, 10000)

        $('.tasks-container').on('click','a.delete-button',function(e){
            e.preventDefault();
            e.stopPropagation();//该方法将停止事件的传播，阻止它被分派到其他 Document 节点。
            var vals = $.makeArray($(".checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function (value) {
                return value > 0;
            });//获取到选择的数据

            if( vals.length <= 0 ){   //判断
                NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }else if( vals.length > 0  ){
                NW.showConfirmDialog(window.OELang.sureToDeleteAllTask, function(resp){
                    if(resp == 'yes'){
                        var url = window.YKS.deleteAllRemoteFile;
                        var data = {
                            taskid:vals
                        }
                        data[token] = 1;
                        $.post(url,data).done(function(rdata){
                            rdata = $.parseJSON(rdata);
                            if(rdata.status == "ok"){
                                NW.messageBox(window.OELang.notice, window.OELang.deleteSuccessfully);
                                grid.getDataTable().ajax.reload();//局部更新
                            }else{
                                alert(rdata.msg)
                            }
                        })
                    }return false;
                })
            }
        })

        $('#tasks-parent').on('click','a.delete-file',function(e){
            e.stopPropagation();//该方法将停止事件的传播，阻止它被分派到其他 Document 节点。
            e.preventDefault();//取消事件的默认动作。
            var value = $(this).data("value"), tr = $(this).parents('tr');
            // alert(value);
            NW.showConfirmDialog(window.OELang.sureToDeleteTask, function(resp){
                if( resp == 'yes'){
                    var url = window.YKS.deleteRemoteFile;
                    var data = {
                        taskid:value
                    }
                    data[token] = 1;
                    $.post(url,data).done(function(rdata){
                        rdata = $.parseJSON(rdata);
                        if(rdata.status == "ok"){
                            NW.messageBox(window.OELang.notice, window.OELang.deleteSuccessfully);
                            tr.slideUp();
                            tr.remove();
                        }else{
                            alert(rdata.msg)
                        }
                    })
                }
                return false;
            })
        })



    }

    function setupStudentsAvaExeam(){
        var grid;
        var ajaxLoad = function () {
            var ajaxData = {};
            param = ajaxData;
            if(grid){
                grid.clearAjaxParams();
                grid.addAjaxParam("search", $("input[name='search']").val());
                grid.addAjaxParam("catid", $("select.category-filter").val());
                grid.getDataTable().ajax.reload();
            }else{
                grid = $.nAjaxTable($("#student-available-exams"), window.YKS.stuAvailableExams, param);
                var groupActions = grid.getTableWrapper().find(".row:first").find(".table-group-actions");
                $("#searchbox").appendTo(groupActions).css("display", "block");
                $("select.category-filter").change(function(){
                    ajaxLoad();
                })
            }
        }

        $("input[name='search']").bind('keypress',function(event){
            if(event.keyCode === 13)   ajaxLoad();
        });
        $("#btn-search-question").click(function (e) {
            ajaxLoad();
        })
        ajaxLoad();
    }


    function newStudentField(callback){
        callback = callback !== undefined? callback : function(sfid, label){};
        var jbox = new jBox('Modal', {
            title: window.OELang.newSfidTitle,
            ajax: {
                url: window.YKS.newStudentSfid,
                reload: true,
            },
            preventDefault: true,
            onCloseComplete: function(){
                this.destroy();
            },
            onCreated: function () {
                var self = this;
                $(".jBox-content").on('click', "button[type='button']", function () {
                    self.close();
                });
                $(".jBox-content").on('submit', "#newfield", function (e) {
                    e.preventDefault();
                    var field_label = $("input[name='field_label']").val().trim()
                    if(field_label ==''){
                        return false;
                    }
                    var re = /姓名|Name|密码|Password/i
                    if(re.test(field_label)){
                        NW.showConfirmDialog(window.OELang.existFieldTips.format(field_label),function(resp){
                            if(resp == "yes"){
                                var submitbtn = $(".jBox-content form#newfield").find("button[type='submit']");
                                submitbtn.append('<i class="fa fa-spin fa-spinner"></i>').prop("disabled", true);
                                $.post( window.YKS.saveStudentSfid,
                                    $("#newfield").serialize(), function (data) {
                                        self.close();
                                        data = $.parseJSON(data);
                                        if (data.status == 'ok') {
                                            callback.call(null, data.sfid, data.label);
                                        } else {
                                            if(data.type == '3'){
                                                alert(data.error);
                                            }else{
                                                NW.messageBox(window.OELang.notice, (data.type == '1')?window.OELang.newFieldTips1.format(data.label):window.OELang.newFieldTips2.format(data.label,data.label));
                                            }
                                        }
                                    });
                                return false;
                            }
                        })
                    }else{
                        var submitbtn = $(".jBox-content form#newfield").find("button[type='submit']");
                        submitbtn.append('<i class="fa fa-spin fa-spinner"></i>').prop("disabled", true);
                        $.post( window.YKS.saveStudentSfid,
                            $("#newfield").serialize(), function (data) {
                                self.close();
                                data = $.parseJSON(data);
                                if (data.status == 'ok') {
                                    callback.call(null, data.sfid, data.label);
                                } else {
                                    if(data.type == '3'){
                                        alert(data.error);
                                    }else{
                                        NW.messageBox(window.OELang.notice, (data.type == '1')?window.OELang.newFieldTips1.format(data.label):window.OELang.newFieldTips2.format(data.label,data.label));
                                    }
                                }
                            });
                        return false;
                    }
                });
            },
            minWidth: 280,
            minHeight: 170
        });
        jbox.open();
    }


    function newStudent(callback, gid, sid,token) {
        sid = sid === undefined?0:sid;
        if(NW.ispc()){
            var jbox = new jBox('Modal', {
                title: sid<=0?window.OELang.addAStudent:window.OELang.modifyStudent,
                ajax:{
                    url: window.YKS.newStudentURL,
                    data:{
                        gid:gid,
                        sid:sid
                    },
                    complete: function () {
                        var self = jbox;

                        newStudentAction(function(success, errorData){
                            if(success){
                                NW.messageBox(window.OELang.notice, window.OELang.savedSuccessfully);
                                self.close();
                                if(callback) callback();
                            }else{
                                if(errorData){
                                    if(errorData.errortype == 'exists'){
                                        NW.showConfirmDialog(window.OELang.studentExistConfirmModifyTip, function(resp){
                                            if( resp == 'yes'){
                                                self.close();
                                                newStudent(callback, 0, errorData.sid)
                                            }
                                        });
                                    }
                                }
                            }

                        }, function(sfid){
                            jbox.position();
                        })

                        var winHeight = 600;
                        if (window.innerHeight){
                            winHeight = window.innerHeight;
                        }else if ((document.body) && (document.body.clientWidth)){
                            winHeight = document.body.clientHeight;
                        }
                        $("#member-reg .form-body").css({
                            'max-height': '{0}px'.format(Math.max( winHeight * 0.8 - 100, 300)),
                            'overflow-y': 'auto',
                            'overflow-x': 'hidden',
                        });
                        jbox.position();
                    }
                },
                preventDefault: true,
                onCloseComplete: function(){
                    this.destroy();
                },
                onCreated: function () {
                    var self = this;
                    $(".jBox-content").on('click', "button.cancel", function () {
                        self.close();
                    });
                    $(".jBox-content").on('click', "button.btn-primary", function () {
                        if($("#selectGroup option:selected").length == 1 && $("#selectGroup option:selected").val() == "-1"){
                            NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectGroup);
                            return false;
                        }
                    });

                },
                maxWidth: 600,
            });
            jbox.open();
        }else{
            var url = gid>0?window.YKS.newStudentURL+"&gid="+gid:window.YKS.newStudentURL;
            if(sid>0){
                url = url + "&sid={0}".format(sid);
            }
            window.location.href = url;
        }
    }


    function newStudentAction(onSubmitedAndReturned, onAddField){
        var handle = document;


        $(handle).off("submit", "#member-reg");
        $(handle).off("click", "ul.label-list a[data-sfid]");
        $(handle).off("click", "ul.label-list a[href='#newfield']");

        $(handle).on("submit", "#member-reg", function (e) {
            var submitbtn = $("form#member-reg").find("button[type='submit']");

            NW.makeLoading(submitbtn);

            if(ispc()){
                e.preventDefault();

                $.post( $("form#member-reg").attr("action"), $("form#member-reg").serialize(), function (data) {
                    var success = false, errorData = {};
                    try{
                        data = $.parseJSON(data);
                    }catch(e){
                        data = {
                            status: 'ok',
                            error: data
                        }
                    }

                    if (data.status == 'ok') {
                        success = true;
                    } else {
                        NW.makeUnLoading(submitbtn);
                        if( data.hasOwnProperty('errortype') && data.errortype == 'exists'){
                            errorData = {
                                sid: data.sid,
                                errortype: 'exists'
                            }
                        }else{
                            NW.messageBox( window.OELang.notice, data.error, function(){
                            });
                        }
                    }
                    onSubmitedAndReturned(success, errorData);
                });
            }
        }).on("click", "ul.label-list a[data-sfid]", function (e) {
            e.preventDefault();
            var sfid = $(this).data("sfid"),
                label = $(this).text();

            var usedSfids = $(".form-body input[name^='fid']").map(function () {
                return Number($(this).attr("name").replace("fid", ""));
            }).get();

            if(usedSfids.indexOf(sfid)>-1){
                NW.messageBox(window.OELang.notice, window.OELang.addedSfidTip.format(label));
                return;
            }

            var tmpl;
            if(sfid == 0) {
                tmpl =
                    '<div class="form-group ">'+
                    '<label class="control-label col-md-2">{0}:</label>'+
                    '<div class="col-md-8">'+

                    '<div class="fileinput fileinput-new" data-provides="fileinput">'+
                    '<div class="fileinput-preview thumbnail" data-trigger="fileinput" style="width: 60px; height: 60px;"></div>'+
                    '<div class="fileinput-button-group">'+
                    '<span class="btn default btn-file">'+
                    '<span class="fileinput-new">{1}</span>'+
                    '<span class="fileinput-exists">{2}</span>'+
                    '<input type="file" value="" required/>'+
                    '</span>'+
                    '</div>'+
                    '</div>'+
                    '<div class="clearfix image-size-notice">{3}</div>'+
                    '<input  name="fid{4}" type="hidden" value="isChange"/>'+
                    '</div>'+
                    '   <div class="col-md-2" style="padding-top: 8px;">' +
                    '       <a href="#removefield" title="{4}"><i class="fa fa-trash" style="color:#ccc;"></i> </a>' +
                    '   </div> ' +
                    '</div>';
                $("#member-reg div.form-body").append($(tmpl.format(label,window.OELang.selectImage,window.OELang.changeImage,window.OELang.imageSizeNotice,sfid,window.OELang._delete)));

            }else{
                tmpl ='<div class="form-group">' +
                    '   <label class="control-label col-md-2">{0} </label>' +
                    '   <div class="col-md-8">' +
                    '       <input name="fid{1}" value="" class="form-control col-md-6" required/>' +
                    '   </div>' +
                    '   <div class="col-md-2" style="padding-top: 8px;">' +
                    '       <a href="#removefield" title="{2}"><i class="fa fa-trash" style="color:#ccc;"></i> </a>' +
                    '   </div> ' +
                    '</div>';
                $("#member-reg div.form-body").append($(tmpl.format(label, sfid,window.OELang._delete)));
            }



            if(onAddField) onAddField(sfid)

        }).on("click", "ul.label-list a[href='#newfield']", function (e) {
            e.preventDefault();
            var customizeFieldLength =  $(this).parent().siblings('.customize').length + $("input[name='usingField']").val()*1;
            if(customizeFieldLength >= 16){
                NW.messageBox(window.OELang.notice, window.OELang.newFieldLimit);
                return false;
            }
            $.newStudentField(function (sfid, label) {
                var tmpl ='<div class="form-group">' +
                    '<label class="control-label col-md-2">{0}:</label>' +
                    '<div class="col-md-8">' +
                    '<input name="fid{1}" value="" class="form-control col-md-6" required/>' +
                    '</div>' +
                    '</div>';


                $("#member-reg div.form-body").append($(tmpl.format(label, sfid)))

                var newdom = "<li class='customize'><a href='#' data-sfid='{0}'>{1}</a></li>".format(sfid, label);
                $(newdom).insertBefore($("ul.label-list li:last"));
            });
        }).on("change.bs.fileinput","#member-reg .fileinput",function(e, file){

            if(file == undefined){
                NW.messageBox( window.OELang.notice, window.OELang.imageTypeIsNotRight);
                $("#member-reg .fileinput").fileinput('reset');
                $("input[name='fid0']").val("isChange");
                return;
            }

            var fileType = file.type;
            if(fileType.indexOf("image") == -1){
                NW.messageBox( window.OELang.notice, window.OELang.imageTypeIsNotRight);
                $("#member-reg .fileinput").fileinput('reset');
                $("input[name='fid0']").val("isChange");
                return;
            }
            var maxSize = 1024*1024;
            if(file.size > maxSize) {
                NW.messageBox( window.OELang.notice, window.OELang.imageSizeIsNotRight);
                $("#member-reg .fileinput").fileinput('clear');
                $("#member-reg .fileinput").fileinput('reset');
                $("input[name='fid0']").val("isChange");
                return;
            }
            var arr = file.result.split('base64,');

            arr[0] = fileType.split("/")[1];
            $("input[name='fid0']").val(arr);

        });

        $("#member-reg").on("click", "a[href='#newgroup']", function(e){
            e.preventDefault();
            newGroup($("input[name='sessiontoken']").val(), function(title, gid){
                var groupSelect = $("#member-reg select[name^='gid']");
                var currentVal = groupSelect.val();
                if(!currentVal) currentVal = [];
                var newGid = new Option( title, gid );
                currentVal.push(gid);
                groupSelect.append(newGid).val(currentVal).trigger('change')
            }, {})
        }).on("click", 'a[href="#removefield"]', function(e){
            e.preventDefault();

            var formGroup =  $(this).parents('.form-group');
            NW.showConfirmDialog(  window.OELang.areYouSureToDelete.format( formGroup.find('label').text() ), function(resp){
                if(resp == 'yes'){
                    formGroup.remove();
                }
            });

        })



        // $("#member-reg select[name^='gid']").select2({
        //     placeholder: window.OELang.pleaseSelectGroup
        // })
        // $("#member-reg select").not('[name^="gid"]').select2();



        // if(!ispc()){
        //     $("#member-reg select").select2();
        // }
    }


    function newGroup(token, callback,options){
        var tmpl = '<div style="min-height:80px"><input type="text" name="group-name" class="form-control" placeholder="{0}"/></div>';
        options = options ? options: {};

        var lastOnCreated = options.onCreated?options.onCreated: function(){};
        options.onCreated = function(){
            $("input[name='group-name']").focus();
            lastOnCreated.call(this);
        }


        var dialog = NW.showDialog(tmpl.format(""), [
            {
                label: window.OELang.cancel,
                onClick: function(){
                    dialog.close();
                }
            },
            {
                label: window.OELang.add,
                onClick:function () {
                    var input = $("input[name='group-name']");
                    if(input.val()==""){
                        input.focus();
                        return;
                    }
                    NW.makeLoading($(this));
                    var d = {
                        "title": input.val()
                    }
                    d[token] = 1;

                    $.post(window.YKS.newGroup, d).done(function(rdata){
                        rdata = $.parseJSON(rdata);
                        if(rdata.status=="error"){
                            NW.messageBox(window.OELang.notice, rdata.error, function(){
                                dialog.close();
                            });
                        }else{
                            callback(input.val(), rdata.gid);
                            dialog.close();
                        }
                    })
                },
                primary: true
            }], window.OELang.newGroup, options
        );
    }


    /**
     * 选择组对话框，
     * @param title 对话框 标题
     * @param selectedGids 要默认选择的值
     * @param callback 回调函数，第一个参数是已选择的组id, 第一个参数是一些可调用的资源，包括close
     * @param submitLabel
     */
    function selectGroup(title, selectedGids, callback, submitLabel, token){
        selectGroupV2(title, selectedGids, callback, token, false);
    }


    /**
     * 用于选择组
     * @param title 要显示的标题
     * @param selectedGids 要默认选择的组
     * @param callback 回调函数， function(selectedGroups){}
     * @param token session 的token
     * @param multiple 是否多选
     * @param showAllGroup 是否显示所有组
     */
    function selectGroupV2(title, selectedGids, callback, token, multiple, showAllGroup) {
        var oldId = [];
        var content = '<div id="group-selector-v2">{0}<div class="tree"></div>{1}</div>';
        var search = '<div class="input-icon group-search"><i class="fa fa-search"></i><input type="text" class="form-control input-circle" placeholder="{0}"></div>';
        content = content.format(search.format(window.OELang.search), multiple?'<div class="selected"></div>':'');

        var treeOption = {
            core: {
                multiple: false,
                check_callback: true,
                data: {
                    type: 'post',
                    dataType: 'json',
                    url: window.YKS.loadGroups,
                    data: function (node) {
                        var data = {};
                        data[token] = 1;
                        if (node.id === '#') {
                            data.cats = [];
                            if(showAllGroup){
                                data.cats.push({id: 0, text: window.OELang.allStuGroups, li_attr: {catid: 0, title: window.OELang.allStuGroups}});
                            }
                        } else {
                            data.catid = node.id;
                        }
                        return data;
                    }
                }
            },
            plugins: [],
            createdNodeCallback: function (inst, node) {

            },
            renamedNodeCallback: function (inst, node) {
            },
            removedNodeCallback: function (inst, node) {
            }
        };
        treeOption.core.multiple= !!multiple;
        if(!!multiple) treeOption.plugins.push('checkbox');


        var treeInstance;
        var dialog = NW.showDialog(content, [{
                label:window.OELang.cancel,
                onClick:function(){
                    dialog.close();
                }
            },
            {
                label: window.OELang.sure,
                primary: true,
                cls:'blue',
                onClick: function(){
                    var selecteds = treeInstance.get_selected(true);
                    if(callback){
                        callback(selecteds.map(function(item){
                            return {
                                gid: item.id,
                                text: item.text
                            }
                        }))
                    }
                    dialog.close();
                }
            }], title, {
            onCreated: function () {
                $('#group-selector-v2').parents('.dialog-content').css({
                    "margin-top":0,
                    "overflow-y": 'visible'
                })
                $('#group-selector-v2 .tree').css({
                    "margin-top":"10px",
                    "border": "1px solid #eaeaea",
                    "height": "480px",
                    "overflow": "auto",
                    "padding": "5px",
                })
                treeInstance = createGroupTree($('#group-selector-v2 > .tree'), $('#group-selector-v2 .group-search > input'), null, treeOption, token);
                treeInstance.refresh();

                $('#group-selector-v2 > .tree').one('loaded.jstree', function (e, data) {
                    treeInstance.deselect_all();
                    if (selectedGids.length > 0) {
                        treeInstance.load_all(null, function () {
                            for(var i=0; i<selectedGids.length; i++){
                                treeInstance.select_node(treeInstance.get_node(selectedGids[i]));
                            }
                        });
                    }
                }).on('changed.jstree', function (e, data) {
                    var selIds = treeInstance.get_selected().map(function (id) {
                        return Number(id)
                    });

                    var node = data.node;
                    if (selIds.length > 1) {
                        if (node.id == 0) {
                            NW.showConfirmDialog(window.OELang.allGroupsConflictWithOther, function(resp){
                                if(resp == 'yes'){
                                    treeInstance.deselect_all();
                                    treeInstance.select_node(0);
                                }else{
                                    treeInstance.deselect_node(0);
                                }
                            })
                        } else if ($.inArray(0, selIds) >= 0) {
                            NW.showConfirmDialog(window.OELang.allGroupsConflictWithOther, function(resp){
                                if(resp == 'yes'){
                                    treeInstance.deselect_node(0);
                                }else{
                                    treeInstance.deselect_node(node.id);
                                }
                            })
                        }
                    }
                    if (selIds.length == 1 && oldId.length > 0) {
                        if (node.id == 0 || ($.inArray("0", oldId) != -1)) {
                            if (confirm(window.OELang.allGroupsConflictWithOther)) {
                                oldId = [];
                            } else {
                            }
                        }
                    }

                    //处理父子关系的选择
                    if(node && Number(node.id) > 0 ){
                        var id=Number(node.id);
                        var children_d = node.children_d;
                        //判断是否有子级已经选择了， 如果有子级已经选择了，则把子集设置不选择
                        for(var i=0; i<children_d.length;i++){
                            if( selIds.indexOf(Number(children_d[i]))>-1){
                                treeInstance.deselect_node(children_d[i], true);
                            }
                        }

                        var parents = node.parents;
                        for(var i=0; i<parents.length;i++){
                            if( selIds.indexOf(Number(parents[i]))>-1){
                                treeInstance.deselect_node(parents[i], true);
                            }
                        }
                    }
                })
            },
            width: 750,
            height: 600
        });
        dialog.dialog.content.css({"overflow":"hidden"});
    }

    /**
     * 用于选择组
     * @param title 要显示的标题
     * @param selectedGids 要默认选择的组
     * @param callback 回调函数， function(selectedGroups){}
     * @param token session 的token
     * @param multiple 是否多选
     * @param showAllGroup 是否显示所有组
     */
    function selectPartGroup(title, selectedGids, callback, token, multiple, showAllGroup,isPart, partGids) {
        var oldId = [];
        var content = '<div id="group-selector-v2">{0}<div class="tree"></div>{1}</div>';
        var search = '<div class="input-icon group-search"><i class="fa fa-search"></i><input type="text" class="form-control input-circle" placeholder="{0}"></div>';
        content = content.format(search.format(window.OELang.search), multiple?'<div class="selected"></div>':'');

        var treeOption = {
            core: {
                multiple: false,
                check_callback: true,
                data: {
                    type: 'post',
                    dataType: 'json',
                    url: window.YKS.loadPartGroups,
                    data: function (node) {
                        var data = {};
                        data[token] = 1;
                        if (node.id === '#') {
                            data.cats = [];
                            if(isPart){
                                data.isPart = 1;
                                data.cats = partGids
                            }else{
                                if(showAllGroup){
                                    data.cats.push({id: 0, text: window.OELang.allStuGroups, li_attr: {catid: 0, title: window.OELang.allStuGroups}});
                                }
                            }

                        } else {
                            data.catid = node.id;
                        }
                        return data;
                    }
                }
            },
            plugins: [],
            createdNodeCallback: function (inst, node) {

            },
            renamedNodeCallback: function (inst, node) {
            },
            removedNodeCallback: function (inst, node) {
            }
        };
        treeOption.core.multiple= !!multiple;
        if(!!multiple) treeOption.plugins.push('checkbox');


        var treeInstance;
        var dialog = NW.showDialog(content, [{
            label:window.OELang.cancel,
            onClick:function(){
                dialog.close();
            }
        },
            {
                label: window.OELang.sure,
                primary: true,
                cls:'blue',
                onClick: function(){
                    var selecteds = treeInstance.get_selected(true);
                    if(callback){
                        var callbackValue = callback(selecteds.map(function(item){
                            return {
                                gid: item.id,
                                text: item.text
                            }
                        }))
                        if(callbackValue) dialog.close();
                    }else {
                        dialog.close();
                    }

                }
            }], title, {
            onCreated: function () {
                $('#group-selector-v2').parents('.dialog-content').css({
                    "margin-top":0,
                    "overflow-y": 'visible'
                })
                $('#group-selector-v2 .tree').css({
                    "margin-top":"10px",
                    "border": "1px solid #eaeaea",
                    "height": "480px",
                    "overflow": "auto",
                    "padding": "5px",
                })
                treeInstance = createGroupTree($('#group-selector-v2 > .tree'), $('#group-selector-v2 .group-search > input'), null, treeOption, token);
                treeInstance.refresh();

                $('#group-selector-v2 > .tree').one('loaded.jstree', function (e, data) {
                    treeInstance.deselect_all();
                    if (selectedGids.length > 0) {
                        treeInstance.load_all(null, function () {
                            for(var i=0; i<selectedGids.length; i++){
                                treeInstance.select_node(treeInstance.get_node(selectedGids[i]));
                            }
                        });
                    }
                }).on('changed.jstree', function (e, data) {
                    var selIds = treeInstance.get_selected().map(function (id) {
                        return Number(id)
                    });

                    var node = data.node;
                    if (selIds.length > 1) {
                        if (node.id == 0) {
                            NW.showConfirmDialog(window.OELang.allGroupsConflictWithOther, function(resp){
                                if(resp == 'yes'){
                                    treeInstance.deselect_all();
                                    treeInstance.select_node(0);
                                }else{
                                    treeInstance.deselect_node(0);
                                }
                            })
                        } else if ($.inArray(0, selIds) >= 0) {
                            NW.showConfirmDialog(window.OELang.allGroupsConflictWithOther, function(resp){
                                if(resp == 'yes'){
                                    treeInstance.deselect_node(0);
                                }else{
                                    treeInstance.deselect_node(node.id);
                                }
                            })
                        }
                    }
                    if (selIds.length == 1 && oldId.length > 0) {
                        if (node.id == 0 || ($.inArray("0", oldId) != -1)) {
                            if (confirm(window.OELang.allGroupsConflictWithOther)) {
                                oldId = [];
                            } else {
                            }
                        }
                    }

                    //处理父子关系的选择
                    if(node && Number(node.id) > 0 ){
                        var id=Number(node.id);
                        var children_d = node.children_d;
                        //判断是否有子级已经选择了， 如果有子级已经选择了，则把子集设置不选择
                        for(var i=0; i<children_d.length;i++){
                            if( selIds.indexOf(Number(children_d[i]))>-1){
                                treeInstance.deselect_node(children_d[i], true);
                            }
                        }

                        var parents = node.parents;
                        for(var i=0; i<parents.length;i++){
                            if( selIds.indexOf(Number(parents[i]))>-1){
                                treeInstance.deselect_node(parents[i], true);
                            }
                        }
                    }
                })
            },
            width: 750,
            height: 600
        });
        dialog.dialog.content.css({"overflow":"hidden"});
    }


    /**
     * 选择分类树对话框
     * @param cateType 分类类型， exam, question
     * @param title 标题
     * @param selectedCateID 要默认选择的组, 为一个数组
     * @param callback 回调函数， function(selectedGroups){}
     * @param token session 的token
     * @param multiple 是否多选
     * @param showAllGroup 是否显示所有组
     */
    function selectCategory(cateType, title, selectedCateID, callback, token, multiple, showAllGroup){
        cateType = cateType === undefined?"exam":cateType;

        var oldId = [];
        var content = '<div id="category-selector">{0}<div class="tree"></div>{1}</div>';
        var search = '<div class="input-icon group-search"><i class="fa fa-search"></i><input type="text" class="form-control input-circle" placeholder="{0}"></div>';
        content = content.format(search.format(window.OELang.search), multiple?'<div class="selected"></div>':'');

        var treeOption = {
            core: {
                multiple: false,
                check_callback: true,
                data: {
                    type: 'post',
                    dataType: 'json',
                    url: window.YKS.loadCategories,
                    data: function (node) {
                        var data = {type: cateType == "exam"? 1: (cateType=="question"?2:1)};
                        data[token] = 1;
                        if (node.id === '#') {
                            data.cats = [
                                {id: -1, text: window.OELang.anyCate, li_attr: {catid: -1, title: window.OELang.anyCate}},
                                {id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}},
                            ];
                        } else {
                            data.catid = node.id;
                        }
                        return data;
                    }
                }
            },
            plugins: [],
            createdNodeCallback: function (inst, node) {

            },
            renamedNodeCallback: function (inst, node) {
            },
            removedNodeCallback: function (inst, node) {
            }
        };
        treeOption.core.multiple= !!multiple;
        if(!!multiple) treeOption.plugins.push('checkbox');


        var treeInstance;
        var dialog = NW.showDialog(content, [{
            label:window.OELang.cancel,
            onClick:function(){
                dialog.close();
            }
        },
            {
                label: window.OELang.sure,
                primary: true,
                cls:'blue',
                onClick: function(){
                    var selecteds = treeInstance.get_selected(true);
                    if(callback){
                        callback(selecteds.map(function(item){
                            return {
                                catid: item.id,
                                text: item.text
                            }
                        }))
                    }
                    dialog.close();
                }
            }], title, {
            onCreated: function () {
                $('#category-selector').parents('.dialog-content').css({
                    "margin-top":0,
                    "overflow-y": 'visible'
                })
                $('#category-selector .tree').css({
                    "margin-top":"10px",
                    "border": "1px solid #eaeaea",
                    "height": "480px",
                    "overflow": "auto",
                    "padding": "5px",
                })
                treeInstance = createGroupTree($('#category-selector > .tree'), $('#category-selector .group-search > input'), null, treeOption, token);
                treeInstance.refresh();

                $('#category-selector > .tree').one('loaded.jstree', function (e, data) {
                    treeInstance.deselect_all();
                    if (selectedCateID.length > 0) {
                        treeInstance.load_all(null, function () {
                            for(var i=0; i<selectedCateID.length; i++){
                                treeInstance.select_node(treeInstance.get_node(selectedCateID[i]));
                            }
                        });
                    }
                }).on('changed.jstree', function (e, data) {
                    var selIds = treeInstance.get_selected().map(function (id) {
                        return Number(id)
                    });
                    var allID = -1;
                    if (selIds.length > 1) {
                        var node = data.node;
                        if (node.id == allID) {
                            NW.showConfirmDialog(window.OELang.allGroupsConflictWithOther, function(resp){
                                if(resp == 'yes'){
                                    treeInstance.deselect_all();
                                    treeInstance.select_node(allID);
                                }else{
                                    treeInstance.deselect_node(allID);
                                }
                            })
                        } else if ($.inArray(allID, selIds) >= 0) {
                            NW.showConfirmDialog(window.OELang.allGroupsConflictWithOther, function(resp){
                                if(resp == 'yes'){
                                    treeInstance.deselect_node(allID);
                                }else{
                                    treeInstance.deselect_node(node.id);
                                }
                            })
                        }
                    }
                    if (selIds.length == 1 && oldId.length > 0) {
                        var node = data.node;
                        if (node.id == allID || ($.inArray(""+allID, oldId) != -1)) {
                            if (confirm(window.OELang.allGroupsConflictWithOther)) {
                                oldId = [];
                            } else {
                            }
                        }
                    }

                    //处理父子关系的选择
                    if(node && Number(node.id) > 0 ){
                        var id=Number(node.id);
                        var children_d = node.children_d;
                        //判断是否有子级已经选择了， 如果有子级已经选择了，则把子集设置不选择
                        for(var i=0; i<children_d.length;i++){
                            if( selIds.indexOf(Number(children_d[i]))>-1){
                                treeInstance.deselect_node(children_d[i], true);
                            }
                        }

                        var parents = node.parents;
                        for(var i=0; i<parents.length;i++){
                            if( selIds.indexOf(Number(parents[i]))>-1){
                                treeInstance.deselect_node(parents[i], true);
                            }
                        }
                    }
                })
            },
            width: 750,
            height: 600
        });
        dialog.dialog.content.css({"overflow":"hidden"});
    }



    function setupStudents(token) {
        var grid, groupActions;
        var ajaxLoad = function () {
            var ajaxData = {
                "gid":$("select.groups-filter").val()
            };
            param = ajaxData;
            if(grid){
                grid.clearAjaxParams();
                grid.addAjaxParam("gid", $("select.groups-filter").val());
                grid.addAjaxParam("s", $("input[name='search']").val());
                grid.getDataTable().ajax.reload();
            }else{
                grid = $.nAjaxTable($("#students-list"), window.YKS.listStudents, param);
                groupActions = grid.getTableWrapper().find(".row:first").find(".table-group-actions");
                $("#qs-filters").appendTo(groupActions).css("display", "block");
                $(".table-group-actions").on("change", "select", function (e) {
                    ajaxLoad();
                })
            }
        }

        $("input[name='search']").bind('keypress',function(event){
            if(event.keyCode === 13)   ajaxLoad();
        });
        ajaxLoad();
        NW.buildCheck();

        $(".students-actions").on("click", 'a[href="#delete"]', function (e) {
            e.preventDefault();

            if ($(".checked").length < 1){
                NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }

            var vals = $.makeArray($(".checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function(value){
                return value > 0;
            });

            new jBox("Confirm", {
                confirmButton: window.OELang._delete,
                cancelButton: window.OELang.cancel,
                content: window.OELang.deleteStudenstConfirm.format(vals.length),
                confirm: function () {
                    var data={};
                    data.sid = vals.join(',');
                    data[token] = 1;

                    Metronic.blockUI({
                        message: window.OELang.loading,
                        target: grid.gettableContainer(),
                        overlayColor: 'none',
                        cenrerY: true,
                        boxed: true
                    });

                    $.post(window.YKS.deleteStudents, data).done(function (result) {
                        $(".group-checkable").parent("span").removeClass("checked");
                        result = $.parseJSON(result);
                        var count = result.count;

                        NW.messageBox(window.OELang.notice, result.status == 'success'?window.OELang.deletedNStudents.format(count):result.msg);
                        grid.getDataTable().ajax.reload();
                    }).fail(function (result) {
                        Metronic.unBlock(grid.gettableContainer());
                        NW.messageBox(window.OELang.notice, window.OELang.deleteFailed);
                    })
                }
            }).open();
        })
            .on("click", 'a[href="#modifypwd"]', function (e) {
            e.preventDefault();

            if ($(".checked").length < 1){
                NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }

            var vals = $.makeArray($(".checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function(value){
                return value > 0;
            });


            var jbox = new jBox('Modal', {
                title: $(this).text(),
                content: $($("#modifypwd").text()),
                preventDefault: true,
                onCloseComplete: function(){
                    this.destroy();
                },
                onCreated: function () {
                    var self = this;
                    $(".jBox-content").on('click', "button[type='button']", function () {
                        self.close();
                    });
                    $(".jBox-content").on('submit', ".mpform", function (e) {
                        e.preventDefault();
                        if($("form.mpform input[type='password']").val() == ""){
                            $("form.mpform input").focus();
                            return false;
                        }

                        $("form.mpform input[name='sids']").val(vals.join(","));


                        var submitbtn = $(".jBox-content").find("button[type='submit']");
                        submitbtn.append('<i class="fa fa-spin fa-spinner"></i>').prop("disabled", true);


                        $.post($("form.mpform").attr("action"),
                            $("form.mpform").serialize(), function (data) {
                                self.close();
                                data = $.parseJSON(data);
                                if (data.status == 'ok') {
                                    NW.messageBox(window.OELang.notice, window.OELang.chgpwdSuccess)
                                    $(".checked").removeClass("checked");
                                } else {
                                    alert(data.error);
                                }
                            });
                        return false;
                    });
                },
                minWidth: 280,
                minHeight: 170
            });
            jbox.open();
        })
            .on("click", "a[href='#newstudent']", function (e) {
            e.preventDefault();
            newStudent(function(){
                ajaxLoad();
            })
        })
            .on("click", "a[href='#mtgrp']", function (e) {
            e.preventDefault();

            if ($(".checked").length < 1){
                NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }

            var vals = $.makeArray($(".checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function(value){
                return value > 0;
            });

            var gid = $(this).data("gid"),
                groupName = $(this).text();
            var dialog = NW.showConfirmDialog(window.OELang.mvStuToGroup.format(vals.length, groupName), function (resp) {
                if(resp == "yes"){
                    NW.makeLoading($("#mtcat-dropdown"));

                    var data={};
                    data.sids = vals.join(',');
                    data.gid = gid;
                    data[token] = 1;

                    $.post( window.YKS.chgStuGroup, data, function (data) {
                        dialog.close();
                        data = $.parseJSON(data);
                        if (data.status == 'ok') {
                            NW.messageBox(window.OELang.notice, window.OELang.mvedNStuToGroup.format(vals.length, groupName));
                            ajaxLoad();
                            $(".checked").removeClass("checked");
                            NW.makeUnLoading($("#mtcat-dropdown"))
                        } else {
                            alert(data.error);
                        }

                    });
                }
            })
        })
            .on("click", "a[href='#viewdp']", function(e){
            e.preventDefault();
            var sfid = $(this).data("sfid");
            var jbox = new jBox('Modal', {
                title: $(this).text(),
                ajax:{
                    url: window.YKS.viewDouplicateSfidValue,
                    data:{
                        sfid:sfid
                    }
                },
                preventDefault: true,
                onCloseComplete: function(){
                    this.destroy();
                },
                onCreated: function () {
                    var self = this;
                    $(".jBox-content").on('click', "ul.douplicate-value li", function () {
                        $("input[name='search']").val($(this).find("span.value").text());
                        ajaxLoad();
                        self.close();
                    });
                },
                maxWidth:800,
                maxHeight:500
            }).open();
        })
            .on("click", "a[href='#addtomultiplegroup']", function (e) {
            e.preventDefault();

            if ($(".checked").length < 1){
                NW.messageBox(window.OELang.notice, window.OELang.pleaseSelectFirst);
                return;
            }

            var vals = $.makeArray($(".checked")).map(function (checked, index, a) {
                return $(checked).find("input").val();
            }).filter(function(value){
                return value > 0;
            });

            var btn = $(this);

            selectGroup(btn.text(), [], function(gids, obj){
                var data = {
                    sids: vals.join(","),
                    gids: gids.join(","),
                }
                data[token] = 1;
                NW.makeLoading(obj.btn);
                $.post( window.YKS.addStudentToGroups, data).done(function(rdata){
                    rdata = $.parseJSON(rdata);
                    if(rdata.status=="ok"){
                        ajaxLoad();
                        obj.close();
                    }else{
                        NW.messageBox(window.OELang.notice, rdata.error);
                    }
                }).fail(function(jhx, textStatus, error){
                    NW.messageBox(window.OELang.notice, error);
                }).always(function(){
                    NW.makeUnLoading(btn);
                })
            }, window.OELang.add, token);
        })
            .on("click", "a[href='#delete-field']", function(e){
            e.preventDefault();
            var sfid = $(this).data("sfid"),
                title = $(this).text();

            var dialog = NW.showDialog(window.OELang.deleteStudentFieldTip.format(title), [
                {
                    label: window.OELang.cancel,
                    onClick: function(){
                        dialog.close();
                    }
                },{
                    label: window.OELang._delete,
                    cls: 'btn red',
                    onClick: function(){
                        var btn = $(this);
                        NW.makeLoading(btn);
                        dialog.disableBtns(true);

                        var data = {
                            sfid: sfid
                        }
                        data[token] = 1;

                        $.post(window.YKS.deleteStudentUsedField, data).done(function(rdata){
                            try{
                                rdata = $.parseJSON(rdata);
                            }catch(e){
                                rdata = {
                                    status: 'error',
                                    error: e.message + rdata
                                }
                            }
                            if(rdata.status == 'ok'){
                                NW.messageBox( window.OELang.notice, window.OELang.deleteSuccessfully, function(){
                                    dialog.close();
                                    window.location.reload();
                                })
                            }else{
                                NW.messageBox( window.OELang.notice, rdata.error, function(){

                                })
                            }
                        }).fail(function(j,t,e){
                            NW.messageBox( window.OELang.notice, e, function(){
                                dialog.close();
                            })
                        }).always(function(){
                            NW.makeUnLoading(btn);
                            dialog.disableBtns(false);
                        })
                    }
                }
            ], window.OELang.notice, {
                width: 400
            })
        });


        $("#students-list").on("click", "a[href='#edit']", function (e) {
            e.preventDefault();
            newStudent(function(){
                ajaxLoad();
            }, 0, $(this).data("sid"));
        });
    }

    //用于创建管理分类的右键菜单
    function createCategoryTreeContextMenu(treeEl, searchEl, addNodeEl, treeOptions, catType, token, createNodeCallback){
        return function(node){
            var items = {};
            if(!node.li_attr.hasOwnProperty("createchild") || node.li_attr.createchild == 1){
                items["create"] ={
                    separator_before: false,
                    separator_after: false,
                    _disabled: false,
                    label: window.OELang.newChildCategory,
                    action: function (data) {
                        var inst = $.jstree.reference(data.reference),
                            par = inst.get_node(data.reference);
                        var node = {
                            text: window.OELang.newCategory,
                            li_attr: {
                                title: window.OELang.newCategory,
                                parent_id: par.id,
                                type: catType
                            }
                        };
                        inst.create_node(par, node, 'last', createNodeCallback);
                    }
                }
            }

            if( !node.li_attr.hasOwnProperty("removable") || node.li_attr.removable == 1 ){
                items['remove'] = {
                    separator_before: false,
                    separator_after: false,
                    _disabled: false,
                    label: window.OELang.delCategory,
                    action: function () {
                        var jbox, catids;
                        var content = $('#categories-delete-confirm');
                        return function (data) {
                            var inst = $.jstree.reference(data.reference),
                                node = inst.get_node(data.reference),
                                obj = this;
                            if (inst.is_selected(node)) {
                                catids = inst.get_top_selected();
                            } else {
                                catids = [node.id];
                            }

                            jbox = jbox || new jBox('Modal', {
                                    title: window.OELang.delCategory,
                                    content: content,
                                    closeButton: 'title',
                                    closeOnEsc: true,
                                    onCreated: function () {
                                        content.on('click', 'button[name="confirm"]', $.proxy(function (e) {
                                            var e = e || window.event;
                                            e.preventDefault();
                                            var confirmBtn = $(e.currentTarget);
                                            NW.makeLoading(confirmBtn);
                                            var data = {
                                                catids: catids,
                                                type: catType,
                                                delContent: 0
                                            };
                                            data[token] = 1;
                                            $.ajax({
                                                type: 'POST',
                                                cache:false,
                                                url: window.YKS.deleteCategories,
                                                data: data,
                                                dataType: 'json',
                                                success: function (data, status, xhr) {
                                                    if (data.status === 'success') {
                                                        if (inst.is_selected(catids)) {
                                                            inst.delete_node(inst.get_top_selected());
                                                        } else {
                                                            inst.delete_node(catids);
                                                        }
                                                        if (treeOptions.removedNodeCallback) treeOptions.removedNodeCallback(inst, catids);
                                                    } else {
                                                        alert('status: ' + data.status + '; message: ' + data.message);
                                                    }
                                                },
                                                error: function (xhr, status, error) {
                                                    alert('status: ' + status + '; error: ' + error);
                                                },
                                                complete: function (xhr, status) {
                                                    jbox.close();
                                                    NW.makeUnLoading(confirmBtn);
                                                }
                                            });
                                            content.unbind('click');
                                        }, obj));
                                        content.on('click', 'button[name="cancel"]', function (e) {
                                            var e = e || window.event;
                                            e.preventDefault();
                                            jbox.close();
                                            content.unbind('click');
                                        })
                                    }
                                });
                            jbox.open();
                        };
                    }()
                }
            }

            if( !node.li_attr.hasOwnProperty("editable") || node.li_attr.editable == 1 ){
                items['rename'] = {
                    separator_before: false,
                    separator_after: false,
                    _disabled: false,
                    label: window.OELang.rename,
                    action: function (data) {
                        var inst = $.jstree.reference(data.reference),
                            node = inst.get_node(data.reference);
                        var oldName = node.text;
                        inst.edit(node, 0, function (node, status, cancelled) {
                            if (status) {
                                if ($.trim(oldName) === $.trim((node.text))) return;
                                inst.get_node(node, true).addClass('jstree-loading').attr('aria-busy', true);
                                var data = {
                                    catid : node.id,
                                    title : node.text,
                                    type: catType
                                };
                                data[token] = 1;
                                $.ajax({
                                    url: window.YKS.editCategoryName,
                                    type: 'post',
                                    data: data,
                                    dataType: 'json',
                                    success: function (data, status, xhr) {
                                        if (data.status === 'success') {
                                            var nodeLi = inst.get_node(node.id, true);
                                            nodeLi.attr('title', node.text);
                                            node.li_attr.title = node.text;
                                            if (treeOptions.renamedNodeCallback) treeOptions.renamedNodeCallback(inst, node);
                                        } else {
                                            inst.rename_node(node, oldName);
                                            alert('status: ' + data.status + '; error: ' + data.message);
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        inst.rename_node(node, oldName);
                                        alert('status: ' + status + '; error: ' + error);
                                    },
                                    complete: function (xhr, status) {
                                        inst.get_node(node, true).removeClass('jstree-loading').attr('aria-busy', false);
                                    }
                                });
                            } else {
                                inst.rename_node(node, oldName);
                                alert('rename category failed');
                            }
                        });
                    }
                }
            }
            return items;
        }
    }

    function createCategoryTree(treeEl, searchEl, addNodeEl, treeOptions, catType, token) {

        var createNodeCallback = function (node) {
            var inst = $.jstree.reference(node);
            setTimeout(function () {
                inst.edit(node, 0, function (node, status, cancelled) {
                    if (status) {
                        inst.get_node(node, true).addClass('jstree-loading').attr('aria-busy', true);
                        var data = {
                            title: node.text,
                            parent_id: node.li_attr.parent_id,
                            type: catType
                        };
                        data[token] = 1;
                        $.ajax({
                            url: window.YKS.addCategory2,
                            type: 'post',
                            data: data,
                            dataType: 'json',
                            success: function (data, status, xhr) {
                                if (data.status === 'success') {
                                    var result = data.result;
                                    node.li_attr.title = result.title;
                                    node.li_attr.catid = result.catid;
                                    node.li_attr.parent_id = result.parent_id;
                                    inst.set_id(node, result.catid);
                                    var nodeEl = inst.get_node(node, true);
                                    nodeEl.attr('title', node.text);
                                    if (treeOptions.createdNodeCallback) treeOptions.createdNodeCallback(inst, node);
                                } else {
                                    inst.delete_node(node);
                                    NW.messageBox( window.OELang.title, data.message);
                                }
                            },
                            error: function (xhr, status, error) {
                                inst.delete_node(node);
                                NW.messageBox( window.OELang.title, error);
                            },
                            complete: function (xhr, status) {
                                var n = inst.get_node(node, true);
                                if(n){
                                    n.removeClass('jstree-loading').attr('aria-busy', false);
                                }
                            }
                        });
                    } else {
                        inst.delete_node(node);
                        NW.messageBox( window.OELang.title, 'new category failed');
                    }
                });
            }, 0);
        };

        var options = {
            core: {
                multiple: treeOptions.core.multiple || false,
                check_callback: treeOptions.core.check_callback !== undefined ? treeOptions.core.check_callback : true,
                data: treeOptions.core.data || false
            },
            plugins: ['types', 'wholerow', 'search'].concat(treeOptions.plugins),
            types: {
                "default": {
                    icon: 'fa fa-folder icon-state-warning icon-lg'
                }
            },
            state: treeOptions.state,
            search: {
                show_only_matches: true,
                ajax: function () {
                    var ajax = {
                        url: window.YKS.searchCategories,
                        dataType: 'json',
                        type: 'post',
                        data: {
                            type: catType
                        }
                    };
                    ajax.data[token] = 1;
                    return ajax;
                }()
            },
            contextmenu: {
                select_node: false,
                show_at_node: false,
                items: createCategoryTreeContextMenu(treeEl, searchEl, addNodeEl, treeOptions, catType, token, createNodeCallback)
            },
            dnd: {
                copy: false,
                inside_pos: 'last',
                touch: false,
                large_drop_target: true,
                large_drag_target: true,
                is_draggable: function (nodes, e) {
                    for (var i = 0; i < nodes.length; i++) {
                        if (!nodes[i].id || nodes[i].id <= 0) {
                            return false;
                        }
                    }
                    return true;
                }
            },
            checkbox: treeOptions.checkbox || {
                three_state: false,
                cascade: 'undetermined'
            }
        };


        var treeInst = $.jstree.create(treeEl, options);

        /*---add level 1 category---*/
        if (addNodeEl) {
            addNodeEl.on('click', function (e) {
                var e = e || window.event;
                e.preventDefault();
                var node = {
                    text: window.OELang.newCategory,
                    li_attr: {
                        title: window.OELang.newCategory,
                        type: catType
                    }
                };
                treeInst.create_node('#', node, 'last', createNodeCallback);
            });
        }
        /*---add level 1 category---*/

        /*---categories search---*/
        if (searchEl) {
            searchEl = $(searchEl);
            var to = false;
            searchEl.keyup(function () {
                if (to) {
                    clearTimeout(to);
                }
                to = setTimeout(function () {
                    var str = searchEl.val();
                    treeInst.search(str);
                }, 250);
            });
        }
        /*---categories search---*/

        /*---contextmenu---*/
        if ($.inArray('contextmenu', options.plugins)) {
            var show_contextmenu = $.proxy(treeInst.show_contextmenu, treeInst);
            treeInst.show_contextmenu = function (obj, x, y, e) {
                obj = treeInst.get_node(obj);
                if(!obj || obj.id === $.jstree.root || obj.id <= 0) { return false; }
                show_contextmenu(obj, x, y, e);
            };
        }
        /*---contextmenu---*/

        /*---dnd---*/
        if ($.inArray('dnd', options.plugins)) {
            //所有试卷/试题 和 默认分类 拖拽鼠标悬浮提示
            $(document).on('dnd_move.vakata.jstree', function (e, data) {
                var target = treeInst.get_node(data.event.target);
                if (target.id <= 0) {
                    data.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');
                }
            });

            var move_node = $.proxy($.jstree.core.prototype.move_node, treeInst);
            $.jstree.core.prototype.move_node = function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {
                //所有试卷/试题 和 默认分类 判断，无法移动到这两个分类内部
                if (Array.isArray(obj)) {
                    var parNode = this.get_node(par);
                    // var parCid = parNode.a_attr ? parNode.a_attr.catid : parNode.id;
                    if ((parNode.id <= 0) || (parNode.id === '#' && pos < 2)) {
                        return false;
                    }
                    treeInst.get_node(parNode, true).addClass('jstree-loading').attr('aria-busy', true);
                    var children = parNode.children;
                    var reId, posStr;
                    if (pos === 0 || pos === 'last' || children.length === pos) {
                        reId = parNode.id;
                        posStr = 'last-child';
                    } else {
                        reId = children[pos];
                        posStr = 'before';
                    }
                    var nodes = [];
                    for (var i = 0; i < obj.length; i++) {
                        var node = obj[i];
                        if (Number(this.get_parent(node)) !== Number(reId) || posStr !== 'last-child') {
                            nodes.push(Number(typeof node === 'object' ? node.id : node));
                        }
                    }
                    if (nodes.length > 0) {
                        nodes.reverse();
                        var move_node_ajax = function () {
                            var data = {
                                nodes: nodes,
                                reid: reId,
                                pos: posStr,
                                type: catType
                            };
                            data[token] = 1;
                            $.ajax({
                                url: window.YKS.moveCategories,
                                type: 'post',
                                data: data,
                                dataType: 'json',
                                success: function (data, status, xhr) {
                                    if (data.status === 'success') {
                                        move_node(nodes, par, pos, callback, is_loaded, skip_redraw, origin);
                                    } else {
                                        alert('status: ' + data.status + '; message: ' + data.message);
                                    }
                                },
                                error: function (xhr, status, error) {
                                    alert('status: ' + status + '; error: ' + error);
                                },
                                complete: function (xhr, status) {
                                    treeInst.get_node(parNode, true).removeClass('jstree-loading').attr('aria-busy', false);
                                }
                            });
                        };
                        if (this.is_loaded(parNode)) {
                            move_node_ajax();
                        } else {
                            this.load_node(parNode, move_node_ajax);
                        }
                    } else {
                        //move_node(obj, par, pos, callback, is_loaded, skip_redraw, origin);
                        treeInst.get_node(parNode, true).removeClass('jstree-loading').attr('aria-busy', false);
                    }
                } else {
                    move_node(obj, par, pos, callback, is_loaded, skip_redraw, origin);
                }
            };
        }
        /*---dnd---*/

        return treeInst;
    }

    function setupCreateOrEditExamOrQuesSelCatWindow(catType, selid, token) {
        var treeWindow = $('#categories-tree-2');
        var confirmBtn = treeWindow.find('button[name="confirm"]');
        var treeEl = treeWindow.find('div[name="categories-tree"]');
        var searchEl = treeWindow.find('input[name="categories-search-input"]');
        var addCatEl = treeWindow.find('button[name="create-top-category"]');
        var treeOptions = {
            core: {
                data: {
                    type: 'post',
                    dataType: 'json',
                    url: window.YKS.loadCategories,
                    data: function (node) {
                        var data = {type: catType};
                        data[token] = 1;
                        if (node.id === '#') {
                            data.cats = [{
                                id: 0,
                                text: window.OELang.defaultCategory,
                                li_attr: {catid: 0, title: window.OELang.defaultCategory}
                            }];
                        } else {
                            data.catid = node.id;
                        }
                        return data;
                    }
                }
            },
            plugins: ['contextmenu', 'dnd'],
            createdNodeCallback: function (inst, node) {
                inst.deselect_all();
                inst.select_node(node);
            },
            renamedNodeCallback: function (inst, node) {
                inst.deselect_all();
                inst.select_node(node);

                var chooseEl = $('#choose-category');
                var catTextEl = chooseEl.find('input[type="text"]');
                var catIdEl = chooseEl.find('input[name="jform\[catid\]"]');
                if (Number(node.id) === Number(catIdEl.val())) {
                    catTextEl.val(node.text);
                }
            },
            removedNodeCallback: function (inst, node) {

            }
        };

        var jbox, treeInst;
        $(document).on('click', '#choose-category', function (e) {
            var e = e || window.event;
            e.preventDefault();
            var title = '';
            if (catType == 1) {
                title = window.OELang.pleaseSelectExamCategory;
            } else if (catType == 2){
                title = window.OELang.pleaseSelectQuestionCategory;
            } else {
                title = window.OELang.pleaseSelectCategory;
            }
            jbox = jbox || new jBox('Modal', {
                title: title,
                content: treeWindow,
                closeOnEsc: false,
                closeOnClick: false,
                closeButton: 'title',
                width: 620,
                onCreated: function () {
                    treeInst = treeInst || createCategoryTree(treeEl, searchEl, addCatEl, treeOptions, catType, token);

                    NW.makeLoading(confirmBtn);
                    treeEl.one('loaded.jstree', function (e, data) {
                        treeInst.deselect_all();
                        if (selid > 0) {
                            if (treeInst.get_node(selid)) {
                                treeInst.select_node(selid);
                                NW.makeUnLoading(confirmBtn);
                            } else {
                                treeInst.load_all(null, function () {
                                    treeInst.select_node(selid);
                                    NW.makeUnLoading(confirmBtn);
                                });
                            }
                        } else {
                            treeInst.select_node(0);
                            NW.makeUnLoading(confirmBtn);
                        }
                    });

                    treeEl.on('change.jstree select_node.jstree deselect_node.jstree', function (e, data) {
                        if (treeInst.get_selected().length > 0) {
                            confirmBtn.removeClass('disabled');
                        } else {
                            confirmBtn.addClass('disabled');
                        }
                    });

                    treeWindow.on('click', 'button[name="confirm"]', function (e) {
                        var e = e || window.event;
                        e.preventDefault();

                        if (treeInst.is_loaded('#')) {
                            var chooseEl = $('#choose-category');
                            var catTextEl = chooseEl.find('input[type="text"]');
                            var catIdEl = chooseEl.find('input[name="jform\[catid\]"]');

                            var node = treeInst.get_selected(true).length > 0 ? treeInst.get_selected(true)[0] : treeInst.get_node(0);
                            treeInst.deselect_all();
                            treeInst.select_node(node);
                            catIdEl.val(node.id);
                            catTextEl.val(node.text);
                        }

                        jbox.close();
                    });
                    treeWindow.on('click', 'button[name="cancel"]', function (e) {
                        var e = e || window.event;
                        e.preventDefault();
                        jbox.close();
                    });
                },
                onOpen: function () {
                    if (treeInst) {
                        treeInst.clear_search();
                        searchEl.val('');

                        if (treeInst.is_loaded('#')) {
                            var chooseEl = $('#choose-category');
                            var catTextEl = chooseEl.find('input[type="text"]');
                            var catIdEl = chooseEl.find('input[name="jform\[catid\]"]');

                            treeInst.deselect_all();
                            if (treeInst.get_node(Number(catIdEl.val()))) {
                                treeInst.select_node(Number(catIdEl.val()));
                            } else {
                                treeInst.load_all(null, function () {
                                    if (treeInst.get_node(Number(catIdEl.val()))) {
                                        treeInst.select_node(Number(catIdEl.val()));
                                    } else {
                                        if (treeInst.get_node(0)) {
                                            var node = treeInst.get_node(0);
                                            catIdEl.val(node.id);
                                            catTextEl.val(node.text);
                                        }
                                        treeInst.select_node(0);
                                    }
                                });
                            }
                        }

                        confirmBtn.removeClass('disabled');
                    }
                }
            });
            jbox.close();
            jbox.open();
        });
    }


    function createGroupTreeContextMenu(treeEl, searchEl, addNodeEl, treeOptions, token, createNodeCallback) {
        var catids;
        var content = $('#group-delete-confirm');
        return function (node) {
            var items = {};
            if (!node.li_attr.hasOwnProperty("createchild") || node.li_attr.createchild == 1) {
                items["create"] = {
                    separator_before: false,
                    separator_after: false,
                    _disabled: false,
                    label: window.OELang.newChildGroup,
                    action: function (data) {
                        var inst = $.jstree.reference(data.reference),
                            par = inst.get_node(data.reference);
                        var node = {
                            text: window.OELang.newGroup,
                            li_attr: {
                                title: window.OELang.newGroup,
                                parent_id: par.id
//                                            type: catType
                            }
                        };
                        inst.create_node(par, node, 'last', createNodeCallback);
                    }
                }
            }

            if (!node.li_attr.hasOwnProperty("editable") || node.li_attr.editable == 1) {
                items["rename"] = {
                    separator_before: false,
                    separator_after: false,
                    _disabled: false,
                    label: window.OELang.rename,
                    action: function (data) {
                        var inst = $.jstree.reference(data.reference),
                            node = inst.get_node(data.reference);
                        var oldName = node.text;
                        inst.edit(node, 0, function (node, status, cancelled) {
                            if (status) {
                                if ($.trim(oldName) === $.trim((node.text))) return;
                                inst.get_node(node, true).addClass('jstree-loading').attr('aria-busy', true);
                                var data = {
                                    catid : node.id,
                                    title : node.text
//                                                type: catType
                                };
                                data[token] = 1;
                                $.ajax({
                                    url: window.YKS.editGroupsName,
                                    type: 'post',
                                    data: data,
                                    dataType: 'json',
                                    success: function (data, status, xhr) {
                                        if (data.status === 'success') {
                                            var nodeLi = inst.get_node(node.id, true);
                                            nodeLi.attr('title', node.text);
                                            node.li_attr.title = node.text;
                                            if (treeOptions.renamedNodeCallback) treeOptions.renamedNodeCallback(inst, node);
                                        } else {
                                            inst.rename_node(node, oldName);
                                            alert('status: ' + data.status + '; error: ' + data.message);
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        inst.rename_node(node, oldName);
                                        alert('status: ' + status + '; error: ' + error);
                                    },
                                    complete: function (xhr, status) {
                                        inst.get_node(node, true).removeClass('jstree-loading').attr('aria-busy', false);
                                    }
                                });
                            } else {
                                inst.rename_node(node, oldName);
                                alert('rename category failed');
                            }
                        });
                    }
                }
            }

            if (!node.li_attr.hasOwnProperty("editable") || node.li_attr.editable == 1) {
                items['removable']= {
                    separator_before: false,
                    separator_after: false,
                    _disabled: false,
                    label: window.OELang.delGroup,
                    action: function () {

                        return function (data) {
                            var inst = $.jstree.reference(data.reference),
                                node = inst.get_node(data.reference),
                                type = 'haveStu',
                                obj = this;
                            if (inst.is_selected(node)) {
                                catids = inst.get_top_selected();
                                $.inArray('0',catids) != -1 ? catids.splice($.inArray('0',catids),1):catids;

                            } else {
                                catids = [node.id];
                                var aloneText = node.text;
                            }

                            var data = {
                                gid:catids,
                            }
                            data[token] = 1;
                            var stuNum = 0;
                            $.post(window.YKS.checkGroupStuNum,data).done(function (result) {
                                result = $.parseJSON(result);
                                if(result.status == 'ok'){
                                    stuNum = result.stuNum;
                                    if(stuNum <= 0){
                                        type = 'noStu';
                                    }
                                    if(type == 'noStu'){
                                        content.children('.noStu').show();
                                        content.children('.noStu').siblings().hide();
                                    }else{
                                        content.find('.haveStu p').text(window.OELang.deleteGroupTips.format(stuNum));
                                        content.find('.haveStu').show();
                                        content.children('.haveStu').siblings().hide();
                                    }
                                    var randl = parseInt(Math.random() * (50 - 11 + 1) + 11);
                                    var randr = parseInt(Math.random() * (10 - 1 + 1) + 1);
                                    var verifyContent = '<p>'+ randl +'+'+ randr + '=?</p>';
                                    var jbox = new jBox('Modal', {
                                        title: window.OELang.delGroup,
                                        content: content,
                                        closeButton: 'title',
                                        closeOnEsc: true,
                                        onCloseComplete: function(){
                                            this.destroy();
                                        },
                                        onCreated: function () {
                                            content.on('click', 'button[name="fDelete"]', function (e){
                                                content.find('.forcedDelete p').text(window.OELang.deleteGroupReTips.format(stuNum));
                                                content.find('.forcedDelete .verify'). prepend('<p>'+ randl +'+'+ randr + '=?</p>');
                                                content.find('.haveStu').hide();
                                                content.find('.forcedDelete').show();
                                            });
                                            content.on('click', 'button[name="confirm"]', $.proxy(function (e) {
                                                var e = e || window.event;
                                                e.preventDefault();
                                                if( type == 'haveStu' && Number(content.find("#vResult").val()) != Number(randl+randr)){
                                                    NW.messageBox(window.OELang.notice, window.OELang.verifyResultTips);
                                                    return;
                                                }
                                                var confirmBtn = $(e.currentTarget);
                                                NW.makeLoading(confirmBtn);
                                                var data = {
                                                    catids: catids,
                                                    delContent: 1,
                                                    type: type
                                                };
                                                data[token] = 1;
                                                $.ajax({
                                                    url: window.YKS.deleteGroups,
                                                    type: 'post',
                                                    data: data,
                                                    dataType: 'json',
                                                    success: function (data, status, xhr) {
                                                        if (data.status === 'success') {
                                                            if (inst.is_selected(catids)) {
                                                                inst.delete_node(inst.get_top_selected());
                                                            } else {
                                                                inst.delete_node(catids);
                                                            }
                                                            if (treeOptions.removedNodeCallback) treeOptions.removedNodeCallback(inst, catids);
                                                        } else {
                                                            alert('status: ' + data.status + '; message: ' + data.message);
                                                        }
                                                    },
                                                    error: function (xhr, status, error) {
                                                        alert('status: ' + status + '; error: ' + error);
                                                    },
                                                    complete: function (xhr, status) {
                                                        content.find('.forcedDelete .verify > p').remove();
                                                        content.find('#vResult').val('');
                                                        jbox.close();
                                                        NW.makeUnLoading(confirmBtn);
                                                    }
                                                });
                                            }, obj));
                                            content.on('click', 'button[name="cancel"]', function (e) {
                                                var e = e || window.event;
                                                e.preventDefault();
                                                content.find('.forcedDelete .verify > p').remove();
                                                content.find('#vResult').val('');
                                                jbox.close();
                                            })
                                        }
                                    });
                                    jbox.close();
                                    jbox.open();
                                }
                            }).fail(function (result) {
                                NW.messageBox(window.OELang.notice, result.error);
                            })


                        };
                    }()
                }
            }
            items['ccp'] = null;
            return items;
        }
    }

    function createQuestionnaireCategoryTreeContextMenu(treeEl, searchEl, addNodeEl, treeOptions, token, createNodeCallback) {
        var catids;
        var content = $('#questionnaire-categories-delete-confirm');
        return function (node) {
            var items = {};
            if (!node.li_attr.hasOwnProperty("createchild") || node.li_attr.createchild == 1) {
                items["create"] = {
                    separator_before: false,
                    separator_after: false,
                    _disabled: false,
                    label: window.OELang.newChildGroup,
                    action: function (data) {
                        var inst = $.jstree.reference(data.reference),
                            par = inst.get_node(data.reference);
                        var node = {
                            text: window.OELang.newGroup,
                            li_attr: {
                                title: window.OELang.newGroup,
                                parent_id: par.id,
                                // type: catType
                            }
                        };
                        inst.create_node(par, node, 'last', createNodeCallback);
                    }
                }
            }

            if (!node.li_attr.hasOwnProperty("editable") || node.li_attr.editable == 1) {
                items["rename"] = {
                    separator_before: false,
                    separator_after: false,
                    _disabled: false,
                    label: window.OELang.rename,
                    action: function (data) {
                        var inst = $.jstree.reference(data.reference),
                            node = inst.get_node(data.reference);
                        var oldName = node.text;
                        inst.edit(node, 0, function (node, status, cancelled) {
                            if (status) {
                                if ($.trim(oldName) === $.trim((node.text))) return;
                                inst.get_node(node, true).addClass('jstree-loading').attr('aria-busy', true);
                                var data = {
                                    catid : node.id,
                                    title : node.text
                                };
                                data[token] = 1;
                                $.ajax({
                                    url: window.YKS.editQuestionnaireCategoryName,
                                    type: 'post',
                                    data: data,
                                    dataType: 'json',
                                    success: function (data, status, xhr) {
                                        if (data.status === 'success') {
                                            var nodeLi = inst.get_node(node.id, true);
                                            nodeLi.attr('title', node.text);
                                            node.li_attr.title = node.text;
                                            if (treeOptions.renamedNodeCallback) treeOptions.renamedNodeCallback(inst, node);
                                        } else {
                                            inst.rename_node(node, oldName);
                                            alert('status: ' + data.status + '; error: ' + data.message);
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        inst.rename_node(node, oldName);
                                        alert('status: ' + status + '; error: ' + error);
                                    },
                                    complete: function (xhr, status) {
                                        inst.get_node(node, true).removeClass('jstree-loading').attr('aria-busy', false);
                                    }
                                });
                            } else {
                                inst.rename_node(node, oldName);
                                alert('rename category failed');
                            }
                        });
                    }
                }
            }

            if (!node.li_attr.hasOwnProperty("editable") || node.li_attr.editable == 1) {
                items['removable']= {
                    separator_before: false,
                    separator_after: false,
                    _disabled: false,
                    label: window.OELang.delGroup,
                    action: function () {

                        return function (data) {
                            var inst = $.jstree.reference(data.reference),
                                node = inst.get_node(data.reference),
                                type = 'haveStu',
                                obj = this;
                            if (inst.is_selected(node)) {
                                catids = inst.get_top_selected();
                                $.inArray('0',catids) != -1 ? catids.splice($.inArray('0',catids),1):catids;

                            } else {
                                catids = [node.id];
                                var aloneText = node.text;
                            }

                            var data = {
                                gid:catids,
                            }
                            data[token] = 1;
                            var jbox = new jBox('Modal', {
                                title: window.OELang.delGroup,
                                content: content,
                                closeButton: 'title',
                                closeOnEsc: true,
                                onCloseComplete: function(){
                                    this.destroy();
                                },
                                onCreated: function () {
                                    content.on('click', 'button[name="confirm"]', $.proxy(function (e) {
                                        var e = e || window.event;
                                        e.preventDefault();
                                        var confirmBtn = $(e.currentTarget);
                                        NW.makeLoading(confirmBtn);
                                        var data = {
                                            catids: catids,
                                            delContent: 1,
                                            type: type
                                        };
                                        data[token] = 1;
                                        $.ajax({
                                            url: window.YKS.deleteQuestionnaireCategory,
                                            type: 'post',
                                            data: data,
                                            dataType: 'json',
                                            success: function (data, status, xhr) {
                                                if (data.status === 'success') {
                                                    if (inst.is_selected(catids)) {
                                                        inst.delete_node(inst.get_top_selected());
                                                    } else {
                                                        inst.delete_node(catids);
                                                    }
                                                    if (treeOptions.removedNodeCallback) treeOptions.removedNodeCallback(inst, catids);
                                                } else {
                                                    alert('status: ' + data.status + '; message: ' + data.message);
                                                }
                                            },
                                            error: function (xhr, status, error) {
                                                alert('status: ' + status + '; error: ' + error);
                                            },
                                            complete: function (xhr, status) {
                                                jbox.close();
                                                NW.makeUnLoading(confirmBtn);
                                            }
                                        });
                                    }, obj));
                                    content.on('click', 'button[name="cancel"]', function (e) {
                                        var e = e || window.event;
                                        e.preventDefault();
                                        jbox.close();
                                    })
                                }
                            });
                            jbox.open();


                        };
                    }()
                }
            }
            items['ccp'] = null;
            return items;
        }
    }

    if($.jstree){
        /**
         * 自定义的jstree, 用于解决move_to方法没有判断是否允许移动的功能， 通过往options里传move_to方法来执行自定义的move_to方法
         * @param treeEl
         * @param options
         * @constructor
         */
        function NwJstree(treeEl, options){
            this.treeEl = treeEl;
            this.options = options;
        }
        var _nwJSinstance_counter = 0;
        NwJstree.prototype = Object.create($.jstree.core.prototype);
        NwJstree.prototype.create = function(){
            $.jstree.core.call(this, ++_nwJSinstance_counter);
            var tmp = this;
            var opt = this.options;
            var options = $.extend(true, {}, $.jstree.defaults, this.options);
            if(opt && opt.plugins) {
                options.plugins = opt.plugins;
            }
            $.each(options.plugins, function (i, k) {
                if(i !== 'core') {
                    tmp = tmp.plugin(k, options[k]);
                }
            });
            $(this.treeEl).data('jstree', tmp);
            tmp.init(this.treeEl, options);
            return tmp;
        }
        NwJstree.prototype.move_node = function(obj, par, pos, callback, is_loaded, skip_redraw, origin){
            if(this.options.hasOwnProperty("move_node")){
                this.old_move_node = $.jstree.core.prototype.move_node;
                return this.options.move_node.call(this, obj, par, pos, callback, is_loaded, skip_redraw, origin);
            }
            return $.jstree.core.move_node.call(this, obj, par, pos, callback, is_loaded, skip_redraw, origin);
        }

        $.NwJstree = NwJstree;
    }


    function createGroupTree(treeEl, searchEl, addNodeEl, treeOptions, token) {
        var createNodeCallback = function (node) {
            var inst = $.jstree.reference(node);
            setTimeout(function () {
                inst.edit(node, 0, function (node, status, cancelled) {
                    if (status) {
                        inst.get_node(node, true).addClass('jstree-loading').attr('aria-busy', true);
                        var data = {
                            title: node.text,
                            parent_id: node.li_attr.parent_id
//                                    type: catType
                        };
                        data[token] = 1;
                        $.ajax({
                            url: window.YKS.addGroups,
                            type: 'post',
                            data: data,
                            dataType: 'json',
                            success: function (data, status, xhr) {
                                if (data.status === 'success') {
                                    var result = data.result;
                                    node.li_attr.title = result.title;
                                    node.li_attr.catid = result.gid;
                                    node.li_attr.parent_id = result.parent_id;
                                    inst.set_id(node, result.gid);
                                    var nodeEl = inst.get_node(node, true);
                                    nodeEl.attr('title', node.text);
                                    if (treeOptions.createdNodeCallback) treeOptions.createdNodeCallback(inst, node);
                                } else {
                                    inst.delete_node(node);
                                    alert('status: ' + data.status + '; message: ' + data.message);
                                }
                            },
                            error: function (xhr, status, error) {
                                inst.delete_node(node);
                                alert(error);
                            },
                            complete: function (xhr, status) {
                                inst.get_node(node, true).removeClass('jstree-loading').attr('aria-busy', false);
                            }
                        });
                    } else {
                        inst.delete_node(node);
                        alert('new category failed');
                    }
                });
            }, 0);
        };

        var options = {
            core: {
                multiple: treeOptions.core.multiple || false,
                check_callback: treeOptions.core.check_callback !== undefined ? treeOptions.core.check_callback : true,
                data: treeOptions.core.data || false
            },
            plugins: ['types', 'wholerow', 'search'].concat(treeOptions.plugins),
            types: {
                "default": {
                    icon: 'fa fa-folder icon-state-warning icon-lg'
                }
            },
            state: {
                ttl: 900000
            },
            search: {
                show_only_matches: true,
                ajax: function () {
                    var ajax = {
                        url: window.YKS.searchgroups,
                        dataType: 'json',
                        type: 'post',
                        data: {
//                                    type: catType
                        }
                    };
                    ajax.data[token] = 1;
                    return ajax;
                }()
            },
            contextmenu: {
                select_node: false,
                show_at_node: false,
                items: createGroupTreeContextMenu(treeEl, searchEl, addNodeEl, treeOptions, token, createNodeCallback)
            },
            dnd: {
                copy: false,
                inside_pos: 'last',
                touch: false,
                large_drop_target: true,
                large_drag_target: true,
                is_draggable: function (nodes, e) {
                    for (var i = 0; i < nodes.length; i++) {
                        if (!nodes[i].id || nodes[i].id <= 0) {
                            return false;
                        }
                    }
                    return true;
                }
            },
            checkbox: treeOptions.checkbox || {
                three_state: false,
                cascade: 'undetermined'
            }
        };



        //var treeInst = $.jstree.create(treeEl, options);
        var treeInst = new NwJstree(treeEl, options).create();

        /*---add level 1 category---*/
        if (addNodeEl) {
            addNodeEl.on('click', function (e) {
                var e = e || window.event;
                e.preventDefault();
                var titleDefault = window.OELang.newCategory;
                if(e.target.id == "newRetestGroup"){
                    titleDefault = window.OELang.newRetestGroup;
                }
                var node = {
                    text: titleDefault,
                    li_attr: {
                        title: titleDefault
                    }
                };
                treeInst.create_node('#', node, 'last', createNodeCallback);
            });
        }
        /*---add level 1 category---*/

        /*---categories search---*/
        if (searchEl) {
            searchEl = $(searchEl);
            var to = false;
            searchEl.keyup(function () {
                if (to) {
                    clearTimeout(to);
                }
                to = setTimeout(function () {
                    var str = searchEl.val();
                    treeInst.search(str);
                }, 250);
            });
        }
        /*---categories search---*/

        /*---contextmenu---*/
        if ($.inArray('contextmenu', options.plugins)) {
            var show_contextmenu = $.proxy(treeInst.show_contextmenu, treeInst);
            treeInst.show_contextmenu = function (obj, x, y, e) {
                obj = treeInst.get_node(obj);
                if(!obj || obj.id === $.jstree.root || obj.id <= 0) { return false; }
                show_contextmenu(obj, x, y, e);
            };
        }
        /*---contextmenu---*/

        /*---dnd---*/
        if ($.inArray('dnd', options.plugins)) {
            //所有试卷/试题 和 默认分类 拖拽鼠标悬浮提示
            $(document).on('dnd_move.vakata.jstree', function (e, data) {
                var target = treeInst.get_node(data.event.target);
                if (target.id <= 0) {
                    data.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');
                }
            });

            treeInst.options.move_node = function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {
                //所有试卷/试题 和 默认分类 判断，无法移动到这两个分类内部

                if (Array.isArray(obj)) {
                    var parNode = this.get_node(par);
                    // var parCid = parNode.a_attr ? parNode.a_attr.catid : parNode.id;
                    if ((parNode.id <= 0) || (parNode.id === '#' && pos < 2)) {
                        return false;
                    }

                    var dom = this.get_node(par, true);
                    if(dom){
                        dom.addClass('jstree-loading').attr('aria-busy', true);
                    }
                    var children = parNode.children;
                    var reId, posStr;
                    if (pos === 0 || pos === 'last' || children.length === pos) {
                        reId = parNode.id;
                        posStr = 'last-child';
                    } else {
                        reId = children[pos];
                        posStr = 'before';
                    }
                    var nodes = [];
                    for (var i = 0; i < obj.length; i++) {
                        var node = obj[i];
                        if (Number(this.get_parent(node)) !== Number(reId) || posStr !== 'last-child') {
                            nodes.push(Number(typeof node === 'object' ? node.id : node));
                        }
                    }

                    if (nodes.length > 0) {
                        nodes.reverse();
                        var move_node_ajax = function () {
                            var data = {
                                nodes: nodes,
                                reid: reId,
                                pos: posStr
//                                        type: catType
                            };
                            data[token] = 1;
                            $.ajax({
                                url: window.YKS.moveGroups,
                                type: 'post',
                                data: data,
                                dataType: 'json',
                                success: function (data, status, xhr) {
                                    if (data.status === 'success') {
                                        treeInst.old_move_node.call(treeInst, obj, par, pos, callback, is_loaded, skip_redraw, origin);
                                    } else {
                                        alert('status: ' + data.status + '; message: ' + data.message);
                                    }
                                },
                                error: function (xhr, status, error) {
                                    alert('status: ' + status + '; error: ' + error);
                                },
                                complete: function (xhr, status) {
                                    if(dom){
                                        dom.removeClass('jstree-loading').attr('aria-busy', false);
                                    }
                                }
                            });
                        };
                        if (this.is_loaded(parNode)) {
                            move_node_ajax();
                        } else {
                            this.load_node(parNode, move_node_ajax);
                        }
                    } else {
                        //move_node(obj, par, pos, callback, is_loaded, skip_redraw, origin);
                        this.get_node(parNode, true).removeClass('jstree-loading').attr('aria-busy', false);
                    }
                } else {
                    this.old_move_node(obj, par, pos, callback, is_loaded, skip_redraw, origin);
                }
            };
        }
        /*---dnd---*/

        return treeInst;
    }

    function selectGroupTree(type, token){
        /**/
        var treeWindow = $('#group-tree-1');
        var treeEl = treeWindow.find('div[name="categories-tree"]');
        var addCatEl = treeWindow.find('#newgroup');
        var treeInstsg5;
        if(type == 3){
            var tagsInputEl;
            var tagsInputE2;

            var treeOptions5 = {
                core: {
                    multiple: true,
                    check_callback: true,
                    data: {
                        type: 'post',
                        dataType: 'json',
                        url: window.YKS.loadGroups,
                        data: function (node) {
                            var data = {};
                            data[token] = 1;
                            if (node.id === '#') {
                                data.cats = [];
                            } else {
                                data.catid = node.id;
                            }
                            return data;
                        }
                    }
                },
                plugins: ['checkbox','contextmenu'],
                createdNodeCallback: function (inst, node) {
                    inst.deselect_all();
                    inst.select_node(node);
                },
                renamedNodeCallback: function (inst, node) {
                    inst.deselect_all();
                    inst.select_node(node);
                },
                removedNodeCallback: function (inst, node) {
                }
            };
            var treeInstsgs3 = treeInstsgs3 || $.createGroupTree(treeEl, $('.categories-tree-window .group-search > input'), addCatEl, treeOptions5, token);
            treeInstsg5 = treeInstsgs3;
        }else{
            var tagsInputEl = treeWindow.find('input[name="tagsinput"]');
            var tagsInputE2 = $('input[name="tagsinput1"]');
            tagsInputEl.add(tagsInputE2).tagsinput({
                itemValue: function (item) {
                    return item.li_attr.id;
                },
                itemText: function (item) {
                    return item.li_attr.title;
                },
                trimValue: true,
                allowDuplicates: true
            });
            tagsInputE2.on('itemRemoved', function(event) {
                if (event.item != null) {
                    treeInstsg5.deselect_node(treeInstsg5.get_node(event.item.id));
                    if(event.item.id != "-1"){
                        $("#selectGroup option[value='"+event.item.id+"']").attr('selected',false);
                        if(type == 2){
                            $("input[name='gid']").val('0');
                        }
                    }
                    if($(".group-s>.bootstrap-tagsinput  span").length <= 0){
                        $(".group-s>.bootstrap-tagsinput input").attr("placeholder",OELang.SelectGroupByTemplate);
                    }
                    var num = $("#choose-group-1 .bootstrap-tagsinput").children("span").length
                    $(".selectedCountNumber").html(window.OELang.selectedGroupJs.format(num))
                }
            });

            if($("#selectGroup option:selected").length > 0){
                $("#selectGroup option:selected").each(function(){
                    var tex = {
                        id:$(this).val(),
                        li_attr:{
                            id:$(this).val(),
                            title:$(this).text()
                        }
                    }
                    tagsInputE2.tagsinput('add', tex);
                });
            }else{
                var tex = {
                    id:"-1",
                    li_attr:{
                        id:"-1",
                        title:OELang.noGroup
                    }
                }
                tagsInputE2.tagsinput('add', tex);
            }
            $("#selectGroup option[value='-1']").attr('selected',true);

            if(type == 1){
                var treeOptions5 = {
                    core: {
                        multiple: true,
                        check_callback: true,
                        data: {
                            type: 'post',
                            dataType: 'json',
                            url: window.YKS.loadGroups,
                            data: function (node) {
                                var data = {};
                                data[token] = 1;
                                if (node.id === '#') {
                                    data.cats = [];
                                    data.cats.push({id: 0, text: window.OELang.allStuGroups, li_attr: {catid: 0, title: window.OELang.allStuGroups}});
                                } else {
                                    data.catid = node.id;
                                }
                                return data;
                            }
                        }
                    },
                    plugins: ['checkbox','contextmenu'],
                    createdNodeCallback: function (inst, node) {
                        inst.deselect_all();
                        inst.select_node(node);
                        // refreshCategoryList();
                    },
                    renamedNodeCallback: function (inst, node) {
                        inst.deselect_all();
                        inst.select_node(node);
                        // refreshCategoryList();
//                    if (inst.is_selected(node)) {
//                        loadContentFun(node.id, '', '');
//                    }
                    },
                    removedNodeCallback: function (inst, node) {
//                    loadContentFun(-1, '', '');
                        // refreshCategoryList();
                    }
                };
                var treeInstsgs1 = treeInstsgs1 || createGroupTree(treeEl, $('.categories-tree-window .group-search > input'), addCatEl, treeOptions5, token);
                treeInstsg5 = treeInstsgs1;
                treeInstsg5.refresh();
                if($("#selectGroup option:selected").length > 0) {
                    treeEl.one('loaded.jstree', function (e, data) {
                        treeInstsg5.deselect_all();
                        treeInstsg5.load_all(null, function () {
                            $("#selectGroup").find("option:selected").each(function () {
                                var id = $(this).val();
                                treeInstsg5.select_node(treeInstsg5.get_node(id));
                            });
                        });
                    });
                }
            }else if(type == 2){
                var treeOptions5 = {
                    core: {
                        multiple: true,
                        check_callback: true,
                        data: {
                            type: 'post',
                            dataType: 'json',
                            url: window.YKS.loadGroups,
                            data: function (node) {
                                var data = {};
                                data[token] = 1;
                                if (node.id === '#') {
                                    data.cats = [];
                                } else {
                                    data.catid = node.id;
                                }
                                return data;
                            }
                        }
                    },
                    plugins: ['contextmenu'],
                    createdNodeCallback: function (inst, node) {
                        inst.deselect_all();
                        inst.select_node(node);
                    },
                    renamedNodeCallback: function (inst, node) {
                        inst.deselect_all();
                        inst.select_node(node);
                    },
                    removedNodeCallback: function (inst, node) {
                    }
                };
                var treeInstsgs2 = treeInstsgs2 || createGroupTree(treeEl, $('.categories-tree-window .group-search > input'), addCatEl, treeOptions5, token);
                treeInstsg5 = treeInstsgs2;
            }
        }

        var jbox;
        var selIds = '';
        var oldId = [];
        $(document).on("click","#choose-group-1",function (e){
            e.preventDefault();
            if(type == 3){
                tagsInputE2 = $('input[name="tagsinput1"]');
                tagsInputEl = treeWindow.find('input[name="tagsinput"]');
            }
            var jbox = jbox || new jBox('Modal', {
                title: $(this).attr('data-text'),
                content: treeWindow,
                preventDefault: true,
                onCloseComplete: function(){
                    if($(".group-s>.bootstrap-tagsinput span").length > 0){
                        $(".group-s>.bootstrap-tagsinput input").attr("placeholder","");
                    }else{
                        $(".group-s>.bootstrap-tagsinput input").attr("placeholder",OELang.SelectGroupByTemplate);
                    }

                    if(type != 1){
                        treeInstsg5.deselect_all();
                    }
                    tagsInputEl.tagsinput('removeAll');
                    oldId = [];
                    var displayCount = $(".categories-tree-window .selectedCount");
                    if(typeof displayCount !== undefined){
                        displayCount.html(window.OELang.selectedGroup.format($("#selectGroup option:selected").length))
                    }
                    this.close();
                    // jbox.destroy();
                },
                onCreated: function () {
                    var self = this;
                    tagsInputEl.tagsinput('removeAll');
                    if($("#selectGroup option:selected").length > 0){
                        $("#selectGroup").find("option:selected").each(function(){
                            var id = $(this).val();
                            if (id == -1) return true;
                            var tex = {
                                id:id,
                                li_attr:{
                                    id:id,
                                    title:$(this).text()
                                }
                            }
                            oldId.push(id);
                            tagsInputEl.tagsinput('add', tex);
                            if(type == 1){
                                treeInstsg5.select_node(treeInstsg5.get_node(id));
                            }
                        });
                        treeInstsg5.load_all(null, function () {
                            $("#selectGroup").find("option:selected").each(function () {
                                var id = $(this).val();
                                treeInstsg5.select_node(treeInstsg5.get_node(id));
                            });
                        });
                        var displayCount = $(".categories-tree-window .selectedCount");
                        if(typeof displayCount !== undefined){
                            displayCount.html(window.OELang.selectedGroup.format($("#selectGroup option:selected").length))
                        }
                    }
                    if(type == 2 || type == 1){
                        oldId = [];
                    }

                    tagsInputEl.add(tagsInputE2).tagsinput({
                        itemValue: function (item) {
                            return item.li_attr.id;
                        },
                        itemText: function (item) {
                            return item.li_attr.title;
                        },
                        trimValue: true,
                        allowDuplicates: true
                    });
                    tagsInputEl.add(tagsInputE2).on('itemRemoved', function(event) {
                        if (event.item != null) {
                            treeInstsg5.deselect_node(treeInstsg5.get_node(event.item.id));
                            if(event.item.id != "-1"){
                                //$("#selectGroup option[value='"+event.item.id+"']").attr('selected',false);
                                if( oldId.length > 0 ){
                                    var index = $.inArray(event.item.id, oldId);
                                    if (index >= 0){
                                        oldId.splice(index, 1);
                                    }
                                }
                            }
                        }
                    });
                    treeWindow.find('.bootstrap-tagsinput').off('click', treeWindow.find('.bootstrap-tagsinput'));
                    treeWindow.find('.bootstrap-tagsinput').children('input').attr('readonly', 'readonly');
                    treeEl.on('changed.jstree', function (e, data) {
                        selIds = treeInstsg5.get_selected().map(function(id){return Number(id)});
                        var displayCount = $(".categories-tree-window .selectedCount");
                        if(typeof displayCount !== undefined){
                            displayCount.html(window.OELang.selectedGroup.format(selIds.length))
                        }
                        if(type == 1){
                            if (selIds.length > 1) {
                                var node = data.node;
                                if (node.id == 0) {
                                    if (confirm(window.OELang.allGroupsConflictWithOther)) {
                                        treeInstsg5.deselect_all();
                                        treeInstsg5.select_node(0);
                                        oldId = [];
                                    } else {
                                        treeInstsg5.deselect_node(0);
                                    }
                                } else {
                                    if ($.inArray(0, selIds) >= 0) {
                                        if (confirm(window.OELang.allGroupsConflictWithOther)) {
                                            treeInstsg5.deselect_node(0);
                                        } else {
                                            treeInstsg5.deselect_node(node.id);
                                        }
                                    }
                                }
                            }
                            if(selIds.length == 1 && oldId.length > 0){
                                var node = data.node;
                                if (node.id == 0 || ($.inArray("0", oldId) != -1)){
                                    if (confirm(window.OELang.allGroupsConflictWithOther)) {
                                        oldId = [];
                                    } else {
                                    }
                                }
                            }
                        }
                        tagsInputEl.tagsinput('removeAll');
                        selIds = treeInstsg5.get_selected(true);
                        if($("#selectGroup option:selected").length > 0){
                            $("#selectGroup option:selected").each(function(){
                                var id = $(this).val();
                                if (id == -1) return true;
                                if($.inArray(id, oldId) == -1) return true;

                                var tex = {
                                    id:id,
                                    li_attr:{
                                        id:id,
                                        title:$(this).text()
                                    }
                                }
                                tagsInputEl.tagsinput('add', tex);
                            });
                        }
                        if (selIds.length > 0) {
                            for (var i = 0; i < selIds.length; i++) {
                                var obj = selIds[i];
                                var indexs = $.inArray(obj.id, oldId);
                                if(indexs == -1){
                                    tagsInputEl.tagsinput('add', obj);
                                }else{
                                    oldId.splice(indexs, 1);
                                }
                            }
                        }
                    });

                    treeWindow.on('click', 'button[name="confirm"]', function (e) {
                        var e = e || window.event;
                        e.preventDefault();
                        var newId = tagsInputEl.tagsinput('items')
                        tagsInputE2.tagsinput('removeAll');
                        $(".selectedCountNumber").html(window.OELang.selectedGroupJs.format(selIds.length))
                        if (newId.length > 0) {
                            $("#selectGroup").find("option").attr('selected',false);
                            // $("#selectGroup").find("option").removeAttr("selected");
                            for (var i = 0; i < newId.length; i++) {
                                var obj = newId[i];
                                var tgtOpt = $("#selectGroup").find("option[value*='"+obj.id+"']").length;
                                tagsInputE2.tagsinput('add', obj);
                                if(tgtOpt == 1){
                                    $("#selectGroup option[value='"+obj.id+"']").remove();
                                    $("#selectGroup").append('<option value="'+obj.id+'" selected >'+obj.li_attr.title+'</option>');
                                }else{
                                    $("#selectGroup").append('<option value="'+obj.id+'" selected>'+obj.li_attr.title+'</option>');
                                }
                                if(type == 2){
                                    $("input[name='gid']").val(obj.id);
                                }
                            }
                        }else{
                            $("#selectGroup").find("option").attr('selected',false);
                            if(type == 2){
                                $("input[name='gid']").val('0');
                            }
                        }

                        $("#selectGroup option[value='-1']").attr('selected',true);

                        var height = Number($("#choose-group-1 .bootstrap-tagsinput").css('height').split('p')[0])
                        if(height>37 || !$("a[href='#displayAllGroups']").hasClass('display-hide')){
                            $("#choose-group-1 .yks-blue-default").css({
                                'display':'block',
                                'margin-top':'10px'
                            })
                            $("a[href='#displayAllGroups']").removeClass("display-hide").html(window.OELang.cancelCollection)
                            $("#choose-group-1 .bootstrap-tagsinput").css("height","auto")
                        }else{
                            $("#choose-group-1 .yks-blue-default").css({
                                'display':'inline-block',
                                'margin-top':'0px'
                            })
                            $("a[href='#displayAllGroups']").addClass("display-hide").html(window.OELang.definiteCollection)
                        }
                        jbox.close();
                    });
                    treeWindow.on('click', 'button[name="cancel"]', function (e) {
                        var e = e || window.event;
                        e.preventDefault();
                        jbox.close();
                    });

                },
                    maxWidth:$(window).width()*0.98,
                width: 700,
                maxHeight: 810,
                minHeight: 375
            });
            jbox.open();
        })
        $(document).on("focus",".bootstrap-tagsinput",function () {
            $(".bootstrap-tagsinput > input").attr("disabled","disabled");

        });
        /**/
    }

    function comparedGroupGroupTree(token,callback){
        var treeWindow = $('#group-tree-2');
        var tagsInputEl = treeWindow.find('input[name="tagsinput"]');

        var treeEl = treeWindow.find('div[name="categories-tree"]');
        var addCatEl = treeWindow.find('#newgroup');

        var treeOptions1 = {
                core: {
                    multiple: true,
                    check_callback: true,
                    data: {
                        type: 'post',
                        dataType: 'json',
                        url: window.YKS.loadGroups,
                        data: function (node) {
                            var data = {};
                            data[token] = 1;
                            if (node.id === '#') {
                                data.cats = [];
                            } else {
                                data.catid = node.id;
                            }
                            return data;
                        }
                    }
                },
                plugins: ['checkbox','contextmenu'],
                createdNodeCallback: function (inst, node) {
                    inst.deselect_all();
                    inst.select_node(node);
                },
                renamedNodeCallback: function (inst, node) {
                    inst.deselect_all();
                    inst.select_node(node);
                },
                removedNodeCallback: function (inst, node) {
                }
            };

        var treeInst;
        var selIds = '';
        var oldid = [];
        var jboxs = new jBox('Modal', {
            width:$(window).width()*0.98,
            height:$(window).width()*0.98,
            maxWidth: 620,
            maxHeight: 370,
            title: $('#choose-group-2').text(),
            content: treeWindow
        });
        tagsInputEl.tagsinput({
            itemValue: function (item) {
                return item.li_attr.id;
            },
            itemText: function (item) {
                return item.li_attr.title;
            },
            trimValue: true,
            allowDuplicates: true
        });
        tagsInputEl.on('itemRemoved', function(event) {
            if (event.item != null) {
                treeInst.deselect_node(treeInst.get_node(event.item.id));
                $("#comparedGroup option[value='"+event.item.id+"']").attr("selected",false);
            }
        });

        treeWindow.find('.bootstrap-tagsinput').off('click', treeWindow.find('.bootstrap-tagsinput'));
        treeWindow.find('.bootstrap-tagsinput').children('input').attr('readonly', 'readonly');

        treeEl.on('changed.jstree', function (e, data) {
            selIds = treeInst.get_selected().map(function(id){return Number(id)});
            if (selIds.length > 1) {
                var node = data.node;
                if (node.id == 0) {
                    if (confirm(window.OELang.allCategoryConflictWithOther)) {
                        treeInst.deselect_all();
                        treeInst.select_node(0);
                    } else {
                        treeInst.deselect_node(0);
                    }
                } else {
                    if ($.inArray(0, selIds) >= 0) {
                        if (confirm(window.OELang.allCategoryConflictWithOther)) {
                            treeInst.deselect_node(0);
                        } else {
                            treeInst.deselect_node(node.id);
                        }
                    }
                }
            }
            tagsInputEl.tagsinput('removeAll');
            selIds = treeInst.get_selected(true);
            if (selIds.length > 0) {
                // oldid = [];
                for (var i = 0; i < selIds.length; i++) {
                    var obj = selIds[i];
                    tagsInputEl.tagsinput('add', obj);
                    //$("#comparedGroup option[value='"+obj.id+"']").attr("selected",true);
                }
            }
        });

        treeWindow.on('click', 'button[name="confirm"]', function (e) {
            var e = e || window.event;
            e.preventDefault();
            if (selIds.length > 1) {
                for (var i = 0; i < selIds.length; i++) {
                    var obj = selIds[i];
                    var tgtOpt = $("#comparedGroup").find("option[value*='"+obj.id+"']").length;
                    $("#comparedGroup").append('<option value="'+obj.id+'" selected="selected"></option>');
                }
                $('.cpg').submit();
                jboxs.close();
            }else{
                NW.messageBox(window.OELang.notice, OELang.selectMultipleTips);
                return false;
            }
            callback();
        });
        treeWindow.on('click', 'button[name="cancel"]', function (e) {
            var e = e || window.event;
            // treeInstmain.refresh();

            e.preventDefault();
            treeInst.deselect_all();
            callback();
            jboxs.close();
        });

        $(document).on("click","#choose-group-2",function (e){
            e.preventDefault();
            treeInst = treeInst || $.createGroupTree(treeEl, null, addCatEl, treeOptions1, token);
            treeInst.refresh ();
                var cgid = $(this).data("gid");
                var ctitle = $(this).data("title");

            jboxs.open();
        })
    }

    function AuthorizeWechat(token, callback){
        var frameUrl = window.YKS.wechatBindURL;
        var checkURL = window.YKS.wechatCheckAuthorizedURL;
        var jbox = new jBox('Modal', {
            content: '<iframe src="{0}" width="100%" height="100%" frameborder="0"></iframe>'.format(frameUrl),
            width: 400,
            height: 300
        });
        jbox.open();

        window.onBindedMpAccount = function () {
            var data = {};
            data[token] = 1;
            $.get(checkURL, data)
                .done(function (data) {
                    jbox.close();
                    data = $.parseJSON(data);
                    if (data.status == "ok") {
                        if (data.authed == 1) {
                            callback(true)
                        } else {
                            callback(false)
                        }
                    } else {
                        alert(data.msg)
                    }
                }).fail(function (e) {
                    window.location.reload();
                }
            )
        }
    }
    function setupOrdersPage(token){
        var setupUI = function(target){
            var css = {
                'padding': '10px',
                'max-width': '200px',
                'color': '#303030',
                'background-color': '#FCFAA9', //#f5f5b5
                'border': '1px solid #deca7e',
                '-moz-box-shadow': '0 0 10px rgba(0, 0, 0, .5)',
                '-webkit-box-shadow': '0 0 10px rgba(0, 0, 0, .5)',
                'box-shadow': '0 0 10px rgba(0, 0, 0, .5)',
                'text-shadow': 'none'
            };
            var hide = function (e, $el) {
                $el.slideUp(100);
            }

            return function(){
                $('i.viewfields').jBox('Tooltip', {
                    trigger: 'click',
                    getContent: "tips"
                });


                $(target).find('.showTooltip').tooltipsy({
                    offset: [10, 0],
                    show: function (e, $el) {
                        $el.css({
                            'left': parseInt($el[0].style.left.replace(/[a-z]/g, '')) + 50 + 'px',
                            'opacity': '0.0',
                            'display': 'block'
                        }).animate({
                            'left': parseInt($el[0].style.left.replace(/[a-z]/g, '')) - 50 + 'px',
                            'opacity': '1.0'
                        }, 300);
                    },
                    hide: hide,
                    css: css
                });
                $(target).find(".leftTip").tooltipsy({
                    offset: [-10, 0],
                    show: function (e, $el) {
                        $el.css({
                            'left': parseInt($el[0].style.left.replace(/[a-z]/g, '')) - 50 + 'px',
                            'opacity': '0.0',
                            'display': 'block'
                        }).animate({
                            'left': parseInt($el[0].style.left.replace(/[a-z]/g, '')) + 50 + 'px',
                            'opacity': '1.0'
                        }, 300);
                    },
                    hide: hide,
                    css: css
                });
            }
        }
        var AjaxLoad = function(search,searchType,startTime,endTime,state,onSetup){
            this.search = search;
            this.searchType = searchType;
            this.startTime = startTime;
            this.endTime = endTime;
            this.state = state;
            this.grid = $.nAjaxTable($("#orders-list-table"), window.YKS.listOrders, {
                search:search,
                searchType:searchType,
                startTime:startTime,
                endTime:endTime,
                state:state
            });
            this.grid.getDataTable().on("draw.dt", onSetup);
            this.grid.getDataTable().order = [7,"desc"];
        }
        AjaxLoad.prototype = {
            searchValue:function(search,searchType){
                this.search = search;
                this.searchType = searchType;
                this.reload();
            },
            setTimeRange:function(startTime,endTime){
                this.startTime = startTime;
                this.endTime = endTime;
                this.reload();
            },
            setState:function(state){
              this.state = state;
              this.reload();
            },
            clearAll:function(){
                this.search = "";
                this.searchType = 1;
                this.startTime = 0;
                this.endTime = 0;
                this.state = "";
                this.reload();
            },
            reload:function(){
                var grid = this.grid;
                grid.clearAjaxParams();
                grid.addAjaxParam("search", this.search);
                grid.addAjaxParam("searchType",this.searchType);
                grid.addAjaxParam("startTime", this.startTime);
                grid.addAjaxParam("endTime", this.endTime);
                grid.addAjaxParam("state", this.state);
                grid.getDataTable().ajax.reload();
            },
            getGrid: function () {
                return this.grid;
            }
        }


        var ordersGrid = new AjaxLoad($("input[name='search']").val(),1,0,0,"",function(e){
            setupUI("#orders-list-table")();});
        //搜索
        $("input[name='search']").bind('keypress', function (event) {
            var searchType = 1;//1订单，2姓名
            if (event.keyCode === 13) {
                var value = $("input[name='search']").val();
                var str = value.substring(0,6);
                if(str == "wechat" && value.length >= 20){
                    searchType = 2;
                }
                ordersGrid.searchValue(value,searchType);
            }
        });
        //全部订单
        $(".btn-all-orders").on("click",function(e){
            ordersGrid.clearAll();
            var timeRange = $(".filter-container span.datetime-range");
            timeRange.data("start", "");
            timeRange.data("end", "");
            $("input[name='search']").val("");
            $("#date-dropdown span").html(window.OELang.ordersCreatedDate);
            $("select.state-filter").val("");

        })
        //状态过滤
        $("select.state-filter").on("change",function(e){
            ordersGrid.setState($(this).val());
        })

        //日期选择
        var setupTakenFilterAction = function() {
            $("span.datetime-range").append($("#date-picker").text())
            $(".filter-container input").click(function(e) {
                e.stopPropagation();
            });
            var ranges = {};
            ranges[window.OELang.today] = [ moment().startOf('day'), moment().endOf('day') ];
            ranges[window.OELang.yesterday] = [ moment().subtract(1, 'days').startOf('day'), moment().subtract(1, 'days').endOf('day') ];
            ranges[window.OELang.lastWeek] = [ moment().startOf('week').subtract(7, 'days'), moment().startOf('week') ];
            ranges[window.OELang.lastMonth] = [ moment().startOf('month').subtract(1, 'days').startOf('month'), moment().startOf('month') ];
            ranges[window.OELang.lastNDays.format(7)] = [moment().subtract(7, 'days'), moment()];
            ranges[window.OELang.lastNDays.format(30)] = [moment().subtract(30, 'days'), moment()];
            $(".daterangepicker input").datetimepicker({
                isRTL: Metronic.isRTL(),
                format: $(".daterangepicker").attr("data-date-format"),
                autoclose: true,
                todayBtn: true,
                startDate: "2014-02-14 10:00",
                pickerPosition: (Metronic.isRTL() ? "bottom-right" : "bottom-left"),
                minuteStep: 5
            });

            $(".time-picker-menu").on("click",".time-picker-button",function(e){
                var timeRange = $(".filter-container span.datetime-range");
                var timestart,timeend;
                $(".daterangepicker input").each(function(){
                    if($(this).attr("name") == "time_start"){
                        timestart = $(this).val();
                    }else{
                        timeend = $(this).val();
                    }
                })
                if(timestart==""){
                    NW.messageBox(window.OELang.notice, window.OELang.startTimeisempty);
                    return;
                }
                if(timeend=="") {
                    NW.messageBox(window.OELang.notice, window.OELang.endTimeisempty);
                    return;
                }
                timestartFmt = Date.parse(new Date(timestart))/1000;
                timeendFmt = Date.parse(new Date(timeend))/1000;
                if(timeendFmt < timestartFmt){
                    NW.messageBox(window.OELang.notice, window.OELang.endTimeIsLessThanStarTime);
                    return;
                }
                timeRange.data('start', timestartFmt);
                timeRange.data('end', timeendFmt);

                var payState = $(".btn-state-filter").data("state","");
                ordersGrid.setTimeRange(timestartFmt,timeendFmt);
                $("#date-dropdown span").html(timestart+" - "+timeend);
            }).on("click",".custom-time a",function(e){
                var timeRange = $(".filter-container span.datetime-range");
                var customName = $(this).text();
                var timestart,timeend;
                //开始和结束时间
                timestart = new Date(ranges[customName][0]);
                timeend = new Date(ranges[customName][1]);

                timestartFmt = Date.parse(timestart)/1000;
                timeendFmt = Date.parse(timeend)/1000;

                timeRange.data('start', timestartFmt);
                timeRange.data('end', timeendFmt);

                ordersGrid.setTimeRange( timestartFmt, timeendFmt);
                $("#date-dropdown span").html(customName);
            })

        }
        setupTakenFilterAction();
    }
    function setupIncomeManagementPage(token){
        var bindPhoneWindow = $("#bind-phone-box");
        $(".withdraw-btn").on("click",function(e){
            e.preventDefault();
            var self = $(this);
            var status = self.data("status");

            if(status == 1){
                var jbox = new jBox('Confirm', {
                    title: window.OELang.notice,
                    confirmButton: window.OELang.nameAuthentication,
                    cancelButton: window.OELang.cancel,
                    content: window.OELang.nameAuthenticationTips,
                    confirm:function(){
                        window.location.href = window.YKS.nameAuthentication;
                    }
                });
                jbox.open();
                return false;
            }else if(status == 2){
                window.location.href = window.YKS.nameAuthenticationWaitToCheck;
            }else if(status == 3){
                var rejectReason = self.data("reason");
                var tmpl = '<div class="reject-tips">{0}</div>'+
                            '<div class="reject-reason">{1}</div>';
                var jbox = new jBox('Confirm', {
                    title: window.OELang.notice,
                    confirmButton: window.OELang.recertification,
                    cancelButton: window.OELang.cancel,
                    content: tmpl.format(window.OELang.recertificationTips,rejectReason),
                    confirm:function(){
                        window.location.href = window.YKS.nameAuthentication;
                    }
                });
                jbox.open();
                return false;
            }else if(status == 4){
                var url = self.attr("href");
                window.location.href = url;
            }else if(status == 5){

                var bindPhoneBox = new jBox("Modal", {
                    title: window.OELang.systemHint,
                    content: bindPhoneWindow,
                    maxWidth: 600,
                    minHeight:340,
                    onCreated:function(){

                        $("#bind-phone-box").on("click",".get-code-btn",function(e) {
                            e.preventDefault();
                            var getCodeBtn = $(this);
                            var countDown = 60;
                            var phone = $('#bind-phone-box input[name="phone"]').val();
                            //                            phone = phone.replace(/\s+/g, "");
                            if (!isPhone(phone)) {
                                alert(window.OELang.phoneNumberIsNotCorrect);
                                return false;
                            }
                            getCodeBtn.attr("disable", "disabled");
                            var setCountTime = function () {
                                if (countDown == 0) {
                                    getCodeBtn.removeAttr("disabled");
                                    getCodeBtn.text(window.OELang.sendVertificationCode);
                                    countDown = 60;
                                    return;
                                } else {
                                    getCodeBtn.attr("disabled", "disabled");
                                    getCodeBtn.text(window.OELang.resendSmsWithValue.format(countDown));
                                    countDown--;
                                }
                                setTimeout(function () {
                                    setCountTime();
                                }, 1000);
                            }
                            var data = {
                                phone:phone
                            }
                            data[token] = 1;
                            $.post(window.YKS.bindPhoneSmsCertify,data).done(function(rdata){
                                try{
                                    rdata = $.parseJSON(rdata);
                                }catch (e){
                                    rdata = {
                                        status:'error',
                                        msg: e.message + rdata
                                    }
                                }

                                if(rdata.status == "ok"){
                                    //button开始计时
                                    // NW.messageBox(window.OELang.notice,rdata.msg);
                                    setCountTime();

                                }else{
                                    alert(rdata.msg);
                                    return false;
                                }

                            })

                        }).on("click",".btn-bind-phone",function(e){
                            e.preventDefault();
                            var bindPhoneBtn = $(this);
                            bindPhoneBtn.attr("disable", "disabled");
                            var phone = $('#bind-phone-box input[name="phone"]').val();
                            var code = $('#bind-phone-box input[name="code"]').val();
                            phone = phone.replace(/\s+/g,"");
                            if(!isPhone){
                                alert(window.OELang.phoneNumberIsNotCorrect);
                                bindPhoneBtn.removeAttr("disabled");
                                return false;
                            }
                            //验证码
                            if(code == "" || code == null){
                                alert(window.OELang.pleaseFillVerificationCode);
                                bindPhoneBtn.removeAttr("disabled");
                                return false;
                            }
                            if( isNaN(code) || code.length > 6){
                                alert(window.OELang.vertificationCodeIsIncorrect);
                                bindPhoneBtn.removeAttr("disabled");
                                return false;
                            }
                            var data = {
                                phone:phone,
                                code:code,
                                isWidthraw:1
                            }
                            data[token] = 1;
                            $.post(window.YKS.bindPhone,data).done(function(rdata){
                                try{
                                    rdata = $.parseJSON(rdata);
                                }catch (e){
                                    rdata = {
                                        status:'error',
                                        msg: e.message + rdata
                                    }
                                }
                                if(rdata.status == "ok"){
                                    self.data('status',rdata.state);
                                    bindPhoneBox.close();
                                    alert(rdata.msg);
                                }else{
                                    bindPhoneBtn.removeAttr("disabled");
                                    alert(rdata.msg);

                                }
                            })

                        })

                    },
                    onCloseComplete:function(e){
                        bindPhoneBox.destroy();
                    }

                });
                bindPhoneBox.open();
            }
        })
        var AjaxLoad = function () {
            this.grid = $.nAjaxTable($("#withdraw-list-table"), window.YKS.listWithdraws,{})
        }
        AjaxLoad.prototype = {
            reload:function(){
                var grid = this.grid;
                grid.clearAjaxParams();
            }

        }
        var ordersGrid = new AjaxLoad();

        $(".withdraw-container .portlet-title").on("click",function(e){
            e.preventDefault();
            var portletBody = $(".withdraw-container .portlet-body");
            var show = portletBody.css("display")
            portletBody.css("display",show=="block"?"none":"block");
            $(".withdraw-container .tools a").removeClass(show=="block"?"collapse":"expand").addClass(show=="block"?"expand":"collapse")
        })
        $(".withdraw-container .tools a").on("click",function(e){
          e.preventDefault();
            var portletBody = $(".withdraw-container .portlet-body");
            var show = portletBody.css("display")
            portletBody.css("display",show=="block"?"none":"block");
            $(".withdraw-container .tools a").css("display",show=="block"?"expand":"collapse")
        })
    }
    function setupWithdrawPage(token,balance,minWithdraw,maxWithdraw,withdrawRate){
        var selectBox = function () {
            var sTitle=$(".select-box .select-access");
            var sSelect=$(".select-box li");
            var accessNoSelect = $('input[name="accessnoselect"]');
            var mAccess = $('.select-box .fa-minus');

            sTitle.click(function(e){
                $(this).addClass("span_aa");
                $(this).next("ul").show();
                e.stopPropagation();
            });

            sSelect.click(function(){
                var value = $(this).val();
                if(value <= 0){
                    addAccess();
                }else{
                    var s_text = $(this).html();
                    accessNoSelect.val(value);
                    var s_title_2=$(this).parent('ul').prev(".select-access");
                    s_title_2.html(s_text).removeClass("span_aa");
                    $('<i class="fa fa-angle-down pull-right fa-2x"></i>').appendTo(s_title_2);
                    s_title_2.children("i.fa-minus").remove();
                }
                $(this).parent('ul').hide();
            });

            mAccess.click(function(e){
                e.preventDefault();
                e.stopPropagation();
                var parentLi = $(this).parent('li');
                var accessId = parentLi.val();
                var accessCode = parentLi.data("code");
                var accessNo = parentLi.data("no");
                NW.showConfirmDialog(window.OELang.sureDeleteAccess.format(accessNo,accessCode),function(resp){
                    if(resp == 'yes'){
                        if(accessId <= 0){
                            return false;
                        }

                        var btn = this;
                        var data = {
                            aid: accessId
                        }
                        data[token] = 1;
                        $.post(window.YKS.deleteAccess,data).done(function(rdata){
                            try{
                                rdata = $.parseJSON(rdata);
                            }catch (e){
                                rdata = {
                                    status:'error',
                                    msg: e.message+rdata
                                }
                            }
                            if(rdata.status == 'ok'){
                                NW.messageBox(window.OELang.notice, rdata.msg,function(){
                                    location.reload();
                                });
                            }else{
                                NW.messageBox(window.OELang.notice, rdata.msg);
                            }
                        }).fail(function(j, s, e){
                            NW.messageBox(window.OELang.notice, e);
                        }).always(function(){
                            NW.makeUnLoading($(btn));
                        })
                    }
                })

            })

            $(document).click(function(){
                sTitle.removeClass("span_aa");
                $(".select-box ul").hide();
            });
        }
        selectBox();

        function checkWithdrawAllValue(inputValue){
            var amountInput = $('input[name="withdraw-amount"]');
            if(inputValue < minWithdraw){
                NW.messageBox(window.OELang.notice,window.OELang.withdrawNotEnoughTips.format(inputValue));
                $('span.withdraw-fees').html(window.OELang.withdrawNotEnoughTips.format(inputValue));
                return;
            }
            var amount = 0;
            var withdrawFees = 0;
            var withdrawAllCost = (maxWithdraw + maxWithdraw*withdrawRate).toFixed(2);
            if(inputValue <= withdrawAllCost){
                withdrawFees = Math.ceil(inputValue*100*withdrawRate/(withdrawRate+1));
                amount = inputValue*100 - withdrawFees;
            }else if(inputValue > withdrawAllCost){
                withdrawFees = maxWithdraw*withdrawRate*100;
                amount = maxWithdraw*100;
            }
            $('input[name="withdraw-fee"]').val(withdrawFees);
            withdrawFees = (withdrawFees/100).toFixed(2);
            amount = (amount/100).toFixed(2);
            $('span.withdraw-fees').html(window.OELang.deductWithdrawalFeesTips.format(withdrawFees));
            amountInput.val(amount);
        }

        $('form#withdrawForm').on('click','button[type="submit"]',function(e){
            e.preventDefault();

            var form = document.getElementById('withdrawForm');
            var amount = $('input[name="withdraw-amount"]').val();
            var accessCode = $('input[name="accessnoselect"]').val();
            var agree = document.getElementById("agree");
            var agreement_warning = document.getElementById("agreement_warning");
            var withdraw_warning = document.getElementById("withdraw_warning");
            if(agree.value != "1") {
                agreement_warning.style.display = "inline";
                // NW.messageBox(window.OELang.notice, window.OELang.pleaseAgree);
                return false;
            }else {
                if(amount.length <= 0){
                    withdraw_warning.style.display = "inline";
                    // NW.messageBox(window.OELang.notice,window.OELang.enterYourAmount);
                    return false;
                }
                if(accessCode.length <= 0){
                    NW.messageBox(window.OELang.notice,window.OELang.pleaseSelectYourCard);
                    return false;
                }
                amount = parseFloat(amount);
                // var balance = parseFloat($("a.withdraw-all").data("value"));
                if(amount < minWithdraw || balance < minWithdraw){
                    NW.messageBox(window.OELang.notice,window.OELang.withdrawNotEnoughTips.format(balance));
                    return false;
                }
                if(amount > maxWithdraw){
                    NW.messageBox(window.OELang.notice,window.OELang.withdrawNotEnoughTips.format(balance));
                    return false;
                }
            }
            form.submit();
        }).on('click','a.withdraw-all',function(e){
            // var self = $('a.withdraw-all');
            // var balance = self.data("value");
            checkWithdrawAllValue(balance);
        })

        $('input[name="withdraw-amount"]').bind('input propertychange',function(){
            var self = $(this);
            var value = self.val();
            $('input[name="withdraw-fee"]').val(0);
            if(!isRealNum(value)){
                $('span.withdraw-fees').html(window.OELang.notLessThanZeroTips);
                value = 0;
                self.val(value);
                return false;
            }

            if(value > maxWithdraw){
                value = maxWithdraw
                self.val(value);
            }
            if(getDecimalPlaces(value) > 2){
                value = Math.floor(parseFloat(value)*100)/100;
                self.val(value);
            }
            var withdrawFees = Math.ceil(value*withdrawRate*100)/100;
            withdrawFees = withdrawFees.toFixed(2);
            $('span.withdraw-fees').html(window.OELang.deductWithdrawalFeesTips.format(withdrawFees));
        });
        $('input[name="withdraw-amount"]').change(function(e){
            //2.   的情况
           var agree = document.getElementById("agree");
           var self = $(this);
           var value = self.val();
           value = parseFloat(value);
           value = parseFloat(value).toFixed(2);
               if(value == 0){
                   self.val("");
                   self.attr("placeholder",window.OELang.enterYourAmount);
               }else{
                   self.val(value);
               }
        });

        function getDecimalPlaces(val){
            var x = String(val).indexOf('.') +1;
            if(x == 0){
                return 0;
            }
            var y = String(val).length - x;
            return y;
        }

        function isRealNum(val){
            var flag = false;
            // isNaN()函数 把空串 空格 以及NUll 按照0来处理 所以先去除
            if(val === "" || val ==null){
                flag = false;
            }
            if(!isNaN(val)){
                flag =  true;
            }else{
                flag = false;
            }
            if(val <= 0){
                flag =  false;
            }
            return flag;
        }

        $("a.add-access").on("click",function(e){
            addAccess();
        })
        function addAccess(){
            var winWidth, winHeight;
            if (window.innerWidth){
                winWidth = window.innerWidth;
                winHeight = window.innerHeight;
            }else if ((document.body) && (document.body.clientWidth)){
                winWidth = document.body.clientWidth;
                winHeight = document.body.clientHeight;
            }
            if(winWidth <= 768){
                winWidth = "auto";
            }
            var addAccessBox = new jBox('Modal',{
                width:winWidth*0.5,
                title:window.OELang.addAccessNo,
                trigger:'click',
                onCreated:function(){
                    this.setContent($("#add-access-tmpl").text());
                    var wrongMsg = "";
                    function checkUserName(){
                        var val = $('input[name="accessusername"]').val();
                        var tips = $('.access-user-name-tips');
                        var reg = /^[a-zA-Z\u4e00-\u9fa5]+$/;
                        if(!reg.test(val)){
                            tips.html(window.OELang.wrongAccessUserName);
                            wrongMsg = window.OELang.wrongAccessUserName;
                            return false;
                        }else{
                            wrongMsg = "";
                            tips.html(window.OELang.supportPersonalAccountOnly);
                            return true;
                        }
                    }
                    function checkUserAccess(){
                        var val = $('input[name="accessno"]').val();
                        var tips = $('.access-no-tips');

                        var result = JSON.parse(checkBankNo(val));
                        var isRight = result.isRight;
                        var msg = result.msg;
                        if(isRight){
                            wrongMsg = "";
                            tips.html(window.OELang.supportPersonalAccountOnly);
                            return true;
                        }else{
                            tips.html(msg);
                            wrongMsg = msg;
                            return false;
                        }
                    }
                    $(".add-access-container").on('change','input[name="accessusername"]',function(e){
                        checkUserName();
                    }).on('change','input[name="accessno"]',function(e){
                        checkUserAccess();

                    }).on('click','button[type="submit"]',function(e){
                        e.preventDefault();
                        var accessNo = $('input[name="accessno"]').val();
                        var accessUserName = $('input[name="accessusername"]').val();
                        if(accessUserName.length <= 0){
                            alert(window.OELang.wrongAccessUserName);
                            return false;
                        }
                        if(accessNo.length <= 0){
                            alert(window.OELang.wrongAccessNo);
                            return false;
                        }

                        if(!checkUserAccess()){
                            if(wrongMsg.length > 0){
                                alert(wrongMsg);
                                return false;
                            }
                        }
                        if(!checkUserName()){
                            if(wrongMsg.length > 0){
                                alert(wrongMsg);
                                return false;
                            }
                        }

                        var addAccessForm = $("form#addAccessForm");
                        var action = addAccessForm.attr("action");
                        $.post(action,addAccessForm.serialize(),function(data){
                            data = $.parseJSON(data);
                            if(data.status == "ok"){
                                var tmpl = '<div class="row"><div class="col-md-12 info-return">{0}</div></div>'+
                                    '<div class="row"><div class="col-md-12 info-return">{1}</div></div>'+
                                    '<div class="row"><div class="col-md-12 info-return">{2}</div></div>';
                                var confirmInfosBox = new jBox("Confirm",{
                                    title:data.msg,
                                    confirmButton:window.OELang.sure,
                                    cancelButton:window.OELang.cancel,
                                    content:tmpl.format(window.OELang.userRealNameWithValue.format(data.accessUser),window.OELang.accessNoWithValue.format(data.accessNo),window.OELang.accessTypeWithValue.format(data.accessCode)),
                                    confirm:function(){
                                        confirmInfosBox.close();
                                    },
                                    onCloseComplete:function(){
                                        location.reload();
                                        addAccessBox.close();
                                        this.destroy();
                                    }
                                });
                                confirmInfosBox.open();
                            }else{
                                alert(data.msg);
                            }
                        });

                    })

                },
                onCloseComplete: function(){
                    this.destroy();
                }
            });
            addAccessBox.open();
        }
        /**
         * 检查银行卡号是否符合规则
         * @param bankno 银行卡号
         * @returns
         */
        function checkBankNo(bankno) {
            var bankno = bankno.replace(/\s/g, '');
            var result = {};
            result["isRight"] = false;
            if (bankno == "") {
                result["msg"] = window.OELang.emptyAccessNo;
                return JSON.stringify(result);
            }
            var num = /^\d*$/;// 全数字
            if (!num.exec(bankno)) {
                result["msg"] = window.OELang.wrongAccessNo;
                return JSON.stringify(result);
            }
            if (bankno.length < 16 || bankno.length > 19) {
                result["msg"] = window.OELang.betweenSixteenAndNineteen;
                return JSON.stringify(result);
            }

            // 开头两位
            var strBin = "10,18,30,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,62,65,68,69,84,87,88,94,95,98,99";
            if (strBin.indexOf(bankno.substring(0, 2)) == -1) {
                result["msg"] = window.OELang.wrongAccessNo;
                return JSON.stringify(result);
            }
            // luhn校验
            if (!luhnCheck(bankno)) {
                result["msg"] = window.OELang.wrongAccessNo;
                return JSON.stringify(result);
            }
            result["isRight"] = true;
            return JSON.stringify(result);;
        }

        function luhnCheck(bankno) {
            var lastNum = bankno.substr(bankno.length - 1, 1);
            var first15Num = bankno.substr(0, bankno.length - 1);
            var newArr = new Array();
            for (var i = first15Num.length - 1; i > -1; i--) {
                newArr.push(first15Num.substr(i, 1));
            }
            var arrJiShu = new Array();
            var arrJiShu2 = new Array();
            var arrOuShu = new Array();
            for (var j = 0; j < newArr.length; j++) {
                if ((j + 1) % 2 == 1) {
                    if (parseInt(newArr[j]) * 2 < 9) {
                        arrJiShu.push(parseInt(newArr[j]) * 2);
                    } else {
                        arrJiShu2.push(parseInt(newArr[j]) * 2);
                    }
                } else {
                    arrOuShu.push(newArr[j]);
                }
            }

            var jishu_child1 = new Array();
            var jishu_child2 = new Array();
            for (var h = 0; h < arrJiShu2.length; h++) {
                jishu_child1.push(parseInt(arrJiShu2[h]) % 10);
                jishu_child2.push(parseInt(arrJiShu2[h]) / 10);
            }
            var sumJiShu = 0;
            var sumOuShu = 0;
            var sumJiShuChild1 = 0;
            var sumJiShuChild2 = 0;
            var sumTotal = 0;
            for (var m = 0; m < arrJiShu.length; m++) {
                sumJiShu = sumJiShu + parseInt(arrJiShu[m]);
            }
            for (var n = 0; n < arrOuShu.length; n++) {
                sumOuShu = sumOuShu + parseInt(arrOuShu[n]);
            }
            for (var p = 0; p < jishu_child1.length; p++) {
                sumJiShuChild1 = sumJiShuChild1 + parseInt(jishu_child1[p]);
                sumJiShuChild2 = sumJiShuChild2 + parseInt(jishu_child2[p]);
            }
            // 计算总和
            sumTotal = parseInt(sumJiShu) + parseInt(sumOuShu)
                + parseInt(sumJiShuChild1) + parseInt(sumJiShuChild2);
            // 计算luhn值
            var k = parseInt(sumTotal) % 10 == 0 ? 10 : parseInt(sumTotal) % 10;
            var luhn = 10 - k;
            if (lastNum == luhn) {
                // console.log("验证通过");
                return true;
            } else {
                // alert("银行卡号必须符合luhn校验");
                return false;
            }
        }
    }

    function setupSmsPage(token, eid, brandTitle, iscn){

        var AjaxLoad = function (target,status) {
            this.status = status;
            this.grid = $.nAjaxTable($("#sms-list-table"), window.YKS.listSms,{
                eid:eid,
                status:status
            })
            NW.buildCheck($(target));
        }
        AjaxLoad.prototype = {
            setStatus:function(status){
              this.status = status;
              this.reload();
            },
            reload:function(){
                var grid = this.grid;
                grid.clearAjaxParams();
                grid.addAjaxParam("status", this.status);
                grid.addAjaxParam("eid", eid);
                grid.getDataTable().ajax.reload();
            },
            getGrid: function () {
                return this.grid;
            }

        }
        var smsGrid = new AjaxLoad($('#sms-list-table'),0);

        $('.btns-container').on('click','a.resend-selected-sms',function(e){
            e.preventDefault();
            var ids = $.makeArray($('#sms-list-table').find('div.checker span.checked input.checkboxes')).map(function (item, index, array) {
                var val = Number($(item).val());
                if (val <= 0) {
                    return;
                }
                return val;
            });
            if(ids && ids.length <= 0){
                NW.messageBox(window.OELang.notice,window.OELang.pleaseSelectFirst);
                return;
            }
            var self = $(this);
            var href = self.attr("href");
            var data = {
                eid:eid,
                stid:ids.join(',')
            }
            data[token] = 1;

            var resendBox = new jBox("Confirm",{
                confirmButton: window.OELang.sure,
                cancelButton: window.OELang.cancel,
                content:window.OELang.resendNMessages.format(ids.length),
                confirm:function(e){
                    $.post(href,data).done(function(rdata){
                        try{
                            rdata = $.parseJSON(rdata);
                        }catch (e){
                            rdata = {
                                status:'error',
                                msg: e.message+rdata
                            }
                        }
                        if(rdata.status == "ok"){
                            var sData = {
                                eid:eid
                            }
                            sData[token] = 1;
                            $.get(window.YKS.sendTrigger, sData)
                            resendBox.close();
                            NW.messageBox(window.OELang.notice, window.OELang.sendSMSTipsOne.format(rdata.succsscount));
                        }else{
                            NW.messageBox(window.OELang.notice, rdata.msg);
                        }
                    }).fail(function(e){
                        NW.messageBox(window.OELang.notice, e);
                    })
                },
                onCloseComplete:function(e){
                    resendBox.destroy();
                }
            });
            resendBox.open();
        })
        $('ul.send-type-status').on('click','a',function(e){
            e.preventDefault();
            var self = $(this);
            var sendStatus = self.data("value");
            var sendText = self.text();
            $('#sendTypeDropdown').html(sendText + '<i class="fa fa-caret-down" aria-hidden="true" style="color: #DCDCDC;margin-left: 7px;"></i>');
            smsGrid.setStatus(sendStatus);
        })

        $('#sms-list-table').on("click",'a[data-type="resend"]',function(e){
            e.preventDefault();
            var self = $(this);
            var href = self.attr("href");
            var eidSelf = self.data('eid');
            var data = {
                eid:eidSelf,
            }
            var phoneSend = self.data("phone");
            data[token] = 1;

            var examTitle = self.data("title");
            var smsTmpl = window.OELang.smsTemplateTips.format(brandTitle, examTitle, eidSelf)
            var dialog = NW.showDialog(smsTmpl, [
                {
                    label: window.OELang.cancel,
                    onClick: function(){
                        dialog.close();
                    }
                },{
                    label: window.OELang.send,
                    cls: 'btn yks-blue',
                    onClick: function(){
                        var btn = $(this);
                        NW.makeLoading(btn);
                        dialog.disableBtns(true);

                        $.post(href,data).done(function(rdata){
                            try{
                                rdata = $.parseJSON(rdata);
                            }catch (e){
                                rdata = {
                                    status:'error',
                                    msg: e.message+rdata
                                }
                            }
                            if(rdata.status == "ok"){
                                var sData = {
                                    eid:eid
                                }
                                sData[token] = 1;
                                $.get(window.YKS.sendTrigger, sData)
                                resendBox.close();
                                NW.messageBox(window.OELang.notice, window.OELang.sendSMSTipsOne.format(rdata.succsscount));
                                smsGrid.reload();
                            }else{
                                NW.messageBox(window.OELang.notice, rdata.msg);
                                dialog.close();
                            }
                        }).fail(function(e){
                            NW.messageBox( window.OELang.notice, e, function(){
                                dialog.close();
                            })
                        })
                    }
                }
            ], window.OELang.resendMessageToStudent.format(phoneSend), {
                width: 400
            })

        })
        $(".buy-sms-now").on("click",function(e){
            e.preventDefault();
            //短信充值
            var prepaySmsBox = new jBox("Modal",{
                title:window.OELang.rechargeSmsTitle,
                closeButton: 'title',
                closeOnEsc: true,
                onCreated:function(){
                    this.setContent($("#prepay-sms").text());
                    $(".prepay-sms-button-groups").on("click",".cancel",function(){
                        prepaySmsBox.close();
                    })
                    $('input[name="sms-number"]').on("change",function(e){
                        var price = $(this).data("value");
                        $(".sms-price").html(window.OELang.smsAmounts.format(price));
                    })
                    $('.prepay-sms-container').on("click",'a[type="submit"]',function(e){
                        e.preventDefault();
                        var prepaySmsForm = document.getElementById('prepaySmsForm');
                        prepaySmsBox.close();
                        prepaySmsForm.submit();

                    })
                },
                onCloseComplete:function(){
                    prepaySmsBox.destroy();
                }

            })
            prepaySmsBox.open();
        })

        var refreshSms =  function(){
            var qData = {
                eid:eid
            }
            qData[token] = 1;
            $(".refresh-sms-taken-now").attr("disable","disabled");
            $(".refresh-sms-taken-now").append('<i class="fa fa-spin fa-spinner"></i>');
            $.get(window.YKS.querySms,qData).done(function(rdata){
                rdata = $.parseJSON(rdata);
                if (rdata.status == "ok") {
                    smsGrid.reload();
                }
                $(".refresh-sms-taken-now").find("i.fa-spinner").remove();
                $(".refresh-sms-taken-now").removeAttr("disabled");
            }).fail(function(e){
                $(".refresh-sms-taken-now").find("i.fa-spinner").remove();
            });
        }
        refreshSms();
        $(".refresh-sms-taken-now").on("click",function(e){
            e.preventDefault();
            var self = $(this);
            refreshSms();
        })

    }
    function setupNameAuthenticationPage(token){

        $("#nameAuthentication").on("click",'button[type="submit"]',function(e){
            e.preventDefault();
            var self = $(this);
            self.append('<i class="fa fa-spin fa-spinner"></i>').addClass('disabled');
            var realNameInput = $('#realNameInput').val();
            var phoneInput = $("#phoneInput").val();
            var idNumberInput = $('#idNumberInput').val();
            var verificationCode = $('#codeInput').val();

            var nameAuthenticationForm = document.getElementById('nameAuthentication');
            var formData = new FormData(nameAuthenticationForm);

            //姓名
            if(realNameInput.length <= 0){
                NW.messageBox(window.OELang.notice,window.OELang.nameIsEmpty);
                $('button[type="submit"]').removeClass("disabled").find("i.fa-spinner").remove();
                return false;
            }
            var realNameReg = /^[a-zA-Z\u4e00-\u9fa5]+$/;
            if(!realNameReg.test(realNameInput)){
                NW.messageBox(window.OELang.notice,window.OELang.pleaseFillYourRealName);
                $('button[type="submit"]').removeClass("disabled").find("i.fa-spinner").remove();
                return false;
            }

            if(!isPhone(phoneInput)){
                NW.messageBox(window.OELang.notice, window.OELang.pleaseEnterCorrectPhoneNumber);
                $('button[type="submit"]').removeClass("disabled").find("i.fa-spinner").remove();
                return false;
            }
            if(!checkCard(idNumberInput)){
                NW.messageBox(window.OELang.notice, window.OELang.pleaseEnterCorrectIDNumber);
                $('button[type="submit"]').removeClass("disabled").find("i.fa-spinner").remove();
                return false;
            }
            if(verificationCode.length <= 0){
                NW.messageBox(window.OELang.notice,window.OELang.pleaseFillVerificationCode);
                $('button[type="submit"]').removeClass("disabled").find("i.fa-spinner").remove();
                return false;
            }
            //图片
            var imageFileOne = $('#idImageOneInput')[0].files[0];
            var imageFileTwo = $('#idImageTwoInput')[0].files[0];


            if(imageFileOne == undefined || imageFileTwo == undefined){
                NW.messageBox(window.OELang.notice,window.OELang.idCardImageIsEmpty);
                $('button[type="submit"]').removeClass("disabled").find("i.fa-spinner").remove();
                return false;
            }
            //文件类型
            var imageFileOneType = imageFileOne.type.split('/')[0];
            var imageFileTwoType = imageFileTwo.type.split('/')[0];
            if(imageFileOneType != "image" || imageFileTwoType != "image"){
                NW.messageBox(window.OELang.notice,window.OELang.imageTypeIsNotRight);
                $('button[type="submit"]').removeClass("disabled").find("i.fa-spinner").remove();
                return false;
            }
            //文件大小
            var imageFileOneSize = imageFileOne.size;
            var imageFileTwoSize = imageFileTwo.size;
            if(imageFileOneSize <= 0 || imageFileTwoSize <= 0){
                NW.messageBox(window.OELang.notice,window.OELang.idCardImageIsEmpty);
                returnMethod();
            }
            var maxImageSize = 1024*1024*5;
            var needCompressionSize = 1024*1024*0.8;
            if(imageFileOneSize > maxImageSize || imageFileTwoSize > maxImageSize){
                NW.messageBox(window.OELang.notice,window.OELang.idCardImageSizeIsTooLarge);
                $('button[type="submit"]').removeClass("disabled").find("i.fa-spinner").remove();
                return false;
            }
            var compressionData = {
                quality:0.2,
            }

            formData.append(token,1);

            var compressFunction = function(callBack){
                if(imageFileOneSize > needCompressionSize && imageFileTwoSize > needCompressionSize){
                    var imageFileOneName = imageFileOne.name;
                    photoCompress(imageFileOne,compressionData,function(base64Codes){
                        var b1 = convertBase64UrlToFile(base64Codes,imageFileOneName);
                        formData.set("imgOne",b1);

                        var imageFileTwoName = imageFileTwo.name;
                        photoCompress(imageFileTwo,compressionData,function(base64Codes){
                            var b2 = convertBase64UrlToFile(base64Codes,imageFileTwoName);
                            formData.set("imgTwo",b2);

                            callBack();
                        })
                    })
                }else if(imageFileTwoSize > needCompressionSize && imageFileOneSize <= needCompressionSize){
                    var imageFileTwoName = imageFileTwo.name;
                    photoCompress(imageFileTwo,compressionData,function(base64Codes){
                        var b2 = convertBase64UrlToFile(base64Codes,imageFileTwoName);
                        formData.set("imgTwo",b2);

                        callBack();
                    })
                }else if(imageFileTwoSize <= needCompressionSize && imageFileOneSize > needCompressionSize){
                    var imageFileOneName = imageFileOne.name;
                    photoCompress(imageFileOne,compressionData,function(base64Codes){
                        var b1 = convertBase64UrlToFile(base64Codes,imageFileOneName);
                        formData.set("imgOne",b1);

                        callBack();
                    })
                }else{
                    callBack();
                }

            }

            compressFunction(function(){
                var url = nameAuthenticationForm.action;
                $.ajax({
                    type:"post",
                    url:url,
                    data:formData,
                    dataType: 'json',
                    processData: false, // Don't process the files, we're using FormData
                    contentType: false,
                    cache:false,
                    success:function(rData, status, xhr){
                        if(rData.status == "ok"){
                            window.location.href = window.YKS.nameAuthenticationWaitToCheck;

                        }else{
                            NW.messageBox(window.OELang.notice,rData.msg);
                        }
                        $('button[type="submit"]').removeClass("disabled").find("i.fa-spinner").remove();
                        return false;
                    },
                    error:function(xhr,status,error){
                        alert('status: ' + status + '; error: ' + error);
                    }
                })
            })


            // nameAuthenticationForm.submit();
        }).on("click",".send-code-btn",function(e){
            e.preventDefault();
            var phone = $("#phoneInput").val();

            var self = $(this);
            var countDown = 60;
            if(!isPhone(phone)){
                if(phone.length <= 0){
                    NW.messageBox(window.OELang.notice,window.OELang.phoneNumberCanNotBeBlank);
                    return;
                }
                NW.messageBox(window.OELang.notice,window.OELang.phoneNumberIsNotCorrect);
                return;
            }
            self.attr("disable","disabled");

            var setCountTime = function(){
                if(countDown == 0){
                    self.removeAttr("disabled");
                    self.val(window.OELang.sendVertificationCode);
                    countDown = 60;
                    return;
                }else{
                    self.attr("disabled","disabled");
                    self.val(window.OELang.resendSmsWithValue.format(countDown));
                    countDown--;
                }
                setTimeout(function(){
                    setCountTime();
                },1000);
            }

            var data = {
                phone:phone
            }
            data[token] = 1;
            $.post(window.YKS.nameAuthenticationSmsCertify,data).done(function(rdata){
                try{
                    rdata = $.parseJSON(rdata);
                }catch (e){
                    rdata = {
                        status:'error',
                        msg: e.message + rdata
                    }
                }

                if(rdata.status == "ok"){
                    //button开始计时
                    // NW.messageBox(window.OELang.notice,rdata.msg);
                    setCountTime();

                }else{
                    NW.messageBox(window.OELang.notice,rdata.msg);
                    return false;
                }

            })

        })

        ////压缩图片//////
        function photoCompress(file,w,objDiv){
            var ready=new FileReader();
            /*开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,readyState属性的值会成为DONE,如果设置了onloadend事件处理程序,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容.*/
            ready.readAsDataURL(file);
            ready.onload=function(){
                var re=this.result;
                canvasDataURL(re,w,objDiv)
            }
        }
        var canvasDataURL = function(path, obj, callback){
            var img = new Image();
            img.src = path;
            img.onload = function(){
                var that = this;
                // 默认按比例压缩
                var w = that.width,
                    h = that.height,
                    scale = w / h;
                w = obj.width || w;
                h = obj.height || (w / scale);
                var quality = 0.7;  // 默认图片质量为0.7
                //生成canvas
                var canvas = document.createElement('canvas');
                var ctx = canvas.getContext('2d');
                // 创建属性节点
                var anw = document.createAttribute("width");
                anw.nodeValue = w;
                var anh = document.createAttribute("height");
                anh.nodeValue = h;
                canvas.setAttributeNode(anw);
                canvas.setAttributeNode(anh);
                ctx.drawImage(that, 0, 0, w, h);
                // 图像质量
                if(obj.quality && obj.quality <= 1 && obj.quality > 0){
                    quality = obj.quality;
                }
                // quality值越小，所绘制出的图像越模糊
                var base64 = canvas.toDataURL('image/jpeg', quality);
                // 回调函数返回base64的值
                callback(base64);
            }
        }
        /**
         * 将以base64的图片url数据转换为Blob
         * @param urlData
         *            用url方式表示的base64图片数据
         */
        var convertBase64UrlToFile = function (urlData,fileName){
            var arr = urlData.split(','), mime = arr[0].match(/:(.*?);/)[1],
                bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
            while(n--){
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new File([u8arr],fileName, {type:mime});
        }


        ////压缩图片/////

        ///////身份证验证/////////////////////////////
        var vcity = { 11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",
            21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏",
            33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",
            42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",
            51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",
            63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"
        };
        checkCard = function(card){
            //是否为空
            if(card === '') {
                return false;
            }
            //校验长度，类型
            if(isCardNo(card) === false) {
                return false;
            }
            //检查省份
            if(checkProvince(card) === false) {
                return false;
            }
            //校验生日
            if(checkBirthday(card) === false) {
                return false;
            }
            //检验位的检测
            if(checkParity(card) === false) {
                return false;
            }
            return true;
        };


        //检查号码是否符合规范，包括长度，类型
        isCardNo = function(card) {
            //身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X
            var reg = /(^\d{15}$)|(^\d{17}(\d|X)$)/;
            if(reg.test(card) === false)
            {
                return false;
            }

            return true;
        };

        //取身份证前两位,校验省份
        checkProvince = function(card) {
            var province = card.substr(0,2);
            if(vcity[province] == undefined) {
                return false;
            }
            return true;
        };

        //检查生日是否正确
        checkBirthday = function(card) {
            var len = card.length;
            //身份证15位时，次序为省（3位）市（3位）年（2位）月（2位）日（2位）校验位（3位），皆为数字
            if(len == '15') {
                var re_fifteen = /^(\d{6})(\d{2})(\d{2})(\d{2})(\d{3})$/;
                var arr_data = card.match(re_fifteen);
                var year = arr_data[2];
                var month = arr_data[3];
                var day = arr_data[4];
                var birthday = new Date('19'+year+'/'+month+'/'+day);
                return verifyBirthday('19'+year,month,day,birthday);
            }
            //身份证18位时，次序为省（3位）市（3位）年（4位）月（2位）日（2位）校验位（4位），校验位末尾可能为X
            if(len == '18') {
                var re_eighteen = /^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$/;
                var arr_data = card.match(re_eighteen);
                var year = arr_data[2];
                var month = arr_data[3];
                var day = arr_data[4];
                var birthday = new Date(year+'/'+month+'/'+day);
                return verifyBirthday(year,month,day,birthday);
            }
            return false;
        };

        //校验日期
        verifyBirthday = function(year,month,day,birthday) {
            var now = new Date();
            var now_year = now.getFullYear();
            //年月日是否合理
            if(birthday.getFullYear() == year && (birthday.getMonth() + 1) == month && birthday.getDate() == day) {
                //判断年份的范围（3岁到100岁之间)
                var time = now_year - year;
                if(time >= 3 && time <= 100)
                {
                    return true;
                }
                return false;
            }
            return false;
        };

        //校验位的检测
        checkParity = function(card) {
            //15位转18位
            card = changeFivteenToEighteen(card);
            var len = card.length;
            if(len == '18') {
                var arrInt = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);
                var arrCh = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');
                var cardTemp = 0, i, valnum;
                for(i = 0; i < 17; i ++) {
                    cardTemp += card.substr(i, 1) * arrInt[i];
                }
                valnum = arrCh[cardTemp % 11];
                if (valnum == card.substr(17, 1)) {
                    return true;
                }
                return false;
            }
            return false;
        };

        //15位转18位身份证号
        changeFivteenToEighteen = function(card) {
            if(card.length == '15') {
                var arrInt = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);
                var arrCh = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');
                var cardTemp = 0, i;
                card = card.substr(0, 6) + '19' + card.substr(6, card.length - 6);
                for(i = 0; i < 17; i ++) {
                    cardTemp += card.substr(i, 1) * arrInt[i];
                }
                card += arrCh[cardTemp % 11];
                return card;
            }
            return card;
        };
        ///////身份证验证

    }

    function freeGroupTree(token){
        /**/
        var treeWindow = $('#free-group-tree-1');
        var treeEl = treeWindow.find('div[name="categories-tree"]');
        var addCatEl = treeWindow.find('#newgroup');


        var tagsInputEl = treeWindow.find('input[name="tagsinput"]');
        var tagsInputE2 = $('input[name="tagsinput-pay"]');
        tagsInputEl.add(tagsInputE2).tagsinput({
            itemValue: function (item) {
                return item.li_attr.id;
            },
            itemText: function (item) {
                return item.li_attr.title;
            },
            trimValue: true,
            allowDuplicates: true
        });
        tagsInputE2.on('itemRemoved', function(event) {
            if (event.item != null) {
                treeInstsgsFg.deselect_node(treeInstsgsFg.get_node(event.item.id));
                if(event.item.id != "-1"){
                    $("#selectFreeGroup option[value='"+event.item.id+"']").attr('selected',false);

                }
                if($(".group-s>.bootstrap-tagsinput  span").length <= 0){
                    $(".group-s>.bootstrap-tagsinput input").attr("placeholder",OELang.SelectGroupByTemplate);
                }
            }
        });

        if($("#selectFreeGroup option:selected").length > 0){
            $("#selectFreeGroup option:selected").each(function(){
                var tex = {
                    id:$(this).val(),
                    li_attr:{
                        id:$(this).val(),
                        title:$(this).text()
                    }
                }
                tagsInputE2.tagsinput('add', tex);
            });
        }else{
            var tex = {
                id:"-1",
                li_attr:{
                    id:"-1",
                    title:OELang.noGroup
                }
            }
            tagsInputE2.tagsinput('add', tex);
        }
        $("#selectFreeGroup option[value='-1']").attr('selected',true);

        var treeOptionsFg = {
            core: {
                multiple: true,
                check_callback: true,
                data: {
                    type: 'post',
                    dataType: 'json',
                    url: window.YKS.loadGroups,
                    data: function (node) {
                        var data = {};
                        data[token] = 1;
                        if (node.id === '#') {
                            data.cats = [];
                            data.cats.push({id: 0, text: window.OELang.allStuGroups, li_attr: {catid: 0, title: window.OELang.allStuGroups}});
                        } else {
                            data.catid = node.id;
                        }
                        return data;
                    }
                }
            },
            plugins: ['checkbox','contextmenu'],
            createdNodeCallback: function (inst, node) {
                inst.deselect_all();
                inst.select_node(node);
                // refreshCategoryList();
            },
            renamedNodeCallback: function (inst, node) {
                inst.deselect_all();
                inst.select_node(node);
                // refreshCategoryList();
//                    if (inst.is_selected(node)) {
//                        loadContentFun(node.id, '', '');
//                    }
            },
            removedNodeCallback: function (inst, node) {
//                    loadContentFun(-1, '', '');
                // refreshCategoryList();
            }
        };
        var treeInstsgsFg = treeInstsgsFg || createGroupTree(treeEl, $('#free-group-tree-1 .group-search > input'), addCatEl, treeOptionsFg, token);
        if($("#selectFreeGroup option:selected").length > 0) {
            treeEl.one('loaded.jstree', function (e, data) {
                treeInstsgsFg.deselect_all();
                treeInstsgsFg.load_all(null, function () {
                    $("#selectFreeGroup").find("option:selected").each(function () {
                        var id = $(this).val();
                        treeInstsgsFg.select_node(treeInstsgsFg.get_node(id));
                    });
                });
            });
        }

        var jbox;
        var selIds = '';
        var oldId = [];
        $(document).on("click","#free-group-set",function (e){
            e.preventDefault();
            var jbox = jbox || new jBox('Modal', {
                    title: $(this).attr('data-text'),
                    content: treeWindow,
                    preventDefault: true,
                    onCloseComplete: function(){

                        treeInstsgsFg.deselect_all();
                        tagsInputEl.tagsinput('removeAll');
                        oldId = [];
                        this.close();
                        //jbox.destroy();
                    },
                    onCreated: function () {
                        var self = this;

                        tagsInputEl.tagsinput('removeAll');
                        if($("#selectFreeGroup option:selected").length > 0){
                            $("#selectFreeGroup").find("option:selected").each(function(){
                                var id = $(this).val();
                                if (id == -1) return true;
                                var tex = {
                                    id:id,
                                    li_attr:{
                                        id:id,
                                        title:$(this).text()
                                    }
                                }
                                // oldId.push(id);
                                tagsInputEl.tagsinput('add', tex);
                                treeInstsgsFg.select_node(treeInstsgsFg.get_node(id));
                            });
                        }

                        tagsInputEl.add(tagsInputE2).tagsinput({
                            itemValue: function (item) {
                                return item.li_attr.id;
                            },
                            itemText: function (item) {
                                return item.li_attr.title;
                            },
                            trimValue: true,
                            allowDuplicates: true
                        });
                        tagsInputEl.add(tagsInputE2).on('itemRemoved', function(event) {
                            if (event.item != null) {
                                treeInstsgsFg.deselect_node(treeInstsgsFg.get_node(event.item.id));
                                if(event.item.id != "-1"){
                                    //$("#selectGroup option[value='"+event.item.id+"']").attr('selected',false);
                                    if( oldId.length > 0 ){
                                        var index = $.inArray(event.item.id, oldId);
                                        if (index >= 0){
                                            oldId.splice(index, 1);
                                        }
                                    }
                                }
                            }
                        });
                        treeWindow.find('.bootstrap-tagsinput').off('click', treeWindow.find('.bootstrap-tagsinput'));
                        treeWindow.find('.bootstrap-tagsinput').children('input').attr('readonly', 'readonly');
                        treeEl.on('changed.jstree', function (e, data) {
                            selIds = treeInstsgsFg.get_selected().map(function(id){return Number(id)});
                            if (selIds.length > 1) {
                                var node = data.node;
                                if (node.id == 0) {
                                    if (confirm(window.OELang.allGroupsConflictWithOther)) {
                                        treeInstsgsFg.deselect_all();
                                        treeInstsgsFg.select_node(0);
                                        oldId = [];
                                    } else {
                                        treeInstsgsFg.deselect_node(0);
                                    }
                                } else {
                                    if ($.inArray(0, selIds) >= 0) {
                                        if (confirm(window.OELang.allGroupsConflictWithOther)) {
                                            treeInstsgsFg.deselect_node(0);
                                        } else {
                                            treeInstsgsFg.deselect_node(node.id);
                                        }
                                    }
                                }
                            }
                            if(selIds.length == 1 && oldId.length > 0){
                                var node = data.node;
                                if (node.id == 0 || ($.inArray("0", oldId) != -1)){
                                    if (confirm(window.OELang.allGroupsConflictWithOther)) {
                                        oldId = [];
                                    } else {
                                    }
                                }
                            }
                            tagsInputEl.tagsinput('removeAll');
                            selIds = treeInstsgsFg.get_selected(true);
                            if($("#selectFreeGroup option:selected").length > 0){
                                $("#selectFreeGroup option:selected").each(function(){
                                    var id = $(this).val();
                                    if (id == -1) return true;
                                    if($.inArray(id, oldId) == -1) return true;

                                    var tex = {
                                        id:id,
                                        li_attr:{
                                            id:id,
                                            title:$(this).text()
                                        }
                                    }
                                    tagsInputEl.tagsinput('add', tex);
                                });
                            }
                            if (selIds.length > 0) {
                                for (var i = 0; i < selIds.length; i++) {
                                    var obj = selIds[i];
                                    var indexs = $.inArray(obj.id, oldId);
                                    if(indexs == -1){
                                        tagsInputEl.tagsinput('add', obj);
                                    }else{
                                        oldId.splice(indexs, 1);
                                    }
                                }
                            }
                        });

                        treeWindow.on('click', 'button[name="confirm"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            var newId = tagsInputEl.tagsinput('items')
                            tagsInputE2.tagsinput('removeAll');
                            // console.log(selIds.length)
                            if (newId.length > 0) {
                                $("#selectFreeGroup").find("option").attr('selected',false);
                                // $("#selectGroup").find("option").removeAttr("selected");
                                for (var i = 0; i < newId.length; i++) {
                                    var obj = newId[i];
                                    var tgtOpt = $("#selectFreeGroup").find("option[value*='"+obj.id+"']").length;
                                    tagsInputE2.tagsinput('add', obj);
                                    if(tgtOpt == 1){
                                        $("#selectFreeGroup option[value='"+obj.id+"']").remove();
                                        $("#selectFreeGroup").append('<option value="'+obj.id+'" selected >'+obj.li_attr.title+'</option>');
                                    }else{
                                        $("#selectFreeGroup").append('<option value="'+obj.id+'" selected>'+obj.li_attr.title+'</option>');
                                    }

                                }
                            }else{
                                $("#selectFreeGroup").find("option").attr('selected',false);

                            }

                            $("#selectFreeGroup option[value='-1']").attr('selected',true);

                            jbox.close();
                        });
                        treeWindow.on('click', 'button[name="cancel"]', function (e) {
                            var e = e || window.event;
                            e.preventDefault();
                            jbox.close();
                        });

                    },
                    maxWidth:$(window).width()*0.98,
                    width: 700,
                });
            jbox.open();
        })
        $(document).on("focus",".bootstrap-tagsinput",function () {
            $(".bootstrap-tagsinput > input").attr("disabled","disabled");

        });
        /**/
    }
    
    function setupExportNoExam(eid, token, fmt,title, gid) {
        var start = 0, limit = 600, page = 1;

        var setPercent = function (percent) {
            percent = percent.toFixed(2);
            var tip = window.OELang.finishedPercent.format(percent);
            $("span.export-percent").html(tip);
            $(".progress-bar").css("width", percent + "%");
            $("span.sr-only").html(tip);
        };
        var loadData = function (s, l) {
            var data = {
                eid: eid,
                start: s,
                limit: l,
                fmt: fmt,
                gid: gid
            };
            data[token] = 1;
            $.post(window.YKS.exportnoexam, data).done(function (data) {
                data = $.parseJSON(data);
                if (data.status == "available") {
                    page++;
                    setPercent(page * 100 / data.pages);
                    loadData(s + l, l);
                } else if (data.status == "finished") {
                    setPercent(100);

                    $(".exporting").fadeOut();
                    $(".success").fadeIn();

                    var url = window.YKS.dlNoExamExport + "&eid={0}&{1}=1&fmt={2}&gid={3}";
                    url = url.format(eid, token, fmt, gid);
                    window.location.href = url;
                    $(".exported-tips").html(window.OELang.exportNoExamSuccess.format(url,title));
                }
            }).fail(function (data) {
                $(".exported-tips").html(window.OELang.exportNoExamFailed);
            })
        };

        loadData(start, limit);
    }
    function setupExportRewards(eid, token, fmt,title) {
        var start = 0, limit = 600, page = 1;

        var setPercent = function (percent) {
            percent = percent.toFixed(2);
            var tip = window.OELang.finishedPercent.format(percent);
            $("span.export-percent").html(tip);
            $(".progress-bar").css("width", percent + "%");
            $("span.sr-only").html(tip);
        };
        var loadData = function (s, l) {
            var data = {
                eid: eid,
                start: s,
                limit: l,
                fmt: fmt,
            };
            data[token] = 1;
            $.post(window.YKS.exportrewards, data).done(function (data) {
                data = $.parseJSON(data);
                if (data.status == "available") {
                    page++;
                    setPercent(page * 100 / data.pages);
                    loadData(s + l, l);
                } else if (data.status == "finished") {
                    setPercent(100);
                    $(".exporting").fadeOut();
                    $(".success").fadeIn();

                    var url = window.YKS.dlRewardsExport + "&eid={0}&{1}=1&fmt={2}";
                    url = url.format(eid, token, fmt);
                    window.location.href = url;
                    $(".exported-tips").html(window.OELang.exportRewardsSuccess.format(url,title));
                }
            }).fail(function (data) {
                $(".exported-tips").html(window.OELang.exportRewardsFailed);
            })
        };

        loadData(start, limit);
    }

    function setupExportExamRewards(eid, token, fmt,title) {
        var start = 0, limit = 600, page = 1;

        var setPercent = function (percent) {
            percent = percent.toFixed(2);
            var tip = window.OELang.finishedPercent.format(percent);
            $("span.export-percent").html(tip);
            $(".progress-bar").css("width", percent + "%");
            $("span.sr-only").html(tip);
        };
        var loadData = function (s, l) {
            var data = {
                eid: eid,
                start: s,
                limit: l,
                fmt: fmt,
            };
            data[token] = 1;
            $.post(window.YKS.exportexamrewards, data).done(function (data) {
                data = $.parseJSON(data);
                if (data.status == "available") {
                    page++;
                    setPercent(page * 100 / data.pages);
                    loadData(s + l, l);
                } else if (data.status == "finished") {
                    setPercent(100);
                    $(".exporting").fadeOut();
                    $(".success").fadeIn();

                    var url = window.YKS.dlExamRewardsExport + "&eid={0}&{1}=1&fmt={2}";
                    url = url.format(eid, token, fmt);
                    window.location.href = url;
                    $(".exported-tips").html(window.OELang.exportExamRewardsSuccess.format(url,title));
                }
            }).fail(function (data) {
                $(".exported-tips").html(window.OELang.exportExamRewardsFailed);
            })
        };

        loadData(start, limit);
    }

    function rechargeSms(){
        var prepaySmsBox = new jBox("Modal",{
            title:window.OELang.rechargeSmsTitle,
            closeButton: 'title',
            closeOnEsc: true,
            onCreated:function(){
                this.setContent($("#prepaySmsContent").html());
                $(".prepay-sms-button-groups").on("click",".cancel",function(){
                    prepaySmsBox.close();
                })
                $('input[name="sms-number"]').on("change",function(e){
                    var price = $(this).data("value");
                    $(".sms-price").html(window.OELang.smsAmounts.format(price));
                })
                $('.prepay-sms-container').on("click",'a[type="submit"]',function(e){
                    e.preventDefault();
                    var prepaySmsForm = document.getElementById('prepaySmsForm');
                    prepaySmsBox.close();
                    prepaySmsForm.submit();

                })
            },
            onCloseComplete:function(){
                prepaySmsBox.destroy();
            }

        })
        prepaySmsBox.open();
    }

    function setupEmailPage(token,eid){
        var AjaxLoad = function (target,status) {
            this.status = status;
            this.grid = $.nAjaxTable($("#emails-list-table"), window.YKS.listEmails,{
                eid:eid,
                status:status
            })
            NW.buildCheck($(target));
        }
        AjaxLoad.prototype = {
            setStatus:function(status){
              this.status = status;
              this.reload();
            },
            reload:function(){
                var grid = this.grid;
                grid.clearAjaxParams();
                grid.addAjaxParam("eid", eid);
                grid.addAjaxParam("status", this.status);
                grid.getDataTable().ajax.reload();
            },
            getGrid: function () {
                return this.grid;
            }

        }
        var emailsGrid = new AjaxLoad($('#emails-list-table'),0);

        $('#emails-list-table').on("click",'.resend-email',function(e){
            e.preventDefault();
            e.stopPropagation();
            var id = $(this).data("id");
            var statusSpan = $('span.status[data-id="{0}"]'.format(id));
            var data = {
                eid:eid,
                id:id
            }
            data[token] = 1;
            $.post(window.YKS.resendEmail,data);
            $(this).css("display","none");
            statusSpan.text(window.OELang.waitToSend);

        }).on("click",'.delete-email',function(e){
            e.preventDefault();
            e.stopPropagation();
            var id = $(this).data("id");
            var box = new jBox('Confirm', {
                confirmButton: window.OELang._delete,
                cancelButton: window.OELang.cancel,
                content: window.OELang.confirmDeleteField,
                confirm: function () {

                    var data = {
                        eid:eid,
                        id:id
                    }
                    data[token] = 1;
                    $.post(window.YKS.deleteEmailTakens,data).done(function(d){
                        var rData = $.parseJSON(d);
                        if(rData.status == "ok"){
                            NW.messageBox(window.OELang.notice,window.OELang.deleteSuccessfully)
                            emailsGrid.reload();
                        }else{
                            alert(rData.msg);
                        }
                    }).fail(function(d){
                        alert(d);
                    })
                },
                cancel: function () {
                },
                onCloseComplete:function(e){
                    box.destroy();
                },
                title: window.OELang.confirmDeleteField
            });
            box.open();
        })
        $('.btns-container').on('click','a.resend-all-emails',function(e){
            e.preventDefault();
            var ids = $.makeArray($('#emails-list-table').find('div.checker span.checked input.checkboxes')).map(function (item, index, array) {
                var val = Number($(item).val());
                if (val <= 0) {
                    return;
                }
                return val;
            });
            if(ids && ids.length <= 0){
                NW.messageBox(window.OELang.notice,window.OELang.pleaseSelectFirst);
                return;
            }
            var data = {
                eid:eid,
                emailIds:ids.join(',')
            }
            data[token] = 1;
            $.post(window.YKS.resendEmail,data);
            NW.messageBox(window.OELang.notice,window.OELang.sendedEmail);

        }).on('click','ul.send-type-status a',function(e){
            e.preventDefault();
            var self = $(this);
            var status = self.data('value');
            var sendText = self.text();
            $('#sendTypeDropdown').html(sendText + '<i class="fa fa-caret-down" aria-hidden="true" style="color: #DCDCDC;margin-left: 7px;"></i>');
            emailsGrid.setStatus(status);
        })
    }

    function setupCategoryPanelDragable(cls, id){
        if(!cls){
            cls = ".categories-panel";
        }
        if(!id){
            id = '#categories-tree'
        }

        var css = ".categories-panel .portlet > #categories-panel-dragger {\n    position:absolute;\n    height: 100%;\n    width: 10px;\n    background: #fff;\n    right: -11px;\n    top: 0;\n    cursor: e-resize;\n}\n\n\n.categories-panel .portlet{\n    position:relative;\n}\n\n.categories-panel .portlet.affix{\n    position:fixed;\n}\n.categories-panel .portlet > #categories-panel-dragger:after {\n    content: \"\\f0c9\";\n    position: absolute;\n    color: #888;\n    top: 50%;\n    left: 50%;\n    margin-left: -4px;\n    display: inline-block;\n    font: normal normal normal 14px/1 FontAwesome;\n    font-size: 8px;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n.categories-panel .portlet > #categories-panel-dragger:before {\n    content: \"\\f0c9\";\n    position: absolute;\n    color: #888;\n    top: 50%;\n    left: 50%;\n    margin-left: -4px;\n    margin-top:-10px;\n    display: inline-block;\n    font: normal normal normal 14px/1 FontAwesome;\n    font-size: 8px;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n}\n\n\n.categories-panel .portlet > #categories-panel-dragger{\n    transition: background .5s;\n}\n\n.categories-panel .portlet > #categories-panel-dragger:hover{\n    background:#ddd;\n}";

        css = css.replace(/\.categories-panel/g, cls);
        if(document.all){ // document.createStyleSheet(url)
            window.style=css;
            document.createStyleSheet("javascript:style");
        }else{ //document.createElement(style)
            var style = document.createElement('style');
            style.type = 'text/css';
            style.innerHTML=css;
            document.getElementsByTagName('HEAD').item(0).appendChild(style);
        }

        //自动设置高度
        var ww = window.innerWidth;
        var wh = window.innerHeight;
        if (ww >= 768) {
            var mh = wh - $(cls).offset().top;
            var ch = wh - $(cls+ ' '+id).offset().top;
            $(cls).css("height", mh+'px');
            $(cls + ' '+id).css("max-height", ch+'px')
        }


        $('<div id="categories-panel-dragger"></div>').appendTo($("{0} .portlet".format(cls)))

        var draging = false, clickX, categroyOw, contentOw;

        function  updateDom(w) {
            $(cls).css("width", "{0}px".format(w));
            $("{0} .portlet".format(cls)).css("width", "{0}px".format(w));
            $("{0} ~ div".format(cls)).css("margin-left", "{0}px".format(w+10));
        }

        function onMouseMove(e){
            if(!draging) return;
            var mouseX = e.pageX;
            var w = mouseX - clickX + categroyOw;
            if(w<50) return;
            updateDom(w)
        }

        function onMouseUp(e){
            draging = false;
            var mouseX = e.pageX;
            var w = mouseX - clickX + categroyOw;
            if(w<50) return;
            if( window.localStorage ){
                window.localStorage.setItem("categories-panel-width", w);
            }

            $(document).off("mousemove", onMouseMove)
            $(document).off("mouseup", onMouseUp);
        }

        $(cls).on("mousedown", "#categories-panel-dragger", function(e){
            draging = true;
            categroyOw = $(cls).width();
            clickX = e.pageX;
            $(document).on("mousemove", onMouseMove)
            $(document).on("mouseup", onMouseUp);
        })


        if(window.localStorage){
            var w = window.localStorage.getItem("categories-panel-width");
            w = Number(w);
            if( w > 0){
                updateDom(w);
            }
        }
    }

    function setupCreateRegister(step,standalone){
        $(".register-content").height($(window).height()-179);
        //点击头部步骤条
        $(".circle").on("click",function(){
            var val = $(this).html();
            if((standalone == 1 && val != step) || val<step){
                var action = $("form").attr("action");
                action = action + "&to=" + val;
                $("form").attr("action",action);
                $("form").submit();
            }
        });
        //预览报名
        $("a[href='#preview']").click(function(e){
            e.preventDefault();
            var template = $("#preview").text();
            var previewBox = new jBox("Modal", {
                content: template,
                width:$(window).width(),
                height:$(window).height(),
                onCloseComplete: function(){
                    this.destroy();
                },
                onCreated:function(){
                    var lock = 0;
                    $(document).on('click',".preview-label",function(){
                        if($(this).hasClass("pc")){
                            $(this).find("img").attr("src","/components/com_exams/assets/img/pc_select.png")
                            $(".phone").find("img").attr("src","/components/com_exams/assets/img/mobile_unselect.png")
                            $(".phone").find("a").css("color","#333");
                            $(".pc-iframe").css("display","block");
                            $(".phone-iframe").css("display","none");
                        }else{
                            if(lock == 0){
                                $(".phone-iframe").find("iframe").attr("src",$(".phone-iframe").find("iframe").attr("src"));
                                lock = 1;
                            }
                            $(this).find("img").attr("src","/components/com_exams/assets/img/mobile_select.png")
                            $(".pc").find("a").css("color","#333");
                            $(".pc").find("img").attr("src","/components/com_exams/assets/img/pc_unselect.png")
                            $(".pc-iframe").css("display","none");
                            $(".phone-iframe").css("display","block");
                        }
                        $(this).find("a").css("color","#36aafd")
                    }),
                    $("a[href='#close']").click(function(e){
                        e.preventDefault();
                        previewBox.close();
                    })
                }
            });
            previewBox.open();
        })
    }

    function createQuestionnaireCategoryTree(treeEl, searchEl, addNodeEl, treeOptions, token) {
        var createNodeCallback = function (node) {
            var inst = $.jstree.reference(node);
            setTimeout(function () {
                inst.edit(node, 0, function (node, status, cancelled) {
                    if (status) {
                        inst.get_node(node, true).addClass('jstree-loading').attr('aria-busy', true);
                        var data = {
                            title: node.text,
                            parent_id: node.li_attr.parent_id
                        };
                        data[token] = 1;
                        $.ajax({
                            url: window.YKS.addQuestionnaireCategory,
                            type: 'post',
                            data: data,
                            dataType: 'json',
                            success: function (data, status, xhr) {
                                if (data.status === 'success') {
                                    var result = data.result;
                                    node.li_attr.title = result.title;
                                    node.li_attr.catid = result.caid;
                                    node.li_attr.parent_id = result.parent_id;
                                    inst.set_id(node, result.caid);
                                    var nodeEl = inst.get_node(node, true);
                                    nodeEl.attr('title', node.text);
                                    if (treeOptions.createdNodeCallback) treeOptions.createdNodeCallback(inst, node);
                                } else {
                                    inst.delete_node(node);
                                    alert('status: ' + data.status + '; message: ' + data.message);
                                }
                            },
                            error: function (xhr, status, error) {
                                inst.delete_node(node);
                                alert(error);
                            },
                            complete: function (xhr, status) {
                                inst.get_node(node, true).removeClass('jstree-loading').attr('aria-busy', false);
                            }
                        });
                    } else {
                        inst.delete_node(node);
                        alert('new category failed');
                    }
                });
            }, 0);
        };

        treeOptions.ttl = 900000
        var options = {
            core: {
                multiple: treeOptions.core.multiple || false,
                check_callback: treeOptions.core.check_callback !== undefined ? treeOptions.core.check_callback : true,
                data: treeOptions.core.data || false
            },
            plugins: ['types', 'wholerow', 'search'].concat(treeOptions.plugins),
            types: {
                "default": {
                    icon: 'fa fa-folder icon-state-warning icon-lg'
                }
            },
            state: treeOptions.state,
            search: {
                show_only_matches: true,
                ajax: function () {
                    var ajax = {
                        url: window.YKS.searchQuestionnaireCategory,
                        dataType: 'json',
                        type: 'post',
                        data: {

                        }
                    };
                    ajax.data[token] = 1;
                    return ajax;
                }()
            },
            contextmenu: {
                select_node: false,
                show_at_node: false,
                items: createQuestionnaireCategoryTreeContextMenu(treeEl, searchEl, addNodeEl, treeOptions, token, createNodeCallback)
            },
            dnd: {
                copy: false,
                inside_pos: 'last',
                touch: false,
                large_drop_target: true,
                large_drag_target: true,
                is_draggable: function (nodes, e) {
                    for (var i = 0; i < nodes.length; i++) {
                        if (!nodes[i].id || nodes[i].id <= 0) {
                            return false;
                        }
                    }
                    return true;
                }
            },
            checkbox: treeOptions.checkbox || {
                three_state: false,
                cascade: 'undetermined'
            }
        };

        //var treeInst = $.jstree.create(treeEl, options);
        var treeInst = new NwJstree(treeEl, options).create();

        /*---add level 1 category---*/
        if (addNodeEl) {
            addNodeEl.on('click', function (e) {
                var e = e || window.event;
                e.preventDefault();
                var titleDefault = window.OELang.newCategory;
                if(e.target.id == "newRetestGroup"){
                    titleDefault = window.OELang.newRetestGroup;
                }
                var node = {
                    text: titleDefault,
                    li_attr: {
                        title: titleDefault
                    }
                };
                treeInst.create_node('#', node, 'last', createNodeCallback);
            });
        }
        /*---add level 1 category---*/

        /*---categories search---*/
        if (searchEl) {
            searchEl = $(searchEl);
            var to = false;
            searchEl.keyup(function () {
                if (to) {
                    clearTimeout(to);
                }
                to = setTimeout(function () {
                    var str = searchEl.val();
                    treeInst.search(str);
                }, 250);
            });
        }
        /*---categories search---*/

        /*---contextmenu---*/
        if ($.inArray('contextmenu', options.plugins)) {
            var show_contextmenu = $.proxy(treeInst.show_contextmenu, treeInst);
            treeInst.show_contextmenu = function (obj, x, y, e) {
                obj = treeInst.get_node(obj);
                if(!obj || obj.id === $.jstree.root || obj.id <= 0) { return false; }
                show_contextmenu(obj, x, y, e);
            };
        }
        /*---contextmenu---*/

        /*---dnd---*/
        if ($.inArray('dnd', options.plugins)) {
            //所有试卷/试题 和 默认分类 拖拽鼠标悬浮提示
            $(document).on('dnd_move.vakata.jstree', function (e, data) {
                var target = treeInst.get_node(data.event.target);
                if (target.id <= 0) {
                    data.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');
                }
            });

            treeInst.options.move_node = function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {
                //所有试卷/试题 和 默认分类 判断，无法移动到这两个分类内部

                if (Array.isArray(obj)) {
                    var parNode = this.get_node(par);
                    // var parCid = parNode.a_attr ? parNode.a_attr.catid : parNode.id;
                    if ((parNode.id <= 0) || (parNode.id === '#' && pos < 2)) {
                        return false;
                    }

                    var dom = this.get_node(par, true);
                    if(dom){
                        dom.addClass('jstree-loading').attr('aria-busy', true);
                    }
                    var children = parNode.children;
                    var reId, posStr;
                    if (pos === 0 || pos === 'last' || children.length === pos) {
                        reId = parNode.id;
                        posStr = 'last-child';
                    } else {
                        reId = children[pos];
                        posStr = 'before';
                    }
                    var nodes = [];
                    for (var i = 0; i < obj.length; i++) {
                        var node = obj[i];
                        if (Number(this.get_parent(node)) !== Number(reId) || posStr !== 'last-child') {
                            nodes.push(Number(typeof node === 'object' ? node.id : node));
                        }
                    }

                    if (nodes.length > 0) {
                        nodes.reverse();
                        var move_node_ajax = function () {
                            var data = {
                                nodes: nodes,
                                reid: reId,
                                pos: posStr
                            };
                            data[token] = 1;
                            $.ajax({
                                url: window.YKS.moveQuestionnaireCategory,
                                type: 'post',
                                data: data,
                                dataType: 'json',
                                success: function (data, status, xhr) {
                                    if (data.status === 'success') {
                                        treeInst.old_move_node.call(treeInst, obj, par, pos, callback, is_loaded, skip_redraw, origin);
                                    } else {
                                        alert('status: ' + data.status + '; message: ' + data.message);
                                    }
                                },
                                error: function (xhr, status, error) {
                                    alert('status: ' + status + '; error: ' + error);
                                },
                                complete: function (xhr, status) {
                                    if(dom){
                                        dom.removeClass('jstree-loading').attr('aria-busy', false);
                                    }
                                }
                            });
                        };
                        if (this.is_loaded(parNode)) {
                            move_node_ajax();
                        } else {
                            this.load_node(parNode, move_node_ajax);
                        }
                    } else {
                        //move_node(obj, par, pos, callback, is_loaded, skip_redraw, origin);
                        this.get_node(parNode, true).removeClass('jstree-loading').attr('aria-busy', false);
                    }
                } else {
                    this.old_move_node(obj, par, pos, callback, is_loaded, skip_redraw, origin);
                }
            };
        }
        /*---dnd---*/

        return treeInst;
    }

    function selectQuestionnaireCategory(title, selectedCateID, callback, token, multiple, showAllGroup){

        var oldId = [];
        var content = '<div id="category-selector">{0}<div class="tree"></div>{1}</div>';
        var search = '<div class="input-icon group-search"><i class="fa fa-search"></i><input type="text" class="form-control input-circle" placeholder="{0}"></div>';
        content = content.format(search.format(window.OELang.search), multiple?'<div class="selected"></div>':'');

        var treeOption = {
            core: {
                multiple: false,
                check_callback: true,
                data: {
                    type: 'post',
                    dataType: 'json',
                    url: window.YKS.loadQuestionnaireCategories,
                    data: function (node) {
                        var data = {type: 1};
                        data[token] = 1;
                        if (node.id === '#') {
                            data.cats = [];
                            data.cats.push({id: -1, text: window.OELang.anyCate, li_attr: {catid: -1, title: window.OELang.anyCate}});
                            data.cats.push({id: 0, text: window.OELang.defaultCategory, li_attr: {catid: 0, title: window.OELang.defaultCategory}});
                        } else {
                            data.catid = node.id;
                        }
                        return data;
                    }
                }
            },
            plugins: [],
            createdNodeCallback: function (inst, node) {
            },
            renamedNodeCallback: function (inst, node) {
            },
            removedNodeCallback: function (inst, node) {
            }
        };
        treeOption.core.multiple= !!multiple;
        if(!!multiple) treeOption.plugins.push('checkbox');


        var treeInstance;
        var dialog = NW.showDialog(content, [{
            label:window.OELang.cancel,
            onClick:function(){
                dialog.close();
            }
        },
            {
                label: window.OELang.sure,
                primary: true,
                cls:'blue',
                onClick: function(){
                    var selecteds = treeInstance.get_selected(true);
                    if(callback){
                        callback(selecteds.map(function(item){
                            return {
                                catid: item.id,
                                text: item.text
                            }
                        }))
                    }
                    dialog.close();
                }
            }], title, {
            onCreated: function () {
                $('#category-selector').parents('.dialog-content').css({
                    "margin-top":0,
                    "overflow-y": 'visible'
                })
                $('#category-selector .tree').css({
                    "margin-top":"10px",
                    "border": "1px solid #eaeaea",
                    "height": "480px",
                    "overflow": "auto",
                    "padding": "5px",
                })
                treeInstance = createGroupTree($('#category-selector > .tree'), $('#category-selector .group-search > input'), null, treeOption, token);
                treeInstance.refresh();

                $('#category-selector > .tree').one('loaded.jstree', function (e, data) {
                    treeInstance.deselect_all();
                    if (selectedCateID.length > 0) {
                        treeInstance.load_all(null, function () {
                            for(var i=0; i<selectedCateID.length; i++){
                                treeInstance.select_node(treeInstance.get_node(Number(selectedCateID[i])));
                            }
                        });
                    }
                }).on('changed.jstree', function (e, data) {
                    var selIds = treeInstance.get_selected().map(function (id) {
                        return Number(id)
                    });
                    if (selIds.length > 1) {
                        var node = data.node;
                        if (node.id == -1) {
                            NW.showConfirmDialog(window.OELang.allCategoryConflictWithOther, function(resp){
                                if(resp == 'yes'){
                                    treeInstance.deselect_all();
                                    treeInstance.select_node(0);
                                }else{
                                    treeInstance.deselect_node(0);
                                }
                            })
                        } else if ($.inArray(-1, selIds) >= 0) {
                            NW.showConfirmDialog(window.OELang.allCategoryConflictWithOther, function(resp){
                                if(resp == 'yes'){
                                    treeInstance.deselect_node(0);
                                }else{
                                    treeInstance.deselect_node(node.id);
                                }
                            })
                        }
                    }
                    if (selIds.length == 1 && oldId.length > 0) {
                        var node = data.node;
                        if (node.id == -1 || ($.inArray("0", oldId) != -1)) {
                            if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                oldId = [];
                            } else {
                            }
                        }
                    }

                    //处理父子关系的选择
                    if(node && Number(node.id) > 0 ){
                        var id=Number(node.id);
                        var children_d = node.children_d;
                        //判断是否有子级已经选择了， 如果有子级已经选择了，则把子集设置不选择
                        for(var i=0; i<children_d.length;i++){
                            if( selIds.indexOf(Number(children_d[i]))>-1){
                                treeInstance.deselect_node(children_d[i], true);
                            }
                        }

                        var parents = node.parents;
                        for(var i=0; i<parents.length;i++){
                            if( selIds.indexOf(Number(parents[i]))>-1){
                                treeInstance.deselect_node(parents[i], true);
                            }
                        }
                    }
                })
            },
            width: 750,
            height: 600
        });
        dialog.dialog.content.css({"overflow":"hidden"});
    }

    function selectCourseCategory(title, selectedCateID, callback, token, multiple, showAllGroup,type){
        var oldId = [];
        var content = '<div id="category-selector">{0}<div class="tree"></div>{1}</div>';
        var search = '<div class="input-icon group-search"><i class="fa fa-search"></i><input type="text" class="form-control input-circle" placeholder="{0}"></div>';
        content = content.format(search.format(window.OELang.search), multiple?'<div class="selected"></div>':'');

        var treeOption = {
            core: {
                multiple: false,
                check_callback: true,
                data: {
                    type: 'post',
                    dataType: 'json',
                    url: window.YKS.loadCourseCategories,
                    data: function (node) {
                        var data = {type: 1};
                        data[token] = 1;
                        data['type'] = type;
                        if (node.id === '#') {
                        } else {
                            data.catid = node.id;
                        }
                        return data;
                    }
                }
            },
            plugins: [],
            createdNodeCallback: function (inst, node) {
            },
            renamedNodeCallback: function (inst, node) {
            },
            removedNodeCallback: function (inst, node) {
            }
        };
        treeOption.core.multiple= !!multiple;
        if(!!multiple) treeOption.plugins.push('checkbox');


        var treeInstance;
        var dialog = NW.showDialog(content, [{
            label:window.OELang.cancel,
            onClick:function(){
                dialog.close();
            }
        },
            {
                label: window.OELang.sure,
                primary: true,
                cls:'blue',
                onClick: function(){
                    var selecteds = treeInstance.get_selected(true);
                    if(callback){
                        callback(selecteds.map(function(item){
                            return {
                                catid: item.id,
                                text: item.text
                            }
                        }))
                    }
                    dialog.close();
                }
            }], title, {
            onCreated: function () {
                $('#category-selector').parents('.dialog-content').css({
                    "margin-top":0,
                    "overflow-y": 'visible'
                })
                $('#category-selector .tree').css({
                    "margin-top":"10px",
                    "border": "1px solid #eaeaea",
                    "height": "480px",
                    "overflow": "auto",
                    "padding": "5px",
                })
                treeInstance = createGroupTree($('#category-selector > .tree'), $('#category-selector .group-search > input'), null, treeOption, token);
                treeInstance.refresh();

                $('#category-selector > .tree').one('loaded.jstree', function (e, data) {
                    treeInstance.deselect_all();
                    if (selectedCateID.length > 0) {
                        treeInstance.load_all(null, function () {
                            for(var i=0; i<selectedCateID.length; i++){
                                treeInstance.select_node(treeInstance.get_node(Number(selectedCateID[i])));
                            }
                        });
                    }
                }).on('changed.jstree', function (e, data) {
                    var selIds = treeInstance.get_selected().map(function (id) {
                        return Number(id)
                    });
                    if (selIds.length > 1) {
                        var node = data.node;
                        if (node.id == -1) {
                            NW.showConfirmDialog(window.OELang.allCategoryConflictWithOther, function(resp){
                                if(resp == 'yes'){
                                    treeInstance.deselect_all();
                                    treeInstance.select_node(0);
                                }else{
                                    treeInstance.deselect_node(0);
                                }
                            })
                        } else if ($.inArray(-1, selIds) >= 0) {
                            NW.showConfirmDialog(window.OELang.allCategoryConflictWithOther, function(resp){
                                if(resp == 'yes'){
                                    treeInstance.deselect_node(0);
                                }else{
                                    treeInstance.deselect_node(node.id);
                                }
                            })
                        }
                    }
                    if (selIds.length == 1 && oldId.length > 0) {
                        var node = data.node;
                        if (node.id == -1 || ($.inArray("0", oldId) != -1)) {
                            if (confirm(window.OELang.allCategoryConflictWithOther)) {
                                oldId = [];
                            } else {
                            }
                        }
                    }

                    //处理父子关系的选择
                    if(node && Number(node.id) > 0 ){
                        var id=Number(node.id);
                        var children_d = node.children_d;
                        //判断是否有子级已经选择了， 如果有子级已经选择了，则把子集设置不选择
                        for(var i=0; i<children_d.length;i++){
                            if( selIds.indexOf(Number(children_d[i]))>-1){
                                treeInstance.deselect_node(children_d[i], true);
                            }
                        }

                        var parents = node.parents;
                        for(var i=0; i<parents.length;i++){
                            if( selIds.indexOf(Number(parents[i]))>-1){
                                treeInstance.deselect_node(parents[i], true);
                            }
                        }
                    }
                })
            },
            width: 750,
            height: 600
        });
        dialog.dialog.content.css({"overflow":"hidden"});
    }

    function viewTakenDetails(detailsURL){
        if(!ispc()){
            window.open(detailsURL, "_blank");
            return false;
        }
        var w = window.innerWidth*0.9,
            h = window.innerHeight*0.9;

        w = w>1100?1100:w;
        h = h>750?750:h;

        var box = new jBox('Modal', {
            id:"view_taken_details",
            width: w,
            height: h,
            content: '<div> <iframe width="100%" height="{0}" frameborder="no" border="0" marginwidth="0" marginheight="0"></iframe> </div>'.format(h-30),
            onCreated:function(){
                $("#view_taken_details").find('iframe')[0].src=detailsURL;
            },
            onCloseComplete:function(){
                this.destroy();
            }
        });
        box.open();
    }

    $.fn.extend({
        wrongRightQuestions: function (action, filterType, eid, sid) {
            var url = window.YKS.wrongRightQuestions;
            url = url + "&action=" + action + "&eid=" + eid + "&filter=" + filterType + "&sid="+sid;
            $.nAjaxTable($(this), url, {})
        },
        hasAttr: function (attrName) {
            var attr = $(this).attr(attrName);
            // For some browsers, `attr` is undefined; for others,
            // `attr` is false.  Check for both.
            if (typeof attr !== typeof undefined && attr !== false) {
                return true;
            }
            return false;
        },

        /***
         * ajax load data
         * @param dataURL
         * @param paramters 用于提交给ajax的数据
         */
        ajaxTable: function (dataURL, paramters) {
            return $.nAjaxTable($(this), dataURL, paramters);
        },
        clickCopyToClipbard: function(url){
            if(url) $(this).data("clipboard-text", url);
            var clipboard = new Clipboard($(this)[0]);
            clipboard.on('success', function(e) {
                var jbox = new jBox("Tooltip", {
                    content: window.OELang.copiedToClipboard,
                    target: $(e.trigger)
                }).open();
                setTimeout(function(){jbox.close()}, 1000);
            });
        }
    })

    $.extend({
        setupExamQuestionsPage: setupExamQuestionsPage,
        setupAdvanceQuestionsPage:setupAdvanceQuestionsPage,
        setupExamJSQuestionsPage: setupExamJSQuestionsPage,
        setupExportTakenResult: setupExportTakenResult,
        setupQuestionsListPage: setupQuestionsListPage,
        setupExamsManagePage: setupExamsManagePage,
        setupTakenListPage: setupTakenListPage,
        setupDashboardPage: setupDashboardPage,
        setupExamSettingsPage: setupExamSettingsPage,
        setupExportCategoryScore: setupExportCategoryScore,
        setupExportCollection: setupExportCollection,
        setupEditQuestionPage: setupEditQuestionPage,
        setupCategoriesPage: setupCategoriesPage,
        setupFixTaken: setupFixTaken,
        setupTasks: setupTasks,
        setupStudentsAvaExeam: setupStudentsAvaExeam,
        newStudentField: newStudentField,
        setupStudents: setupStudents,
        newStudentAction: newStudentAction,
        newStudent: newStudent,
        selectGroup: selectGroup,
        selectGroupV2:selectGroupV2,
        selectPartGroup:selectPartGroup,
        selectCategory:selectCategory,
        newGroup: newGroup,
        setupExportStuAnswers: setupExportStuAnswers,
        setupCreateOrEditExamOrQuesSelCatWindow: setupCreateOrEditExamOrQuesSelCatWindow,
        createCategoryTree: createCategoryTree,
        setupExportQuestions:setupExportQuestions,
        createGroupTree: createGroupTree,
        selectGroupTree:selectGroupTree,
        comparedGroupGroupTree:comparedGroupGroupTree,
        authorizeWechat:AuthorizeWechat,
        setupOrdersPage:setupOrdersPage,
        setupIncomeManagementPage:setupIncomeManagementPage,
        freeGroupTree:freeGroupTree,
        setupWithdrawPage:setupWithdrawPage,
        setupStartExamPage:setupStartExamPage,
        setupSmsPage:setupSmsPage,
        setupNameAuthenticationPage:setupNameAuthenticationPage,
        setupExportNoExam:setupExportNoExam,
        setupExportRewards:setupExportRewards,
        setupExportExamRewards:setupExportExamRewards,
        setupCategoryPanelDragable:setupCategoryPanelDragable,
        setupExportStudentsResult:setupExportStudentsResult,
        EditQuestion:EditQuestion,
        setupArchivedExamsManagePage:setupArchivedExamsManagePage,
        setupMakeUpExamPage:setupMakeUpExamPage,
        setupEmailPage:setupEmailPage,
        rechargeSms:rechargeSms,
        setupCreateRegister:setupCreateRegister,
        createQuestionnaireCategoryTree:createQuestionnaireCategoryTree,
        selectQuestionnaireCategory:selectQuestionnaireCategory,
        selectCourseCategory:selectCourseCategory,
        viewTakenDetails:viewTakenDetails,
        copyToClipboard: function(text){
                if (window.clipboardData && window.clipboardData.setData) {
                    // IE specific code path to prevent textarea being shown while dialog is visible.
                    return clipboardData.setData("Text", text);

                } else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
                    var span = document.createElement("span");
                    var s = window.getSelection();
                    span.innerText = text;
                    span.style.opacity = 0;
                    document.body.appendChild(span);
                    if(s.rangeCount > 0) s.removeAllRanges();
                    var range = document.createRange();
                    range.selectNode(span);
                    s.addRange(range);
                    try {
                        return document.execCommand("copy");  // Security exception may be thrown by some browsers.
                    } catch (ex) {
                        console.warn("Copy to clipboard failed.", ex);
                        return false;
                    } finally {
                        document.body.removeChild(span);
                    }
                    return false;
                }
        },
    });

    $(function () {
        $(document.body).on("click", "a[clickViewQuestionDetails]", onBriefViewQuestion);
        //处理复制
        var clipboard = new Clipboard('button.copydata');
        clipboard.on('success', function(e) {
            var jbox = new jBox("Tooltip", {
                content: window.OELang.copiedToClipboard,
                target: $(e.trigger)
            }).open();
            setTimeout(function(){jbox.close()}, 1000);
        });
    })
})(jQuery)